<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title></title>
    <link>http://tigerthinks.com</link>
    <description>
      Tiger Shen
    </description>
    
        
            <item>
                <title>Everything I Never Told You</title>
                <link>http://tigerthinks.com/2019/06/15/everything-i-never-told-you/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: Lydia Lee, a 16 year old in Middletown, commits suicide. Her family
grapples with how this could have happened. It turns out everyone, including
Lydia, has their own internal demons that don’t come out until it’s too late.
Then they are left to figure out how they can be better in the future.</p>

<h2 id="response">Response</h2>

<p>Extremely relatable as a Chinese-American myself. Execution was just missing a
little bit of something though. Paints a vivid picture of how death, and
especially suicide, affects everyone who was close to the deceased. Shows how it
can tear people apart, but also slightly optimistically how it can help people
improve on their own flaws. Wish I could have been slightly more invested in the
characters, but don’t have a concrete suggestion for how that could have
happened – maybe not as many time jumps? Mabye a little more “show, don’t tell”
w.r.t. their emotions?</p>

<ul>
  <li>Next time: Ankify responses? Feelings? idk</li>
</ul>

<h2 id="plot">Plot</h2>

<ul>
  <li>Takes place in 1977 in suburban Ohio</li>
  <li>Lydia Lee is dead. At first, they think she just ran away, but she’s found in
the lake a few days after going missing</li>
  <li>Jumps back to 1955. Marilyn and James (Lydia’s parents) meet at Harvard where
she is a student at the women’s college and he is a graduate student teachinga
class. They fall in love
    <ul>
      <li>Odd match. Marilyn is from Virginia and her mother is extremely
traditional, while she wants to be a doctor and is willing to endure lots of
doubt and sexism to make it happen. James is the son of Chinese immigrants
and has felt like an outcast his whole life because of this.</li>
    </ul>
  </li>
  <li>Marilyn gets pregnant, so they get married and she drops out of school.
Marilyn’s mother disapproves, and they never see each other again</li>
  <li>Jack Wolff is introduced – a student at Lydia’s school who she spent a lot of
time with leading up to her death.. Lydia’s older brother Nath thinks he knows
something about why Lydia killed herself.</li>
  <li>Stressed out, James sleeps with his teaching assistant Louisa, who is also
Chinese. He finds comfort in her familiarity</li>
  <li>Time skip back 11 years to when Lydia is 5. Marilyn’s mother dies, and going
through her mother’s old stuff and realizing how sad her life was prompts
Marilyn to want to pursue her own dreams again, which unfortunately means
leaving her family behind. She drops everything and enrolls in school</li>
  <li>3 weeks later, she finds out she’s pregnant, so she returns home to her kids
    <ul>
      <li>During this time, Lydia vows to never disappoint her mother again, so that
her mother never leaves again. At the same time, Marilyn vows that Lydia
will be a doctor, pushing her own dreams onto her daughter</li>
    </ul>
  </li>
  <li>James and Marilyn both favor Lydia, and this frustrates Nath. He gets into
Harvard though, and cannot wait to go to college.</li>
  <li>Lydia befriends Jack in the last semester before her death. Jack has a
reputation as a player, but their relationship is purely platonic and they
find that they have a lot in common. Lydia opens up to Jack about her
frustration with the pressure from her parents. Lydia is failing physics and
does not feel like she can keep up.</li>
  <li>Back in the present, after Lydia’s death, Marilyn finds out that James is
sleeping with Louisa and confronts both of them</li>
  <li>Hannah notices Lydia is distraught in the weeks leading up to her death, but
does not bring it up. All Hannah wants is to be noticed. She is used to being
the fly on the wall, ignored.</li>
  <li>Time-skip to the days before Lydia dies. Various events push her to the
breaking point, including being ignored by her older brother and jack
rejecting her sexual advances. She decides to jump into the lake even though
she cannot swim.</li>
  <li>Back after her death, James and Marilyn make up. Nath and Hannah also come to
terms with everything. Everyone resolves to move forward with sadness, but
also to honor Lydia’s memory by not making the same mistakes again.</li>
</ul>

<h2 id="characters">Characters</h2>

<ul>
  <li>Lydia Lee: girl who commits suicides and prompts the entire story. Feels
completely weighed down by the pressure from her family, wants to be her own
person but lacks the facilities to express that</li>
  <li>Marilyn Lee: Lydia’s mom. Her whole life she has wanted to escape the “perfect
housewife” life that her mother led and wanted for her. When she finds that
she has fallen into it anyways, she decided that her daughter will be a
doctor. Puts a ton of pressure on Lydia, often doesn’t pay as much attention
to her other kids.</li>
  <li>James Lee: Lydia’s father. Son of Chinese immigrants, and this shapes his
life. Has always felt like an outcast. Wants his son to be different, but also
feels ashamed that he is not strong enough himself. Experience of racism leads
him to become isolated</li>
  <li>Nathan Lee: Lydia’s older brother. Has always been mildly jealous of the
attention she gets, but is there for her nonetheless. Is looking forward to
being able to go to Harvard and escape his family, and that makes him neglect
his family a bit.</li>
  <li>Hannah Lee: Lydia’s younger sister. Has always been extremely quiet, and feels
ignored by her family. Is very empathetic and observant of those around her.</li>
  <li>Jack Wolff: boy who lives on the same street as the Lees. Has a reputation as
a player at school. Becomes friends with Lydia in the months leading up to her
death. Is secretly gay/bisexual for Lydia’s brother Nath. When he rejects
Lydia’s sexual advances, it’s one of the things that pushes Lydia over the
edge to suicide.</li>
</ul>

<h2 id="themes">Themes</h2>

<ul>
  <li>racism</li>
  <li>chinese-americanness</li>
  <li>appearance vs. disappearance</li>
  <li>secrets</li>
  <li>loneliness</li>
  <li>suicide</li>
  <li>expectations and disappointment</li>
</ul>

<h2 id="snippets">Snippets</h2>

<blockquote>
  <p>
  (Referring to Lydia's motivation for suicide) Because more than anything, her
  mother had wanted to stand out; because more than anything, her father had
  wanted to blend in. Because those things had been impossible. (25)
  </p>
</blockquote>

<blockquote>
  <p>
  (Marilyn) She thought of her mother, the life her mother had wanted for her,
  the life her mother had hoped to lead herself: husband, children, house, her
  sole job to keep it all in order. Without meaning to, she’d acquired it. (78)
  </p>
</blockquote>

<blockquote>
  <p>
  (Lydia, after her mother comes home from her disappearance) If her mother ever
  came home and told her to finish her milk, she thought, the page wavering to a
  blur, she would finish her milk. She would brush her teeth without being asked
  and stop crying when the doctor gave her shots. She would go to sleep the
  second her mother turned out the light. She would never get sick again. She
  would do everything her mother told her. Everything her mother wanted. (137)
  </p>
</blockquote>

<blockquote>
  <p>
  For her it was too late. But it wasn’t too late for Lydia. Marilyn would not
  be like her own mother, shunting her daughter toward husband and house, a life
  spent safely behind a deadbolt. She would help Lydia do everything she was
  capable of. She would spend the rest of her years guiding Lydia, sheltering
  her, the way you tended a prize rose: helping it grow, propping it with
  stakes, arching each stem toward perfection. In Marilyn’s belly, Hannah began
  to fidget and kick, but her mother could not yet feel it. She buried her nose
  in Lydia’s hair and made silent promises. Never to tell her to sit up
  straight, to find a husband, to keep a house. Never to suggest that there were
  jobs or lives or worlds not meant for her; never to let her hear doctor and
  think only man. To encourage her, for the rest of her life, to do more than
  her mother had. (146)
  </p>
</blockquote>

<blockquote>
  <p>
  (James, to Nath) He did not understand why he said these things to Nath, for
  that would have meant understanding something far more painful: that Nath
  reminded him more and more of himself, of everything he wanted to forget from
  his own boyhood. (154)
  </p>
</blockquote>

<blockquote>
  <p>
  (Marilyn) Everything that she had wanted for Lydia, which Lydia had never
  wanted but had embraced anyway. A dull chill creeps over her. Perhaps—and this
  thought chokes her—that had dragged Lydia underwater at last. (244)
  </p>
</blockquote>

<blockquote>
  <p>
  (James) What made something precious? Losing it and finding it. All those
  times he’d pretended to lose her. (279)
  </p>
</blockquote>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/06/15/everything-i-never-told-you/</guid>
                <description>
                    
                    Lydia Lee, a 16 year old in Middletown, commits suicide. Her family grapples with how this could have happened. It turns out everyone, including Lydia, has their own internal demons that don't come out until it's too late.
                    
                </description>
                <pubDate>Sat, 15 Jun 2019 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Software Estimation: Demystifying The Black Art</title>
                <link>http://tigerthinks.com/2019/06/07/software-estimation-demystifying-the-black-art/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: More of a reference book than a read-through book. Goes through a lot
of software estimation techniques. Meat of the book was in the first section.</p>

<h2 id="notes">Notes</h2>

<p>Note: taken from the “tips” appendix mainly, with context where appropriate</p>

<ul>
  <li><strong>Estimate</strong>: prediction of how long a project will take or cost</li>
  <li><strong>Target</strong>: statement of a desirable business objective</li>
  <li><strong>Commitment</strong>: promise to deliver defined functionality at a specific level
of quality by a certain date</li>
  <li>Estimation should be treated as an unbiased, analytical process; planning
should be treated as a biased, goal-seeking process.</li>
  <li>Tip 2: When you’re asked to provide an estimate, determine whether you’re
supposed to be estimating or figuring out how to hit a target.</li>
  <li>Tip 4: When you see a single-point estimate, that number’s probability
is not 100%. Ask what the probability of that number is.</li>
  <li>Tip 6: Don’t intentionally underestimate. The penalty for underestimation is
more severe than the penalty for overestimation.  Address concerns about
overestimation through planning and control, not by biasing your estimates.</li>
  <li>Tip 10: Many businesses value predictability more than development time, cost, or
flexibility. Be sure you understand what your business values the most.</li>
  <li>Tip 18: Include all necessary software-development activities in your estimates, not
just coding and testing.</li>
  <li>
    <p>Tip 47: Decompose large estimates into small pieces so that you can take
advantage of the Law of Large Numbers: the errors on the high side and the
errors on the low side cancel each other out to some degree.</p>
  </li>
  <li>Tough to apply just by reading all of these techniques. Major takeaway is that
everyone needs to be on the same page, and in general people underestimate the
amounts of time and resources.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/06/07/software-estimation-demystifying-the-black-art/</guid>
                <description>
                    
                    More of a reference book than a read-through book. Goes through a lot of software estimation techniques. Meat of the book was in the first section.
                    
                </description>
                <pubDate>Fri, 07 Jun 2019 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>The Book Thief</title>
                <link>http://tigerthinks.com/2019/06/04/the-book-thief/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: A German foster child named Liesel Meminger is The Book Thief. The
story of her experience during the war.</p>

<h2 id="response">Response</h2>

<p>Maybe I’m just numbing to all of these WWII novels but I couldn’t muster up as
much relation to these characters as the ones in The Nightingale and Beneath a
Scarlet Sky</p>

<h2 id="plot">Plot</h2>

<ul>
  <li>Death is the narrator</li>
  <li>Liesel Meminger is going to live with a foster family, the Hubermanns</li>
  <li>Liesel’s brother dies on the trip to Molching</li>
  <li>She settles into her new life with her foster father Hans (kind and gentle)
and foster mother Rosa (potty-mouth but sweet at heart). Becomes friends with
a kid named Rudy down the street</li>
  <li>Hans teaches Liesel to read. Liesel stole one book on her way to Molching,
finds others as time goes along</li>
  <li>Rosa does laundry for the rich people in town. As war hits, everyone is
negatively affected and she loses business</li>
  <li>The mayor’s wife, Frau Herrmann, is friendly to Liesel and allows her to use
the library</li>
  <li>A Jew named Max hides in the Hubermann basement
    <ul>
      <li>Max’s dad saved Hans’s life once, and Hans feels like he owes it to him to
protect him</li>
    </ul>
  </li>
  <li>Liesel and Max become friends. Bond over books.
    <ul>
      <li>The whole family has to work together to keep the secret. War rages.</li>
    </ul>
  </li>
  <li>Nazis begin parading Jews through Molching as part of publicity efforts. Hans
tries to help one of the Jews, and gets whipped by Nazis. The house is no
longer safe, so Max must leave. Irony is that they never come check the house</li>
  <li>Hans gets sent to war. Rudy’s dad also gets sent to war for not allowing the
Nazis to take Rudy.</li>
  <li>Hans gets injured and gets sent home to recover</li>
  <li>Liesel anxiously thinks about whether or not Max got captured. In one parade
through Molching, she sees him :(. She ends up telling Rudy about Max</li>
  <li>One night, while Liesel is in the basement editing her book, her
neighborhood is bombed. Hans, Rosa, Rudy, and the rest of the neighbors are
killed. When rescue workers pull Liesel out of the rubble, she finds Rudy’s
corpse and gives him the kiss he always wanted. When the workers take her away,
she leaves behind her finished book, called “The Book Thief.” Death, who has
been watching, rescues the book. Liesel goes to live with the mayor and his
wife. After the liberation of the concentration camps, Max returns to Molching
and finds Liesel. They hug and cry together. Liesel eventually grows up and
moves to Australia, where she has a family and lives to an old age. When Death
finally comes to take her soul, he shows her the book she wrote so many years
before.</li>
</ul>

<h2 id="characters">Characters</h2>

<ul>
  <li>Liesel Meminger: main character, the book thief</li>
  <li>Death: narrator of the story</li>
  <li>Hans Hubermann: Liesel’s foster father. They are very close. He is kindhearted
and does not agree with the Nazis</li>
  <li>Rosa Hubermann: Liesel’s foster mother. She is tough on the outside but kind
on the inside.</li>
  <li>Max Vandenburg: Jew who hides in the Hubermannbasement for an extended time
during the war</li>
  <li>Rudy Steiner: Liesel’s best friend. Wants to be like Jesse Owens. Loves Liesel</li>
  <li>Frau Hermann: Mayor’s wife. Has been silent since her son died. Allows Liesel
to peruse her library.</li>
</ul>

<h2 id="themes">Themes</h2>

<ul>
  <li>war</li>
  <li>coming-of-age</li>
  <li>secrets</li>
  <li>literature</li>
  <li>duality of Nazi Germany (the good and the bad)</li>
</ul>

<h2 id="snippets">Snippets</h2>

<blockquote>
  <p>
  (Referring to Hans) Trust was accumulated quickly, due primarily to the brute
  strength of the man's gentleness, his _thereness_ (L484)
  </p>
</blockquote>

<blockquote>
  <p>
  Once, words had rendered Liesel useless, but now, when she sat on the floor,
  with the mayor’s wife at her husband’s desk, she felt an innate sense of
  power. It happened every time she deciphered a new word or pieced together a
  sentence. (L1908)
  </p>
</blockquote>

<blockquote>
  <p>
  Imagine smiling after a slap in the face. Then think of doing it twenty-four
  hours a day. That was the business of hiding a Jew. (L2569)
  </p>
</blockquote>

<blockquote>
  <p>
  There were the erased pages of Mein Kampf, gagging, suffocating under the
  paint as they turned. (L2757) [tiger: symbolic. bad words suffocating.]
  </p>
</blockquote>

<blockquote>
  <p>
  Where Hans Hubermann and Erik Vandenburg were ultimately united by music, Max
  and Liesel were held together by the quiet gathering of words. (L2847)
  </p>
</blockquote>

<blockquote>
  <p>
  When the war was over and Hitler had delivered himself to my arms, Alex
  Steiner resumed work in his tailor shop. There was no money in it, but he
  busied himself there for a few hours each day, and Liesel often accompanied
  him. They spent many days together, often walking to Dachau after its
  liberation, only to be denied by the Americans. (L6282)
  </p>
</blockquote>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/06/04/the-book-thief/</guid>
                <description>
                    
                    A German foster child named Liesel Meminger is The Book Thief. The story of her experience during the war. Maybe I'm just numbing to all of these WWII novels but I couldn't muster up as much relation to these characters as the ones in The Nightingale and Beneath a Scarlet Sky
                    
                </description>
                <pubDate>Tue, 04 Jun 2019 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Fast.ai Course Part 1: Practical Deep Learning for Coders</title>
                <link>http://tigerthinks.com/2019/05/19/fastai-part-1/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Most resources are on the course site</li>
  <li>Converted notes to flashcards: https://github.com/hiromis/notes</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/05/19/fastai-part-1/</guid>
                <description>
                    
                    Practical Deep Learning for Coders
                    
                </description>
                <pubDate>Sun, 19 May 2019 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>The Dream Machine</title>
                <link>http://tigerthinks.com/2019/05/07/the-dream-machine/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: How the modern computer came to be, courtesy of the visionary JCR
Licklider. Incredible. None of this was an accident.</p>

<h2 id="notes">Notes</h2>

<h3 id="prologue-tracys-dad">Prologue: Tracy’s Dad</h3>

<ul>
  <li>At dinner every night, Lick asks his kids: “What have you done today that was
altruistic, creative or educational?”</li>
</ul>

<h3 id="1-missouri-boys">1: Missouri boys</h3>

<ul>
  <li>Lick was quite the character</li>
  <li>Bringing psychology/acoustics background to computing set him apart from
others in the field
    <ul>
      <li>Deep appreciation for how humans can perceive, adapt, make choices, etc.</li>
    </ul>
  </li>
  <li>Studied psych at Wash U, Rochester, Swarthmore</li>
  <li>Worked at Smitty Stevens’ psycho-acoustics at Harvard during WWII</li>
  <li>“No one was a stranger to him”</li>
</ul>

<h3 id="2-the-last-transition">2: The last transition</h3>

<ul>
  <li>Claude Shannon writes “A Symbolic Analysis of Relay and Switching Circuits” in
1937, first use of relay circuits as logic gates which could <em>decide</em>
    <ul>
      <li>“A Symbolic Analysis of Relay and Switching Circuits” has just the kind of
cerebral exuberance you’d expect from a very bright twenty-one-year-old.
Shannon’s thesis is downright fun to read—and strangely compelling, given
what’s happened in the six decades since it was written.
        <ul>
          <li>Arguably most influential master’s thesis of the century, laying the
theoretical foundation for computer design</li>
          <li>Introduces the idea of <em>logic</em> via relays and switching circuits</li>
        </ul>
      </li>
      <li>At MIT</li>
      <li>Switching is a method to forward data packets coming in from the sender to the
receiver at the destination address. Circuit switching and packet switching
are the two most popular methods of switching. In circuit switching, data is
transferred on a dedicated channel that is to be established between the
sender and the receiver using a dedicated point-to-point connection. In packet
switching, data is split into small units called packets with each packet
being associated with a header containing signaling information about the
source and destination nodes. The packets are transmitted independently and
are processed at all intermediate nodes before reaching their destination. At
the destination, the data packets are extracted and reassembled to get the
original message.</li>
    </ul>
  </li>
  <li>Grace Hopper finds the first bug in the summer of 1945. A moth had gotten
crushed by a relay switch in the Mark II (IBM)</li>
  <li>von Neumann is the Einstein of mathematics: father of game theory, logic, and
more
    <ul>
      <li>Crazy memory: could recite the entire opening chapter of A Tale of Two
Cities</li>
    </ul>
  </li>
  <li>VN interesects with Turing</li>
  <li>1936: Turing publishes his paper on Turing machines
    <ul>
      <li>If a human mathematician can get there, a machine can get there. No matter
how clever its design, no machine can do more than Turing’s. Given enough
time and memory capacity, the lowliest handheld PC can do anything the
mightiest supercomputer on the planet can.</li>
    </ul>
  </li>
  <li>1943: Warren McCulloch and Walter Pitts come up with the neural network model
at University of Chicago: model the brain as a big circuit made of neurons,
each neuron receives input from other neurons, if total stimulation passes a
threshold, neuron will “fire”</li>
  <li>VN starts sketching his architecture and is influenced by McCulloch and Pitts
    <ul>
      <li>Uses their notation</li>
      <li>Five functions: input units, output units, CPU, memory, ALU</li>
      <li><strong>Von Neumann architecture is a concrete implementation of a Turing
machine</strong></li>
      <li>Simplest scheme possible: fetch, execute, return.</li>
    </ul>
  </li>
  <li>EDVAC/ENIAC in 1947 introduce the concept of the stored program. Just treat
propgram instructions as another type of data. Separate problem-solving from
hardware
    <ul>
      <li>SOFTWARE</li>
    </ul>
  </li>
</ul>

<h3 id="3-new-kinds-of-people">3: New kinds of people</h3>

<ul>
  <li>Vannevar Bush introduces the Memex
    <ul>
      <li>“Memory index”</li>
      <li>Hypothetical proto-hypertext system
        <ul>
          <li>Users copy and exchange trails of data</li>
        </ul>
      </li>
      <li>Also hires Claude Shannon to maintain the Differential Analyzer which sparks the
following
        <ul>
          <li>This thing solves differential equations</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Claude Shannon has a fundamental theory of communication
    <ul>
      <li>Information source: thing generating message (person, computer)</li>
      <li>Transmitter: changes message into signal (voice-&gt;sound wave, telephone-&gt;
electric signal, etc.)</li>
      <li>Channel: medium conducting signal (air, telephone wire, etc.)</li>
      <li>Receiver: instrument that take signal and tries to reconstruct message (ear,
other telephone, etc.)</li>
      <li>Destination: thing the message is intended for</li>
    </ul>
  </li>
  <li>Norbert Wiener: first “skeptic” of new computer technology. Cautious optimist
    <ul>
      <li>“The first indsutrial revolution, the revolution of the dark, satanic mills,
was the devaluation of the human arm by the comptetition of machinery. The
moderd industrial revolution is similarly bound to devalue the human brain,
at least in its simpler and more routine decisions.”</li>
      <li>Vision of information age: it tied together communication, computation, and
control</li>
      <li>This is “cybernetics”: study of control and communication in the animal and
machine</li>
    </ul>
  </li>
</ul>

<h3 id="4-the-freedom-to-make-mistakes">4: The freedom to make mistakes</h3>

<ul>
  <li>1950: MIT physicist George Valley committee to upgrade Pentagon air defense
strategy
    <ul>
      <li>Two recommendations: sub-contract to a technical organization. Use digital
computers to cordinate surveillance, target tracking</li>
    </ul>
  </li>
  <li>Project Lincoln’s goal of understanding how machines and humans could work
together as a system was just an extension of Lick’s own inner quest:
understanding how the human brain itself worked as a system.
    <ul>
      <li>Got the best psychology students in the country</li>
    </ul>
  </li>
  <li>Indeed, Lick was already honing the leadership style that he would use to such
effect a decade later with the nationwide computer community. Call it rigorous
laissez-faire. On the one hand, like his mentor Smitty Stevens, Lick expected
his students to work very, very hard; he had nothing but contempt for laziness
and no time to waste on sloppy work or sloppy thinking. Moreover, he insisted
that his students master the tools of their craft, whether they be experimental
technique or mathematical analysis. On the other hand, Lick almost never told
his students what to do in the lab, figuring that it was far better to let them
make their own mistakes and find their own way. And imagination, of course, was
always welcome; the point here was to have fun.</li>
  <li>Lincoln Lab + IBM collaborate on SAGE, the Semi-Automated Ground Environment,
in 1954
    <ul>
      <li>Enormous impact on the history of computing
        <ul>
          <li>Brought brightest computer minds to MIT</li>
          <li>Billions of $$$ of Pentagon money helped IBM become the biggest computer
manufacturer in the world</li>
          <li>Brought real-time computing to the business world</li>
          <li>Planted the seed of the idea that computers and humans could work together
and be more effective than working separately</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Turing writes “Computing Machinery and Intelligence” in 1950
    <ul>
      <li>Thinking machines: what does it mean to be a machine, and what does it mean
to think?</li>
      <li>Turing test: if a computer is indistinguishable from a human via chat
interface, it is thinking</li>
      <li>Accused of being gay, put on estrogen treatment, commits suicide in 1954</li>
    </ul>
  </li>
  <li>von Neumann gets bone cancer and dies in 1957 :/
    <ul>
      <li>Surrounded by 4 members of the cabinet and all military chiefs of staff at
time of death because he was so important to the country’s nuclear weapons
program</li>
    </ul>
  </li>
  <li>George Miller is a psychologist who worked with Lick
    <ul>
      <li>Disagreement with the behaviorist movement. Behaviorists say that any
internal states are inaccessible to outside observers, so the only way for
organisms to be understood is by cataloging observable inputs and outputs</li>
      <li>Miller focuses on cognitive processes. Starts the field of cognitive
psychology with Noam Chomsky, and this replaces behaviorism. Invented the
term “chunk” to apply to units of things you can remember</li>
    </ul>
  </li>
  <li>Chomsky attacks behaviorism using language: how can you avoid talking about
mental states when the whole point of language is to communicate things like
ideas, images, feelings?
    <ul>
      <li>Language has almost infinite combinations of expression</li>
      <li>There is a structure to sentences, which behaviorists cannot account for</li>
      <li>The pinnacle of all possible mathematical machines – the Turing machine –
is also the baseline, the minimum for human cognition. This is part of a
hierarchy</li>
    </ul>
  </li>
  <li>Allen Newell and Herbert Simon work on the Logic Theorist in 1955
    <ul>
      <li>Solve mathematical proofs</li>
      <li>Have to use heuristics because there is a combinatorial explosion of
possibilities
        <ul>
          <li><em>The unique power of heuristic reasoning lies in its ability to cope with
the complex and the unexpected, to make acceptable choices when there
isn’t enough time to make the ideal choice, to hunker down and keep on
going when a precisely defined algorithm would be overwhelmed by the
combinatorial explosion. In effect, heuristic reasoning is what allows us
to go through life in a chronic state of controlled panic.</em> (L3380)</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Trace the progression of ideas:
    <ul>
      <li>mid-40’s: after cybernetics, we understand that a computer can have memory
through the mechanism of feedback</li>
      <li>After McCulloch and Pitts, we can understand that the brain uses neuron
activations to process information</li>
      <li>After Chomsky and Newell and Simon and Miller, we know that reasoning can
come from information processing through heuristics. This is the birth of
cognitive science
        <ul>
          <li>“Logic Theorist was a demonstration that you could have artifacts that
would behave intelligently. Even if you didn’t believe the further
assumption that the way the computer did it was the same way we do it,
this in itself was enough to free the psychological imagination. If you
talk about the computer’s having a memory, then certainly the
behavioristic ban on concepts like memory was no longer necessary. And if
a computer could be prepared to anticipate any one of n alternatives, then
certainly the ban on expectations was no longer valid.” - Miller</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Wesley Clark working on a computer called the TX-2 at MIT in 1957. Invites
Lick to check it out</li>
</ul>

<h3 id="5-the-tale-of-the-fig-tree-and-the-wasp">5: The tale of the fig tree and the wasp</h3>

<ul>
  <li>TX-2 group realizes in 1955 that if computers are going to ever go mainstream,
must replace vacuum tubes with transistors. Smaller, faster, cheaper. Vacuum
tubes are too large and gave off a ton of heat and were unreliable
    <ul>
      <li>Transistors were new</li>
      <li>Clark sketches TX-0</li>
      <li>Ken Olsen raises money to take transistor computers mainstream and starts
Digital Equipment Corporation (DEC)</li>
    </ul>
  </li>
  <li>Working with the TX-2 sparks idea for Lick
    <ul>
      <li>So, Lick wondered, what would happen if you put humans and computers
together as a system? What would happen if you let the machines take over
all those dreary, algorithmic chores they were so good at? How much of your
time would be opened up for real creativity?
        <ul>
          <li>Empirically, he spent 85% of his “creative” time on clerical work
            <ul>
              <li>Could this be turned into some sort of symbiosis?</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>In 1956 Lick is persuaded to join a firm called BBN (Bolt Beranek and Newman)
as the director of psychoacoustics and engineering lab
    <ul>
      <li>He is given a lot of autonomy and set about building a dream team</li>
      <li>“Lick collected people,” says his former student Tom Marill, who was struck
by the way his mentor always tried to bring his favorites along as he moved
from place to place. “He was very bright, he was very articulate, and
because of that he was able to get very good people. They liked being
collected.”</li>
      <li>He buys a new IBM card machine to learn how to program</li>
    </ul>
  </li>
  <li>The IBM computer is woefully insufficient. Around the same time, DEC releases
their first computer
    <ul>
      <li>It’s the PDP-1 (Programmed Data Processor) and BBN got the first one</li>
      <li>Finally a serious cmoputer. 2x the price, 1000x the performance of the IBM
LGP-30
        <ul>
          <li>“There had never before been a machine that was this much in front of the
competition. And never since. It was a singular event.” (Ed Fredkin)</li>
        </ul>
      </li>
      <li>Lick uses this computer to write educational software for his children</li>
    </ul>
  </li>
  <li>John McCarthy joined BBN
    <ul>
      <li>Never impressed by much :)</li>
      <li>Invented the field of AI
        <ul>
          <li>1956 6-week conference: “Dartmouth Summer Research Project on Artificial
Intelligence”</li>
          <li>Thought the Logic Theorist was sloppy. Wanted to build an Advice Taker
that draws from a database of propositions etc.</li>
        </ul>
      </li>
      <li>Invented Lisp, interactive symbol-processing programming language
        <ul>
          <li>Static resource allocation wouldn’t work for AI because it is so dynamic</li>
          <li>Lisp = List Processor
            <ul>
              <li>Functional programming. Most powerful and compelling feature</li>
              <li>Introduced the idea of an interpreter</li>
              <li>Allowed for composition of complex programs</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>Invented time-sharing
        <ul>
          <li>Idea “just popped in his head”. Seemed obvious to him.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Lick writes a paper called “Man-Computer Symbiosis” in 1960
    <ul>
      <li>Incredible paper. Laid out the entire vision for US computer research</li>
      <li>“The fig tree is pollinated only by the insect Blastophaga grossorum [the
fig wasp]. The larva of the insect lives in the ovary of the fig tree, and
there it gets its food. The tree and the insect are thus heavily
interdependent: the tree cannot reproduce without the insect; the insect
cannot eat without the tree; together, they constitute not only a viable
but a productive and thriving partnership. This cooperative ‘living
together in intimate association, or even close union, of two dissimilar
organisms’ is called symbiosis. … The purposes of this paper are to
present the concept [of] and, hopefully, to foster the development of
man-computer symbioses.”</li>
      <li>A relationship like having a colleague who can help you think when problems
get hard</li>
      <li>Knew way too much about the brain to be an optimist about AI. Pretty
ambivalent.</li>
      <li>Viewed programming as a profound activity. Solving programming problems can
hint at the nature of intellectual processes</li>
    </ul>
  </li>
  <li>Loved the idea of a model: “any convenient simulation of reality”
    <ul>
      <li>Ok so let’s dive into MODELS</li>
      <li>“Ordinary mathematical models are static models. They are representations in
symbols, usually written in pencil or ink on paper. They do not behave in
any way. They do not ‘solve themselves.’ For any transformation to be made,
for any solution to be achieved, information contained in the model must be
read out of the static form and processed in some active processor, such as
a mathematician’s brain or a computing machine. A dynamic model, on the
other hand, exists in its static form only while it is inactive. The dynamic
model can be set into action, by one means or another, and when it is
active, it does exhibit behavior and does ‘solve itself.’” The Curtiss Robin
was a dynamic model in this sense, he explained: once the fan was turned on,
it flew. It was active. The same was true of the analog electronic
simulations he had once experimented with at the MIT acoustics lab.</li>
      <li>In richness, plasticity, facility, and economy, the mental model has no
peer.” Included among those mental models are images recalled from memory,
expectations about the probable course of events, fantasies of what might
be, perceptions of other people’s motives, unspoken assumptions about human
nature, hopes, dreams, fears, paradigms—essentially all conscious thought.
Of course, Lick and Taylor would continue, “[the mental model] has
shortcomings. It will not stand still for careful study. It cannot be made
to repeat a run. No one knows just how it works. It serves its owner’s hopes
more faithfully than it serves reason. It has access only to the information
stored in one man’s head. It can be observed and manipulated only by one
person.” But if you could join mental models to computer models, Lick
reasoned, and if you could get the two of them into just the right kind of
symbiotic relationship, then you could overcome every one of those
limitations.
        <ul>
          <li>Addresses complexity limitation by being able to handle huge amounts of
data and represent knowledge as programs</li>
          <li>Addresses the limitation of confinement of knowledge to a single head by
allowing data to be displayed on many screens and viewed by many people</li>
          <li>In addition, Lick wrote, this computerized system system would be of
enormous help in meeting the challenge of “ordered information”: finding
and applying the relevant research results, utilizing the expertise of
outside consultants, coordinating the efforts of design engineers,
analyzing a flood of test data, scheduling routine maintenance, planning
for continual evolution and growth—and on and on.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>By the beginning of the 1960s, then, a decade and a half before the
microcomputer revolution began in the garages of Silicon Valley, and a full
thirty years before the dawn of the Internet Age, the air around Cambridge was
already alive with the essential ideas:
    <ul>
      <li>graphics-rich personal workstations and the notion of human-computer symbiosis</li>
      <li>time-sharing and the notion of computer-aided collaborative work</li>
      <li>networks and the notion of an on-line community</li>
      <li>on-line libraries and the notion of instant, universal access to knowledge</li>
      <li>computer languages and the notion of a new, digital medium of expression.</li>
    </ul>
  </li>
  <li>MIT Model Railroad Club become the first “hackers” in Spring 1959 after
participating in McCarthy’s first-ever programming class
    <ul>
      <li>“hack” comes from MIT slang for a practical joke</li>
      <li>Wrote little software like number converters, audio playing, etc.</li>
    </ul>
  </li>
</ul>

<h3 id="6-the-phenomena-surrounding-computers">6: The phenomena surrounding computers</h3>

<ul>
  <li>Eisenhower consolidates all space research under ARPA in 1957 (Advanced
Research Projects Agency)
    <ul>
      <li>In 1962 Lick becomes director, one year leave of absence from BBN. Came with
System Development Corporation contract ($6M), so his budget was $10M. Moves to
Washington</li>
    </ul>
  </li>
  <li>Didn’t like the SDC batch processing approach, needed them to buy into time
sharing
    <ul>
      <li>Brought MIT folks to Santa Monica in November and convinced them time
sharing was better</li>
    </ul>
  </li>
  <li>Starts assembling the TEAM
    <ul>
      <li>Traveled around everywhere trying to get talent together from universities</li>
      <li>Wanted proposals for computer research. Carnegie, RAND, Stanford, Berkeley</li>
      <li>One proposal that ended up on his desk was from Douglas Engelbart
        <ul>
          <li>FLASH-1: The difficulty of mankind’s problems was increasing at a greater
rate than our ability to cope. (We are in trouble.)</li>
          <li>FLASH-2: Boosting mankind’s ability to deal with complex, urgent problems
would be an attractive candidate as an arena in which a young person might
try to “make the most difference.” (Yes, but there’s that question of what
does the young electrical engineer do about it? Retread for a role as
educator, research psychologist, legislator… ? Is there any handle there
that an electrical engineer could … ?)</li>
          <li>FLASH-3: Aha—graphic vision surges forth of me sitting at a large CRT
console, working in ways that are rapidly evolving in front of my eyes
(beginning from memories of the radar-screen consoles I used to service).</li>
          <li>Within a few days, he said, the imagery of FLASH-3 had evolved into a vision
of a general-purpose, computer-powered information environment. It would
include documents mixing text and graphics on the same CRT display. It would
include whole new systems of symbols and methodologies to help users do
their heavy thinking. And it would include network-assisted collaborations
to allow people to work together in ways that would be more effective than
anything anyone had ever seen before. Within a few weeks he had committed
his career to this vision, which he now called “augmenting the human
intellect.”</li>
          <li>Spoke about phases of human evolution:
            <ul>
              <li>Concept manipulation: non-verbal mental concepts</li>
              <li>Symbol manipulation: words and numbers</li>
              <li>Manual external symbol manipulation: graphic representations of concepts</li>
              <li>Computers introduce <em>automated external symbol manipulation</em>: computers
can run programs on their own</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Bob Fano, Minsky, and McCarthy need a proposal to get money from ARPA to MIT. They
come up with Project MAC for Multiple-Access Computer
    <ul>
      <li>This was a time-shared information utility</li>
    </ul>
  </li>
  <li>Needed to do it in 6 months. And without any ARPA funding yet
    <ul>
      <li>Corbato, Dennis, Greenberger, Minsky, Ross, Selfridgbe, Teager</li>
    </ul>
  </li>
  <li>Galactic network in April 1963
    <ul>
      <li>Lick dictated to his Principal Investigators (Fano, McCarthy, Uncapher,
Engelbart, Feigenbaum, Perlis) that they would have to join up with Arpanet
        <ul>
          <li>In short, he said, the various ARPA-funded sites would have to take all
their time-sharing computers, once they became operational, and link them
into a national system. “If such a network as I envisage nebulously could
be brought into operation,” Lick wrote, “we would have at least four large
computers, perhaps six or eight small computers, and a great assortment of
disc files and magnetic tape units—not to mention the remote consoles and
Teletype stations—all churning away.”</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>MIT time-sharing becomes a huge success because people begin sharing programs
with each other
    <ul>
      <li>Tom Van Vleck writes the MAIL command</li>
      <li>Now, however, time-sharing had made exchanging software trivial: you just
stored one copy in the public repository and thereby effectively gave it to
the world. “Immediately,” says Fano, “people began to document their
programs and to think of them as being usable by others. They started to
build on each other’s work.”</li>
    </ul>
  </li>
  <li>Lick decides to stay at ARPA
    <ul>
      <li>with rare exceptions—notably that first encounter with SDC—Lick was much
more interested in being a mentor than in being a micromanager. As long as
people made reasonable progress in the right direction, he would let them
find their own way.</li>
      <li>Things keep humming. He funds Newell, Simon, Perlis at Carnegie</li>
    </ul>
  </li>
  <li>Mouse invented at Stanford Research Institute
    <ul>
      <li>They were working on interactive computing</li>
      <li>Needed a screen selection device</li>
      <li>Finally, as they were all sitting around brainstorming one day, Engelbart
came up with the idea of a little gadget that the user could roll around on
the desktop with one hand while the cursor tracked its motion on the screen.
Since it didn’t seem any sillier than some of the other things they had
tried, Bill English went off to the SRI machine shop and made one. It was
essentially just a block of wood about the size of a pack of cigarettes,
with some rollers set into the bottom and a wire coming out the front end to
communicate the motion of the rollers to the computer. Engelbart wasn’t
totally satisfied with this contraption, either. And yet when the NLS team
hooked up all the selection devices to their computer and gave users a
choice, they discovered that people were consistently choosing the little
gadget. The preference was so strong, in fact, that they eventually
abandoned everything else; the gadget had become their standard. And by that
time, of course—though no one on the SRI team can now remember when, or how,
or why it started—they had all taken to calling the thing a mouse. It was
more of a joke than a name, really. They would surely find a more dignified
term in time. But until then, well, it just seemed to fit.</li>
    </ul>
  </li>
  <li>Around here, Lick sends out Intergalactic Network memo. This was the precursor
to Arpanet, which was the precursor to the internet.
    <ul>
      <li>In short, he said, the various ARPA-funded sites would have to take all
their time-sharing computers, once they became operational, and link them
into a national system. “If such a network as I envisage nebulously could be
brought into operation,” Lick wrote, “we would have at least four large
computers, perhaps six or eight small computers, and a great assortment of
disc files and magnetic tape units—not to mention the remote consoles and
Teletype stations—all churning away.” Lick went on to discuss many examples
of how people might use such a system, as well as the technical challenges
of bringing it into being. At one point he even described something
strikingly similar to the migratory Java applets that would appear at the
turn of the millennium: “With a sophisticated network-control system, I
would not [have to] decide whether to send the data and have them worked on
by programs somewhere else, or bring in programs and have them work on my
data.” The computer could make such decisions automatically, he said—meaning
that software could float free of individual machines. Programs and data
would actually live on the net. And so it went for seven pages, in what was
arguably the most significant document that Lick would ever write. It’s true
that his proposal was just an elaboration on the network of “thinking
centers” he had envisioned in his 1960 “Symbiosis” paper—enriched, perhaps,
by the more recent speculations around MIT about citywide information
utilities. But in just a few years, this memorandum to the Intergalactic
Network would become the direct inspiration for the Arpanet, which would
eventually evolve into today’s Internet.</li>
    </ul>
  </li>
  <li>Meanwhile, things humming along at Project MAC
    <ul>
      <li>Working on an operating system called Multics
        <ul>
          <li>Could run without interruption, multi-processor</li>
          <li>In the meantime, System/360 by IBM is a batch-processing disaster
            <ul>
              <li>So IBM commissions a time-sharing approach. They hire Lick</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>“When you look at Lick’s legacy, two very distinct things stand out,” says Bob
Fano. “One is that he was a very imaginative, creative psychoacoustics man.
Second, says Fano, when Lick was presented with a miraculous,
never-to-be-repeated opportunity to turn his vision into reality, he had the
guts to go for it, and the skills to make it work.
    <ul>
      <li>Lick: It was more than just a collection of bright people. It was a thing
that organized itself into a community, so that there was some competition
and some cooperation, and it resulted in the emergence of a field.”</li>
    </ul>
  </li>
</ul>

<h3 id="7-the-intergalactic-network">7: The intergalactic network</h3>

<ul>
  <li>Bob Taylor is Lick’s biggest fan. Works for NASA. Helps Lick a lot when Lick
is at ARPA</li>
  <li>In 1965, Taylor proposes linking all 16 IPTO contractors together in one
network
    <ul>
      <li>Timing is right because they are just starting to become operational</li>
      <li>Obviously some pushback</li>
      <li>Taylor was willing to let Roberts and the rest of the world believe anything
they wanted—so long as the network got built.</li>
    </ul>
  </li>
  <li>ARPA would make a series of massive long-distance calls and just never hang
up. More precisely, the agency would go to AT&amp;T and lease a series of
high-capacity phone lines linking one ARPA site to the next. A diagram of the
resulting network would thus look something like a road map of the interstate
highway system,</li>
  <li>The farther a message traveled, the greater the chances that one or more bits
would be garbled by static and distortion on the line. And in the digital
world, one erroneous bit might easily spell disaster. Thus the digital
postcards, or “packets,” in modern parlance.</li>
  <li>So in sum, said Roberts, that was the plan: full-time access, messages divided
into packets, and distributed control. Now, who wanted to help?</li>
  <li>How to route stuff?
    <ul>
      <li>Wes Clark: routing computers are responsible for moving stuff
        <ul>
          <li>IMPs: Interface Messaging Processors</li>
          <li>Simplify life for everybody. ARPA could take responsibility for designing
and implementing the network proper—meaning the information highways and
the digital interchanges—without having to worry that some contractor
somewhere would mess up his site’s programming and thereby bollix up the
whole system. And the contractors, for their part, could focus on one
comparatively simple task—establishing a link from their central computer
to the routing computer—without having to worry about all the ins and outs
of all the other computers on the network.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>The first RFC comes from SRI/Utah/UCLA/Santa Barbara meetings in ‘69. They were the
first 4 members of Arpanet.</li>
  <li>Around same time (1968) Engelbart gives the first demo of interactive
computing at the Fall Joint Computer Conference in SF</li>
  <li>BBN wins the right to build Arpanet</li>
  <li>J. C. R. Licklider again and again took jobs that required him to be an
administrator—and then was almost contemptuous of the skills it took to do
those jobs right.
    <ul>
      <li>Made Project MAC almost go off the rails</li>
    </ul>
  </li>
  <li>Multics comes out in 1970
    <ul>
      <li>Witness the fact that the Association for Computing Machinery would award
Corbató its 1991 Turing Award, computerdom’s most prestigious honor. For all
its complexity and delay, Multics gave living proof that a grown-up
operating system was possible—that sophisticated memory management, a
hierarchical file system, careful attention to security, and all the rest
could be integrated into a single, coherent whole. In that sense, Multics
was a prototype for virtually all the operating systems to follow.</li>
    </ul>
  </li>
  <li>Ken Thompson and Dennis Ritchie launch Unix in mid-1970s from Bell Labs</li>
  <li>In 1972 Arpanet is released to the world at large at ICCC, International
Conference on Computers and Communications, in Washington</li>
  <li>A BBN engineer named Ray Tomlinson adds email as an add-on to Arpanet and it
takes off</li>
  <li>There are tons of ways Arpanet could have failed, but it didn’t
    <ul>
      <li>ARPA directorship style: progress, not progress reports</li>
      <li>Larry Roberts starts the Network Working Group
        <ul>
          <li>Most democractic forum!!</li>
          <li>These young researchers who built hardware, debugged software, got hands
dirty, made the whole thing happen</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>People start leaving ARPA for Xerox PARC (Palo Alto Research Center)
    <ul>
      <li>They join Bob Taylor there</li>
    </ul>
  </li>
</ul>

<h3 id="8-living-in-the-future">8: Living in the future</h3>

<ul>
  <li>George Pake hires Taylor to run the lab</li>
  <li>Taylor’s motto was “Never hire ‘good’ people, because ten good people together
can’t do what a single great one can do.”
    <ul>
      <li>“Taylor is very good at getting … a collection of extremely intelligent
and opinionated egomaniacs to work together reasonably well without fighting
each other,” he noted. “Damned if I know how! I can’t do it, but he does.”2</li>
      <li>All of the various gadgets had to be part of that system. And to achieve
that goal, Taylor knew, he somehow had to get all these maverick geniuses
moving in the same direction, without forcing everyone to move in lockstep.
Somehow he had to give them a sense of purpose and group cohesion, without
crushing spontaneity and individual initiative. Somehow, in short, he had to
set things up so they would freely follow their own instincts—and end up
organizing themselves. This is arguably the fundamental dilemma of modern
management, not to mention the fundamental political challenge in any
democracy; leaders have been grappling with it for centuries.</li>
      <li>And when the arguments got heated, which they often did, the minister’s son
would do his best to convert a “class-one” disagreement—one in which the
combatants were simply yelling at each other—into a “class two”
disagreement, in which each side could explain the other side’s position to
the other side’s satisfaction. You don’t have to believe the other guy, he
would tell them. You just have to give a fair account of what he’s saying.
And it worked.
        <ul>
          <li>LOVE THIS!!</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Bill English. Alan Kay
    <ul>
      <li>Kay was a very insubordinate person</li>
      <li>Had the idea to include procedure for unpackaging data <em>with the data
itself</em></li>
      <li>Object-oriented programming!! From a system called Simula where everything
was described in nouns and verbs
        <ul>
          <li>“For the first time,” he recalled, “I thought of the whole as the entire
computer and wondered why anyone would want to divide it up into weaker
things called data structures and procedures. Why not divide it up into
little computers, as time-sharing was starting to? But not in dozens. Why
not thousands of them, each simulating a useful structure?”</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Kay: Dynabook</li>
  <li>Cerf and Kahn: TCP/IP</li>
</ul>

<h3 id="9-licks-kids">9: Lick’s kids</h3>

<ul>
  <li>Back in his natural habitat of Tech Square, meanwhile, he had reverted to
being Lick at his best: not functioning as a manager and paper pusher, a role
in which he was a disaster, but serving as visionary, teacher, mentor, and
friend. Around the late 70’s</li>
  <li>In the mid 70’s, the “whitecoats” start to get overrun by the hobbyists
    <ul>
      <li>Hardware: could buy cheap, less-powerful computers and run them all the time
(PDP-8, PDP-11, etc.)</li>
      <li>Software: Unix!! Built with hacking in mind
        <ul>
          <li>A response to the complexity of Multics</li>
          <li>Sweet, quick, and clean</li>
          <li>Then they released C as well, and all of a sudden, tons of people could
program</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Then began the Usenet migration
    <ul>
      <li>Started having user groups</li>
      <li>“Life will be happier for the on-line individual because the people with
whom one interacts most strongly will be selected more by commonality of
interests and goals than by accidents of proximity.” - Taylor and Licklider,
1968</li>
    </ul>
  </li>
  <li>They were the spiritual brothers of the MIT hackers and the freewheeling Unix
mavens. They were the people who had been ham-radio operators and/or stereo
buffs since they were teenagers, often using equipment they had built
themselves from mail-order kits, or from scratch. They were the guys who had
gotten intrigued by the minicomputers they’d encountered at work or at school.
And for no “logical” reason whatsoever—certainly none that they could explain
to their spouses—they were the people who wanted computers of their own at
home, to play with, to experiment with, to experience. Enter the Altair.
    <ul>
      <li>Altair was the first commercially successful microcomputer
        <ul>
          <li>Received over 10k orders, expecting only a few hundred</li>
          <li>Bill Gates and Paul Allen write Altair BASIC</li>
        </ul>
      </li>
      <li>Eventually the founder, H. Edward Roberts, sold out to a big hardware
company because he was so exasperated with the “soap opera”. He became a
doctor</li>
    </ul>
  </li>
  <li>Apple Computer Company was next in line
    <ul>
      <li>Founded by Homebrew Computer Club members</li>
      <li>Apple II had a ton of commercial success</li>
      <li>On the software side, Microsoft releases MS-DOS operating system</li>
      <li>Microcomputer revolution goes huge into the 80s</li>
    </ul>
  </li>
  <li>So there it was: the “personal” part of the personal-distributed-computing
paradigm was diffusing outward in the form of workstations, while the
“distributed” part was doing the same in the form of Ethernet.
    <ul>
      <li>Ethernet standard is an agreement licensed to Intel and Xerox. Initially
proposed by Gordon Bell at DEC</li>
    </ul>
  </li>
  <li>That left the Smalltalk graphical user interface, together with all the other
Alto software—the embodiment of computing as a medium of expression and
exploration. But this idea was making its way into the world, too, thanks to a
fateful show-and-tell at the very end of the 1970s.
    <ul>
      <li>Steve Jobs’s visit to PARC has become something of a mythology
        <ul>
          <li>When Jobs and his top engineers finally showed up for an afternoon visit
in December 1979, the presentation was as minimal as Goldberg could make
it. She and her Smalltalk colleagues gave Jobs and company the standard
visitor’s tour: the Alto, the mouse, Bravo word processing, some drawing
programs—nothing that the whole world hadn’t seen before. And afterward
their guests departed, apparently satisfied. Two days later, having
realized almost at once that they’d been shortchanged, Jobs and his crew
showed up in the PARC lobby with no advance warning. They wanted to see
the good stuff, they said—now. There ensued several hours of argument
between the Smalltalk team and its bosses. But in the end, after a direct
order, with Xerox headquarters’ backing up XDC, a red-faced Goldberg did
indeed show Jobs and his people the good stuff. This included education
applications written by Goldberg herself, programming tools created by
Larry Tesler, and animation tools cooked up by Diana Merry for combining
pictures and text in a single document—all of it increasingly irksome.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>And that was the essential tragedy, he says: whereas headquarters understood
marketing but not computers, the wizards out on Coyote Hill Road understood
computers but not marketing. They had gone into the design process believing
fervently in the PARC vision, in personal distributed computing as a whole,
integrated system. They knew that it far transcended anything else on the
market. And they couldn’t imagine that customers would want anything less.
They’d also been given to understand that cost was no constraint: their target
was the corporate world, the Fortune 500—scale customers that were used to
shelling out hundreds of thousands of dollars for computer equipment. The
result was an unfettered exuberance that led the Star’s designers into at
least three critical errors. The first and most obvious was a rampant case of
feature-itis: they loaded up the Star software with every neat thing they
could think of, until it had grown to roughly a million lines of code and was
at the ragged edge of what the 1981-vintage hardware could support. Indeed,
that was the first thing users noticed: the Star was painfully, maddeningly
sloooow.
    <ul>
      <li>Also: made it a closed system
        <ul>
          <li>All software and hardware had to come from Xerox</li>
          <li>Had to guess what customers wanted instead of tapping into wider
community. No spreadsheet program on the STAR. Nobody at PARC ever thought
to write one because nobody in a research lab ever needed one. Inverse of
priorities of the business world</li>
          <li>No inexpensive, low-risk entry path for customers. Minimal installation
cost $100,000. Apple II was $1500</li>
        </ul>
      </li>
      <li>Passed up tons of chances to make something simpler</li>
    </ul>
  </li>
  <li>Back in the 1970s, it seems, computer users in corporate America had been
facing much the same frustration faced by researchers such as Steve Wolff: the
“whitecoats,” or management information service (MIS) departments, dictated
the terms. Big companies relied on mainframes, a few minis here and there,
and, for “desktop” applications, lots of dedicated word-processing machines
from vendors such as Wang and IBM. You played by the MIS rules or not at all.
Ah, but then the micros came along, the high-tech embodiment of individual
autonomy, hands-on control, and freedom—not to mention the source of a
spreadsheet application, VisiCalc, that you couldn’t get any other way.
Naturally, the MIS types tried to outlaw the things. But it was hopeless; the
micros were cheap enough that a manager with any imagination could easily hide
them in the petty-cash budget. Within a very few years, the steady trickle of
surreptitious Apple IIs had become a flood of IBM PCs, PC clones, and Macs,
and the MIS departments had effectively given up. In fairness, they did have a
legitimate gripe. With the flood of micros had come a flood of new software,
some of it very good—WordPerfect, dBase, and Lotus 1–2–3, for example—but much
of it flaky and bug-ridden, and all of it incompatible with most companies
existing applications. Too often, the resulting chaos wasted more of a
company’s time than it saved. But there was no way to keep personal computers
out of the office, especially not when more and more employees were using them
at home. So instead the MIS managers bowed to the inevitable and started
linking the various PCs together into local-area networks, which let them at
least get some of the data moved onto a central server where they could be
shared. 3Com had helped jump-start the process in 1982 by being among the
first to offer an Ethernet card for the new IBM PC. And the company had
prospered accordingly throughout the 1980s and 1990s, as the office norm
increasingly came to resemble what Bob Taylor and his crew had first imagined
two decades earlier: individual computers, Ethernet networking, digital
printing, WYSIWYG text editing and graphics programs, a windowing
interface—personal distributed computing in full.</li>
  <li>In 1983, physicist and integrated circuit specialist William J. Spencer became
director of PARC. Spencer and Taylor disagreed about budget allocations for
CSL (exemplified by the ongoing institutional divide between computer science
and physics) and CSL’s frustration with Xerox’s inability to recognize and use
what they had developed. By the end of the year, Taylor and most of the
researchers at CSL left Xerox. A coterie of leading computer scientists
(including Licklider, Donald Knuth and Dana Scott) expressed their displeasure
with Xerox’s decision not to retain Taylor in a letter-writing campaign to CEO
David Kearns.</li>
  <li>In retrospect, of course, Berners-Lee’s combination of hypertext and browsing
would prove to be one of those brilliantly simple ideas that change
everything. By giving users something to see, it set off a subtle but powerful
shift in the psychology of the Internet. No longer would it be just an
abstract communication channel, like the telephone or the TV; instead, it
would become a place, an almost tangible reality that you could enter into,
explore, and even share with the other people you found there. It would become
the agora, the electronic commons, the information infrastructure, cyberspace.
Because of Berners-Lee’s hypertext browsing, users would finally begin to get
it about the Internet. And they would want more. …
    <ul>
      <li>1990: Release of the World Wide Web. Following trend of streamlining
networks etc.</li>
    </ul>
  </li>
  <li>An integrated, open, universally accessible Multinet wouldn’t just happen on
its own, he pointed out. It would require cooperation and effort on a time
scale of decades, “a long, hard process of deliberate study, experiment,
analysis, and development.” That process, in turn, could be sustained only by
the forging of a collective vision, some rough consensus on the part of
thousands or maybe even millions of people that an open electronic commons was
worth having. And that, wrote Lick, would require leadership. Good luck. The
pessimistic scenario, in contrast, would require nothing more than laissez
faire</li>
  <li>Technology isn’t destiny, no matter how inexorable its evolution may seem; the
way its capabilities are used is as much a matter of cultural choice and
historical accident as politics is, or fashion. And in the early 1960s history
still seemed to be on the side of batch processing, centralization, and
regimentation.
    <ul>
      <li>Licklider’s generous funding to paradigms like time-sharing, packet
switching, TCP/IP, led to technology as we know it today</li>
    </ul>
  </li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/05/07/the-dream-machine/</guid>
                <description>
                    
                    How the modern computer came to be, courtesy of the visionary JCR Licklider. Incredible. None of this was an accident.
                    
                </description>
                <pubDate>Tue, 07 May 2019 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Breakfast of Champions</title>
                <link>http://tigerthinks.com/2019/05/06/breakfast-of-champions/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: My first Vonnegut book. Definitely a ride. Not sure I ‘got’ everything
I was supposed to.</p>

<h2 id="plot">Plot</h2>

<p>One of Kurt Vonnegut’s  most beloved characters, the aging writer Kilgore Trout,
finds to his horror that a Midwest car dealer named Dwayne Hoover is taking his
fiction as truth.</p>

<ul>
  <li>Trout is invited to speak at a festival in Midland City, where Dwayne lives</li>
  <li>Dwayne is becoming more and more mentally unstable</li>
  <li>Dwayne reads a novel of Trout’s that explains to Dwayne that he is the only
thing in the universe with true free will</li>
  <li>Dwayne becomes unhinged and beats up a ton of people</li>
  <li>Vonnegut inserts himself into the book and talks to Trout, telling Trout that
he (Vonnegut) is the Creator of the Universe. Trout takes this in stride.</li>
</ul>

<p>Written in short snippets, separated by three dots. Uses simple language.</p>

<h2 id="characters">Characters</h2>

<ul>
  <li>Kilgore Trout: sci-fi writer</li>
  <li>Dwayne Hoover: Midwest car dealer. Slowly going crazy.</li>
  <li>Eliot Rosewater: rich man who sponsors Trout to speak at the Midland City Arts
Festival</li>
  <li>Harry LeSabre: secret transvestite, self-conscious about it, works for Hoover</li>
</ul>

<h2 id="themes">Themes</h2>

<ul>
  <li>war</li>
  <li>sex</li>
  <li>racism</li>
  <li>success</li>
  <li>politics</li>
  <li>pollution</li>
  <li>suicide</li>
</ul>

<h2 id="snippets">Snippets</h2>

<blockquote>
  <p>
  Here was the core of the bad ideas which Trout gave Dwayne: Everybody on Earth
  was a robot, with one exception--Dwayne Hoover. (14)
  </p>
</blockquote>

<blockquote>
  <p>
  As I approached my fiftieth birthday, I had become more and more enraged and
  mystified by the idiot decisions made by my countrymen. And then I had come
  suddenly to pity them, for I understood how innocent and natural it was for
  them to behave so abominably, and with such abominable results: They were
  doing their best to live like people invented in story books. This was the
  reason Americans shot each other so often: It was a convenient literary device
  for ending short stories and books.
  </p>

  <p>
  Why were so many Americans treated by their government as though their lives
  were as disposable as paper facial tissues? Because that was the way authors
  customarily treated bit-part players in their made-up tales.
  </p>

  <p>
  And so on.
  </p>

  <p>
  Once I understood what was making America such a dangerous, unhappy nation of
  people who had nothing to do with real life, I resolved to shun storytelling.
  I would write about life. Every personw ould be exactly as important as any
  other. All facts would also be given equal weightiness. Nothing would be left
  out. Let others bring order to chaos. I would bring chaos to order, instead,
  which I think I have done. (215)
  </p>
</blockquote>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/05/06/breakfast-of-champions/</guid>
                <description>
                    
                    My first Vonnegut book. Definitely a ride. Not sure I 'got' everything I was supposed to.
                    
                </description>
                <pubDate>Mon, 06 May 2019 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Beneath a Scarlet Sky</title>
                <link>http://tigerthinks.com/2019/04/09/beneath-a-scarlet-sky/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: “Pino Lella’s story as a young Italian man during World War 2. Slightly
worse than The Nightingale but great story nonetheless. Starting to warm up to
war story genre. Strong characters.”</p>

<h2 id="plot">Plot</h2>

<p>Pino Lella wants nothing to do with the war or the Nazis. He’s a normal Italian
teenager—obsessed with music, food, and girls—but his days of innocence are
numbered. When his family home in Milan is destroyed by Allied bombs, Pino joins
an underground railroad helping Jews escape over the Alps, and falls for Anna, a
beautiful widow six years his senior.</p>

<p>In an attempt to protect him, Pino’s parents force him to enlist as a German
soldier—a move they think will keep him out of combat. But after Pino is
injured, he is recruited at the tender age of eighteen to become the personal
driver for Adolf Hitler’s left hand in Italy, General Hans Leyers, one of the
Third Reich’s most mysterious and powerful commanders.</p>

<p>Now, with the opportunity to spy for the Allies inside the German High Command,
Pino endures the horrors of the war and the Nazi occupation by fighting in
secret, his courage bolstered by his love for Anna and for the life he dreams
they will one day share.</p>

<ul>
  <li>Leyers eventually ends up saving Jews</li>
  <li>When the Italians win, they shoot Anna for being a traitor since she was the
maid of Dolly, Leyers’s mistress</li>
</ul>

<h2 id="characters">Characters</h2>

<ul>
  <li>Pino: main character, teenager</li>
  <li>Mimo: Pino’s brother, fights directly for the resistance. Resents Pino
initially, thinks of Pino as a traitor</li>
  <li>Hans Leyers: Nazi general who Pino drives around after Pino is able to fix his
car</li>
  <li>Anna: beautiful widow who Pino sees before the war starts in earnest and falls
in love with. Maid to Leyers’ mistress</li>
  <li>Father Re: Catholic priest who organizes getting Jews across the border to
Switzerland</li>
  <li>Michele: Pino’s dad</li>
  <li>Albert: Pino’s uncle, involved with resistance</li>
</ul>

<h2 id="themes">Themes</h2>

<ul>
  <li>war</li>
  <li>coming-of-age</li>
  <li>secrets</li>
  <li>romance</li>
</ul>

<h2 id="snippets">Snippets</h2>

<blockquote>
  <p>
  "Decimation functions psychologically," Leyers explained. "It's designed to
  quell the threat of revolt through abject fear. But historically, using
  brutality against civilians in reprisal breeds more hatred than obedience."
  (235)
  [Tiger: Leyers showing his human side]
  </p>
</blockquote>

<blockquote>
  <p>
  "Anna kissed him a fourth time. Pino thought he heard a woodwind join the
  strings vibrating in his chest, and his mind and body were reduced to one
  thing, to the music of Anna-Marta and nothing more." (250)
  </p>
</blockquote>

<blockquote>
  <p>
  "How do you find happiness?" [Pino]
  Anna paused, then said, "You start by looking right around you for the
  blessings you have. When you find them, be grateful." (260)
  </p>
</blockquote>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/04/09/beneath-a-scarlet-sky/</guid>
                <description>
                    
                    Pino Lella's story as a young Italian man during World War 2. Slightly worse than The Nightingale but great story nonetheless. Starting to warm up to war story genre. Strong characters.
                    
                </description>
                <pubDate>Tue, 09 Apr 2019 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Ruth</title>
                <link>http://tigerthinks.com/2019/03/31/ruth/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Naomi loses her husband and two sons. Ruth, one of her daughters-in-law, stays
with her, and they return to Bethelehem together. Two widows have very little
social capital in Israel, but one of Naomi’s husband’s relatives, Boaz, shows
them kindness and allows Ruth to pick through the fields after his men have
gone through them. Ruth eventually marries Boaz.</li>
</ul>

<h2 id="snippets">Snippets</h2>

<blockquote>
  <p>
  Ruth said, "Do not press me to leave you or to turn back from following you!
  Where you go, I will go; Where you lodge, I will lodge; your people shall be
  my people, and your God my God. Where you die, I will die—there will I be
  buried. May the Lord do thus and so to me, and more as well, if even death
  parts me from you!" When Naomi saw that she was determined to go with her, she
  said no more to her. (NRSV 1:16-18) [Tiger: LOYALTY]
  </p>
</blockquote>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/03/31/ruth/</guid>
                <description>
                    
                    Read quickly during Easter service. Story of a loyal daughter-in-law who helps mother-in-law cope with loss of husband and sons.
                    
                </description>
                <pubDate>Sun, 31 Mar 2019 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Wonder</title>
                <link>http://tigerthinks.com/2019/03/28/wonder/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: Story of a kid named August who has a disfigured face who goes to
school for the first time. It’s definitely a kid’s book. I appreciated the
message a lot and it was well-told, but I think I would have enjoyed it much
more 10 years ago :)</p>

<h2 id="notes">Notes</h2>

<ul>
  <li>Switches perspectives between kids throughout book</li>
  <li>August: “I won’t describe what I look like. Whatever you’re thinking, it’s
probably worse.”</li>
  <li>Friends:
    <ul>
      <li>Jack Will is poor but wants to fit in</li>
      <li>Julian is the “popular kid”</li>
    </ul>
  </li>
  <li>Vivian is the sister</li>
  <li>Justin is Vivian’s new boyfriend</li>
  <li>Miranda is Vivian’s old friend</li>
</ul>

<h2 id="snippets">Snippets</h2>

<blockquote>
  <p>
  Mr. Browne's September Precept: When Given the Choice Between Being Right or
  Being Kind, Choose Kind. (16)
  </p>
</blockquote>

<blockquote>
  <p>
  (Via) It's not a contest about whose days suck the most, Auggie. The point is
  we all have to put up with the bad days. Now, unless you want to be treated
  like a baby the rest of your life, or like a kid with special needs, you just
  have to suck it up and go. (36)
  </p>
</blockquote>

<blockquote>
  <p>
  (Auggie) Funny how sometimes you worry a lot about something and it turns out to be
  nothing. (66)
  </p>
</blockquote>

<blockquote>
  <p>
  (Mr. Tushman) Always try to be a little kinder than is necessary (92)
  </p>
</blockquote>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/03/28/wonder/</guid>
                <description>
                    
                    Story of a kid named August who has a disfigured face who goes to school for the first time. It's definitely a kid's book. I appreciated the message a lot and it was well-told, but I think I would have enjoyed it much more 10 years ago :)
                    
                </description>
                <pubDate>Thu, 28 Mar 2019 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Machine Learning Guide</title>
                <link>http://tigerthinks.com/2019/03/25/machine-learning-guide/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>After AI winter, AI was revived through more realistic applications
(recommenders), better computers, and more data. Also somewhat better algorithms</li>
  <li>Reactions to AI: fear and optimism. We’ve survived through every revolution so
far</li>
  <li>AI is the next stage of evolution. It’s our duty to create AI</li>
  <li>ML stages: predict, error, learn</li>
  <li>An algorithm is code which describes a machine learning process</li>
  <li>Gradient descent and linear regression are building blocks</li>
  <li>Logistic regression is a bit of a misnomer. Logistic function is performed in
linear regression</li>
  <li>A logit is basically a probability</li>
  <li>Objective function is the name of the function in the predict step. It is a
sigmoid function in logistic regression</li>
  <li>Gradient descent is descent to where the error is the lowest</li>
  <li>3 maths are linear algebra, stats, and calculus</li>
  <li>Cooking analogy. Linalg is mise en place, stats are the recipe or cookbook,
and calculus is actually cooking</li>
  <li>Deep learning is closer to <em>automating</em> a mental task</li>
  <li>Deep learning stacks shallow learning algorithms (eg logistic regression
logit)</li>
  <li>GPA is a good approximation of PCA</li>
  <li>Kernel trick is like looking at a dataset from a different angle so you can
see a better solution. Or like colored goggles</li>
  <li>Markov: no current states have dependencies on previous states</li>
  <li>NLP is a good specialization. It’s everywhere.</li>
  <li>3 levels from lowest to highest: parts, tasks, goals</li>
  <li>Parts are corpora, lexicon, etc</li>
  <li>Tasks are named entity recognition, part of speech</li>
  <li>Goals are text classification, sentiment analysis, spell check</li>
  <li>GPU is 20-100x performance gain</li>
  <li>Nvidia provides cuda</li>
  <li>Pandas to get and munge data. Then pass to numpy for transformations</li>
  <li>In CNNs, window and stride gobhand in hand for filter definitions</li>
  <li>Hyperparameter is anything the human chooses</li>
  <li>When feature scaling. Normalization always does 0 to 1. Standardization is
mean 0 with unit stdev. Standardization is more common</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/03/25/machine-learning-guide/</guid>
                <description>
                    
                    30 Episodes of Machine Learning content. Best audio resource I've found.
                    
                </description>
                <pubDate>Mon, 25 Mar 2019 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Canva: Melanie Perkins</title>
                <link>http://tigerthinks.com/2019/03/14/canva-melanie-perkins/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Pitched &gt; 100ppl. Gotta know the game you’re playing</li>
  <li>First unicorn from Australia</li>
  <li>Started with yearbook design</li>
  <li>Had a paper pitch deck to begin with</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/03/14/canva-melanie-perkins/</guid>
                <description>
                    
                    Melanie Perkins built Australia's first unicorn through sheer force of will
                    
                </description>
                <pubDate>Thu, 14 Mar 2019 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Mistborn: The Final Empire</title>
                <link>http://tigerthinks.com/2019/03/05/mistborn-the-final-empire/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: Mistborn is a great fantasy read. Incredible world-building. Really
enjoyed the magic aspect and the descriptions. Would recommend to fans of Harry
Potter-like stories. Only nitpick is that the main character (Vin) is a bit of
a Mary Sue.</p>

<p>Recommended by Nate</p>

<h2 id="notes">Notes</h2>

<ul>
  <li>Centered around the idea of “allomancy”: burning metals internally to create
effects like moving fast or being strong
    <ul>
      <li>Also feruchemy: allows you to store things like strength or vision or energy
in metals, and wear them on your body</li>
    </ul>
  </li>
  <li>Skaa are slaves, “nobles” are the people who own skaas. Only noble blood can
produce allomancy</li>
  <li>The Lord Ruler is considered immortal and all-powerful. He is both an
allomancer and feruchemist</li>
  <li>“Obligators” are bureaucrats who are the eyes and ears of the Lord Ruler</li>
  <li>“Inquisitors” are scary and super powerful allomancers with spikes in their
eyes. Only 20 or so of them.</li>
  <li>Vin discovers that the Lord Ruler is an allomancer and feruchemist by burning
the “Eleventh Metal”. Then her and Marsh fight the Lord Ruler together. Vin is
able to get his feruchemy jewelry off of him. He loses his power and they are
able to kill him.</li>
</ul>

<h2 id="snippets">Snippets</h2>

<blockquote>
  <p>
   Gritting his teeth, Kelsier flared his pewter again; it was running low, he
   noticed. (99) [Tiger: this sentence structure stood out to me as interesting and unique]
  </p>
</blockquote>

<blockquote>
  <p>
  The best liars are those who tell the truth most of the time
  (272)
  </p>
</blockquote>

<blockquote>
  <p>
    If you're always on time, it implies that you never have anything better you
    should be doing. (443)
  </p>
</blockquote>

<blockquote>
  <p>
  Vin closed her eyes, simply feeling the warmth of being held. And realized
  that was all she had ever really wanted. (630)
  </p>
</blockquote>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/03/05/mistborn-the-final-empire/</guid>
                <description>
                    
                    Mistborn is a great fantasy read. Incredible world-building. Really enjoyed the magic aspect and the descriptions. Would recommend to fans of Harry Potter-like stories. Only nitpick is that the main character (Vin) is a bit of a Mary Sue.
                    
                </description>
                <pubDate>Tue, 05 Mar 2019 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Where Jonathan Haidt things the American mind went wrong</title>
                <link>http://tigerthinks.com/2019/03/05/cal-newport-answer-digital-burnout/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Solitude is being alone with your thoughts and not processing input from other minds</li>
  <li>Solitude is really important</li>
  <li>You need solitude to process the stimuli</li>
  <li>10 years ago, was impossible to avoid solitude!</li>
  <li>Digital maximalism: if tech could help us, adopt it</li>
  <li>Crowds out real world interaction</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/03/05/cal-newport-answer-digital-burnout/</guid>
                <description>
                    
                    Digital minimalism
                    
                </description>
                <pubDate>Tue, 05 Mar 2019 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>A Short History of Nearly Everything</title>
                <link>http://tigerthinks.com/2019/02/21/a-short-history-of-nearly-everything/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>:</p>

<h2 id="notessnippets">Notes/Snippets</h2>

<h3 id="part-1-lost-in-the-cosmos">Part 1: Lost in the Cosmos</h3>

<ul>
  <li>Although the creation of the universe might be very unlikely, Edward Tryon
emphasizes that nobody has counted the failed attempts</li>
  <li><em>Once in a great while, a few times in history, a human mind produces an
observation so acute and unexpected that people can’t quite decide which is
the more amazing - the fact or the thinking of it. Principia was one of those
moemnts.</em> (47)</li>
</ul>

<h3 id="part-2-the-size-of-the-earth">Part 2: The Size of the Earth</h3>

<ul>
  <li>Henry Cavendish: extremely socially awkward. Once ran away when an Austrian
admirer came to his door, wouldn’t come home for a whole day</li>
  <li>Edward Cope and Othniel Marsh hated each other and “seldom – perhaps never –
has science ben driven forward more swiftly and successfully by animosity”
    <ul>
      <li>Found a ton of new dinosaur species in the late 1880s</li>
    </ul>
  </li>
  <li>Avogadro’s principle: two equal volume of gases of any type at the same
pressure and temperature have an identical number of molecules. Drove a ton of
the Industrial Revolution</li>
  <li>Marie Curie discovers radioactivity</li>
</ul>

<h3 id="part-3-a-new-age-dawns">Part 3: A New Age Dawns</h3>

<ul>
  <li>Einstein couldn’t get a job!!</li>
  <li>In essence what relativity says is that space and time are not absolute, but
relative to both the observer and the thing being observed, and the faster one
moves the more pronounced these effects become.</li>
  <li>The most challenging and nonintuitive of all the concepts in the general
theory of relativity is the idea that time is part of space.</li>
  <li>Spacetime is usually explained by asking you to imagine something flat but
pliant – a mattress, say, or a sheet of stretched rubber – on  which is
resting a heavy round object, such as an iron ball. The weight of the iron
ball causes the material on which it is sitting to stretch and sag slightly.
Now if you roll a smaller ball across the sheet, it tries to go in a straight
line but as it nears the massive object and the slope of the sagging fabric,
it rolls downward. This is gravity – a product of the bending of spacetime</li>
  <li>Feynman: Science = “All things are made of atoms</li>
  <li>Heisenberg Uncertainty Principle: the electron is a particle but a particle
that can be described in terms of waves. We can know where it is or we can
know its path, but we cannot know both.</li>
  <li>1997 University of Geneva: photons 7 miles apart from each other had
instantaneous responses to each other</li>
</ul>

<h3 id="part-4-dangerous-planet">Part 4: Dangerous Planet</h3>

<ul>
  <li>Plans for Saturn launchers were destroyed as part of a NASA cleaning exercise</li>
  <li>We don’t understand volcanoes</li>
  <li>All of Yellowstone is a supervolcano. Average massive eruption every 600,000
years. Last one was 630,000 years ago.</li>
</ul>

<h3 id="part-5-life-itself">Part 5: Life Itself</h3>

<ul>
  <li>Only 12% of land area and 4% of overall surafce of Earth is habitable</li>
  <li>4 top breaks for life on earth:
    <ul>
      <li>Excellent location. Not too close or far from sun.</li>
      <li>Right kind of planet. Has rumples and a molten core</li>
      <li>Twin planet (big moon)</li>
      <li>Timing. Not disturbed by supernovas, etc.</li>
    </ul>
  </li>
  <li>Air always flows from high to low pressure (think of releasing air from a
balloon)</li>
  <li>The closer you are to the equator, the faster you spink</li>
  <li>ICE FLOATS ON WATER</li>
  <li>We cry seawater but we cannot drink it</li>
  <li>We are astoundingly, sumptuously, radiantly ignorant of life beneath the seas</li>
  <li>Whatever prompted life to begin, it happened just once. That is the most
extraordinary fact in biology, perhaps the most extraordinary fact we know.</li>
  <li>Mitochondrial invasion a biollion years ago</li>
  <li>Microbes are 80% of the total biomass of the planet. The world belongs to the
very small</li>
  <li>We used antibiotics too much (on farm animals, for example) and now bacteria
have evolved :/</li>
  <li>Most animals are tetrapods: four limbs that end in a maximum of five fingers
or toes</li>
  <li>Permian extinction 245 bil years ago, 95% of species gone</li>
  <li>Life:
    <ul>
      <li>Wants to be</li>
      <li>Doesn’t always want to be much</li>
      <li>From time to time goes extinct</li>
      <li>Goes on</li>
    </ul>
  </li>
  <li>Taxonomy sucks. All arguing and trying to undo past mistakes</li>
  <li>You don’t get new brain cells</li>
  <li>Every day you produce and use half your body weight in ATP</li>
  <li>Trillions upon trillions of reflexive chemical reactions add up to a mobile,
thinking, decisionmaking you–or, come to that, a rather less reflective but
still incredibly organized dung beetle</li>
  <li>Darwin : evolution :: Mendel : gene</li>
  <li>RNA is the interpreter between DNA and proteins</li>
  <li>Genes are nothing more than instructions to make proteins</li>
  <li>The genome is a kind of instruction manual for the body</li>
  <li>97% of DNA is junk. It exists only because it’s good at being duplicated. You
are a machine for reproducing DNA, not it for you</li>
</ul>

<h3 id="part-6-the-road-to-us">Part 6: The Road To Us</h3>

<ul>
  <li>Global warming could lead to a big cooling because higher evaporation and
cloud cover, leading to more persistent accumulation of snow in the higher
altitudes</li>
  <li>Homo erectus then homo sapiens</li>
  <li><em>If this book has a lesson, it is that we are awfully lucky to be here–and by
“we” I mean every living thing. To attain any kind of life in this universe of
ours appears to be quite an achievement. As humans we are doubly lucky, of
course: we enjoy not only the privilege of existence but also the singular
ability to appreciate it and even, in a multitide of ways, to make it better.</em>
(477)</li>
  <li><em>We really are at the beginning of it all. The trick, of course, is to make
sure we never find the end. And that, almost certainly, will require a good
deal more than lucky breaks.</em> (477)</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/02/21/a-short-history-of-nearly-everything/</guid>
                <description>
                    
                    The history of the universe and humanity. Half science, half history. The science parts were much more interesting than the history parts to me. Potentially outdated? (17 y/o)
                    
                </description>
                <pubDate>Thu, 21 Feb 2019 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>#471: Using Mental Models to Make Better Decisions</title>
                <link>http://tigerthinks.com/2019/02/20/shane-parrish-farnam-street/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Five principles of Farnham street
    <ul>
      <li>Direction over speed</li>
      <li>Live deliberately</li>
      <li>Thoughtful opinions loosely held</li>
      <li>Principles outlive tactics</li>
      <li>Own your actions</li>
    </ul>
  </li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/02/20/shane-parrish-farnam-street/</guid>
                <description>
                    
                    Argument for using mental models to improve thought processes
                    
                </description>
                <pubDate>Wed, 20 Feb 2019 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Core Java Volume 1 -- Fundamentals</title>
                <link>http://tigerthinks.com/2019/02/15/core-java/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: More of a reference book than a read-through book. Goes through the Java core API</p>

<h2 id="notes">Notes</h2>

<p>Note: skipped over Ch 10-14 (Graphics, Events, UI, Deployments, Concurrency)</p>

<h3 id="1-an-introduction-to-java">1: An Introduction to Java</h3>

<ul>
  <li>Buzzwords from white paper:
    <ul>
      <li>Simple</li>
      <li>Object-oriented</li>
      <li>Distributed</li>
      <li>Robust</li>
      <li>Secure</li>
      <li>Architecture-Neutral
        <ul>
          <li>Can run on many processors given the presence of the JVM. Compiler
generates bytecode</li>
        </ul>
      </li>
      <li>Portable</li>
      <li>Interpreted</li>
      <li>High-performance</li>
      <li>Multithreaded</li>
      <li>Dynamic</li>
    </ul>
  </li>
</ul>

<h3 id="2-the-java-programming-environment">2: The Java Programming Environment</h3>

<ul>
  <li>Primitives: int (4 bytes), short (2 bytes), long (8 bytes), byte (1 byte),
float (4 bytes), double (8 bytes), char (1 byte), boolean (1 bit)</li>
</ul>

<h3 id="3-fundamental-programming-structures-in-java">3: Fundamental Programming Structures in Java</h3>

<ul>
  <li>Declare variables where they are used</li>
  <li>Strings are immutable</li>
  <li>Can memorize print format characters or time format characters if ever
inclined
    <ul>
      <li>Should do regex at some point too</li>
    </ul>
  </li>
  <li>labeled break: break out of outer loop</li>
</ul>

<h3 id="4-objects-and-classes">4: Objects and Classes</h3>

<ul>
  <li>OO-programming: data then algorithms</li>
  <li>Object has behavior, state, and identity
    <ul>
      <li>what you can do with the object</li>
      <li>how the object reacts when behavior is invoked</li>
      <li>how to distinguish object from others with same behavior/state</li>
    </ul>
  </li>
  <li>Classes are nouns, methods are verbs</li>
  <li>Implicit parameter of an instance method is the instance (target, receiver)</li>
  <li>Always use clone to return a copy of a mutable field</li>
  <li>Static methods when method doesn’t need access to object state</li>
  <li>Method:
    <ul>
      <li>Cannot modify parameter of primitive type</li>
      <li>Can change state of object parameter</li>
      <li>Cannot make pobject parameter refer to new object</li>
    </ul>
  </li>
  <li>list.add(3) autoboxes to list.add(Integer.valueOf(3))</li>
</ul>

<h3 id="5-inheritance">5: Inheritance</h3>

<h3 id="6-interfaces-lambda-expressions-and-inner-classes">6: Interfaces, Lambda Expressions, and Inner Classes</h3>

<ul>
  <li>Interface: benefits of multiple inheritance while avoiding complexities and
inefficiencies</li>
  <li>Lambda: block of code that can be passed around to use later, once or many
times
    <ul>
      <li>Deferred execution</li>
    </ul>
  </li>
</ul>

<h3 id="7-exceptions-assertions-and-logging">7: Exceptions, Assertions, and Logging</h3>

<ul>
  <li>RuntimeException comes from programming error. Any other exception is because
something happened to your otherwise good program</li>
  <li>Use the finally clause to close a resource</li>
</ul>

<h3 id="8-generic-programming">8: Generic Programming</h3>

<ul>
  <li>Generics get wild</li>
  <li>Raw type is created whenever generic is defined
    <ul>
      <li>Type variables erased and replaced by their bounding types</li>
    </ul>
  </li>
  <li>Wildcard type allows type parameter to vary
    <ul>
      <li>Example: Pair&lt;? extends Employee&gt;</li>
    </ul>
  </li>
</ul>

<h3 id="9-collections">9: Collections</h3>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/02/15/core-java/</guid>
                <description>
                    
                    More of a reference book than a read-through book. Goes through the Java core API. Already knew most of it
                    
                </description>
                <pubDate>Fri, 15 Feb 2019 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Lost and Founder</title>
                <link>http://tigerthinks.com/2019/02/03/lost-and-founder/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: Extremely transparent and valuable perspective of a 15-year startup CEO who has been through it all.</p>

<h2 id="notes">Notes</h2>

<h3 id="1-the-truth-shall-set-you-free-from-a-lot-of-shitstorms">1: The Truth Shall Set You Free (From A Lot Of Shitstorms)</h3>

<ul>
  <li><em>One of the biggest things I’ve learned about startups: it’s dangerous to go
alone.</em> (2)</li>
  <li>50% of companies that last 4 years go under (Berkeley)</li>
  <li>Every email and convo should be conducted as though it will be leaked</li>
  <li>Done with the pain of secrecy, happy to trade it for the challenges
transparency brings</li>
</ul>

<h3 id="2-why-the-startup-world-hates-on-services-and-why-you-shouldnt">2: Why The Startup World Hates on Services (And Why You Shouldn’t)</h3>

<ul>
  <li>Effective product-focused business needs reach (influence a large audience) 
and scalability (revenue grows quicker than costs) (35)</li>
  <li>Gross margins on software products: 75-80%</li>
  <li>Gross margins on consultancy: 25-40%</li>
  <li>Multiplier for services: 1-2x</li>
  <li>Multiplier for products: 3-8x</li>
  <li>Services firms are often a superior financial deal for a founder</li>
</ul>

<h3 id="3-great-founders-dont-do-what-they-love-they-enable-a-vision">3: Great Founders Don’t Do What They Love; They Enable A Vision</h3>

<ul>
  <li>Chapter title is great</li>
  <li>Reset passion from “I want to do this work” to “I want to see something I
create change the world in this way”, your expectations will align with
reality (53)</li>
</ul>

<h3 id="4-beware-the-pivot">4: Beware The Pivot</h3>

<ul>
  <li>Find a market with incumbents that are a combination of:
    <ul>
      <li>Hated by customers</li>
      <li>Unwilling or unable to evolve</li>
      <li>Protected by competitive advantages you can unravel</li>
      <li>In their early stages</li>
    </ul>
  </li>
</ul>

<h3 id="5-startups-carry-their-founders-baggage">5: Startups Carry Their Founders’ Baggage</h3>

<ul>
  <li>Founder attributes instill themselves in the org</li>
  <li><em>Every founder has a different take on the hardest parts of building a
company. And those same founders will have different takes on the easy parts.
Talk to two talented software engineers who founded a company and you may find
that recruiting, managing, or marketing are perceived as the most difficult
issues. Talk to the marketer and people manager who founded a company down the
street, and you may hear just the opposite. The uncanny truth is that those
“hardest parts” and “easiest parts” say less about the challenges and more
about the strengths and weaknesses of the founders themselves. We all believe
the problems and experiences we face are the most common ones, the ones every
founder must struggle against. Availability bias.</em> (78)</li>
</ul>

<h3 id="6-dont-raise-money-for-the-wrong-reasons-or-from-the-wrong-people">6: Don’t Raise Money For The Wrong Reasons Or From The Wrong People</h3>

<ul>
  <li>Two reasons not to raise money: Odds and Cost</li>
  <li>Get comfortable with the odds, or don’t roll the dice. The venture business is
about outliers.</li>
  <li>Founding to IPO takes an average of 11 years</li>
  <li>Be very careful about raising money</li>
</ul>

<h3 id="7-so-youve-decided-to-ask-complete-strangers-for-millions-of-dollars">7: So You’ve Decided To Ask Complete Strangers For Millions Of Dollars</h3>

<ul>
  <li>Common stock: for you and cofounders</li>
  <li>Preferred stock: investor stock (special rights like first-right-to-money or
board seats)</li>
  <li>Stock options: employee stock (buy stock at price it held when issued the
option)</li>
</ul>

<h3 id="8-founding-a-top-5-percent-startup-may-not-make-you-rich">8: Founding A Top 5 Percent Startup May Not Make You Rich</h3>

<ul>
  <li>A startup can be a great way to visibly multiply what companies are willing to
pay to bring you aboard. It might be a great way to level up your skills. And
it has the outside chance of making you remarkably wealthy. Just don’t go in
blinded by the money.</li>
</ul>

<h3 id="9-scalable-marketing-flywheels--growth-hacks">9: Scalable Marketing Flywheels &gt; Growth Hacks</h3>

<ul>
  <li>Flywheel: takes time to get going, only after it rotates smoothly does it
become friction-light</li>
</ul>

<h3 id="10-real-values-dont-help-you-make-money-in-the-short-term">10: Real Values Don’t Help You Make Money (In The Short Term)</h3>

<ul>
  <li><em>They’re not core values if you’re willing to sacrifice them in exchange for
money.</em> (140)</li>
  <li>Unifying forces of values: shared commitment, set of blueprints for
decisionmaking, evaluation criteria for retrospection</li>
  <li>Culture &gt; competency</li>
  <li>Starting a company with friends is not <strong>additive</strong></li>
</ul>

<h3 id="11-living-the-lives-of-your-customers-and-their-influencers-is-a-startup-cheat-code">11: Living The Lives Of Your Customers And Their Influencers Is A Startup Cheat Code</h3>

<h3 id="12-great-products-are-rarely-minimally-viable">12: Great Products Are Rarely “Minimally Viable”</h3>

<ul>
  <li>Impact of reputation and word of mouth on potential success vs. the risks of
MVP hangover is too important to ignore. (191)</li>
</ul>

<h3 id="13-should-you-sell-your-startup-early-yes-probably">13: Should You Sell Your Startup Early? Yes, Probably</h3>

<ul>
  <li>Exits bring an almost mystical sense of closure and accomplishment</li>
</ul>

<h3 id="14-if-management-is-the-only-way-up-were-all-fd">14: If Management Is The Only Way Up, We’re All F’d</h3>

<ul>
  <li>Management is a skill, not a prize</li>
</ul>

<h3 id="15-vulnerability-does-not-equal-weakness">15: Vulnerability Does Not Equal Weakness</h3>

<ul>
  <li>Psychological safety predicts performance better than any other</li>
</ul>

<h3 id="16-self-awareness-is-a-superpower">16: Self-awareness Is A Superpower</h3>

<h3 id="17-focus">17: Focus</h3>

<ul>
  <li>The benefits of focus are too great to ignore, hidden only by the resolve
needed to stay on target. (278)</li>
</ul>

<h3 id="afterword-cheat-codes-for-next-time">Afterword: Cheat Codes For Next Time</h3>

<ul>
  <li>Steps for validation:
    <ul>
      <li>Talk to individuals</li>
      <li>Build landing page and validate</li>
    </ul>
  </li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/02/03/lost-and-founder/</guid>
                <description>
                    
                    Extremely transparent and valuable perspective of a 15-year startup CEO who has been through it all.
                    
                </description>
                <pubDate>Sun, 03 Feb 2019 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Surprising Implications of Treating Self-Help as Art</title>
                <link>http://tigerthinks.com/2019/01/30/treating-self-help-as-art/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>We have a bias to sit and talk, instead of to shut up and do. The latter is
not less thoughtful than the former, but we’ve been trained to think it is. If
it’s cheap to test an idea or technique, then it’s more costly to spend time
arguing than it is to test the thing. Thoughtfulness can come while doing.</li>
  <li>Developing Technique in the Wild is Better Than Reading Self Help</li>
  <li>What are action handles? I call action handles levers that you may manipulate
to achieve a desired result.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/01/30/treating-self-help-as-art/</guid>
                <description>
                    
                    Developing technique in the wild is better than reading self-help.
                    
                </description>
                <pubDate>Wed, 30 Jan 2019 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>How to Read Self Help</title>
                <link>http://tigerthinks.com/2019/01/30/how-to-read-self-help/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>The best way to read self help is to think of it as ‘technê’ — the old Greek
word for ‘craft’, or ‘practice’.</li>
  <li>Optimise for usefulness.</li>
  <li>What is the ‘power test’, you ask? Well, difficult problems require powerful
techniques to overcome.</li>
  <li>Principle of Believability here: prioritise testing ideas from more
believable people. Spend less time on those who aren’t that believable.</li>
  <li>Self help is merely a way of taking advice from people I’ve never met.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/01/30/how-to-read-self-help/</guid>
                <description>
                    
                    Treat self-help as craft. Only listen to practitioners. Test everything.
                    
                </description>
                <pubDate>Wed, 30 Jan 2019 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>AWS, MongoDB, and the Economic Realities of Open Source</title>
                <link>http://tigerthinks.com/2019/01/27/the-economic-realities-of-open-source/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>It wasn’t necessarily “fair” that music industry sales plummeted, and yes,
companies like Apple with its iPod business made billions off of piracy. The
only reality that mattered, though, was that music itself, thanks to its
infinite reproducibility, was as pure a commodity as there could be.</li>
  <li>Right now everyone is winning: simply following economic realities could, in
the long run, mean everyone is worse off.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/01/27/the-economic-realities-of-open-source/</guid>
                <description>
                    
                    Open Source financials echo those of the music industry; what's being sold is not the software, but the packaging. This is dangerous if left unaddressed.
                    
                </description>
                <pubDate>Sun, 27 Jan 2019 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Switch: How to Change Things When Change Is Hard</title>
                <link>http://tigerthinks.com/2019/01/27/switch/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: How to drive behavior change: Direct the rider. Motivate the Elephant. Shape the path.</p>

<h2 id="notes">Notes</h2>

<ul>
  <li>Two parts of brain: emotional (instinctive) and rational (conscious)
    <ul>
      <li>Haidt: elephant and rider</li>
      <li>Must move together to create change</li>
    </ul>
  </li>
  <li>Self-control is finite</li>
  <li>Three parts of behavior change:
    <ul>
      <li>Direct the Rider
        <ul>
          <li>What looks like resistance is often a lack of clarity</li>
        </ul>
      </li>
      <li>Motivate the elephant
        <ul>
          <li>What looks like laziness is often exhaustion</li>
        </ul>
      </li>
      <li>Shape the Path
        <ul>
          <li>What looks like a people problem is often a situation problem</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="direct-the-rider">DIRECT THE RIDER</h3>

<ul>
  <li>Find the bright spots. Brain learns best what it records most
    <ul>
      <li>Solutions-focused therapy.
        <ul>
          <li>Miracle question: “Suppose you go to bed one night and in the middle of the
night everything is resolved. When you wake up in th emorning, what’s the
first small sign you would see that the problem is gone?”</li>
          <li>Second question: Exception question. “When was the last time you saw a bit
of the mircale, even just for a short time?”</li>
          <li>Demonstrate that client is capable of solving their own problem</li>
          <li>Recognize what needs to be done differently: “What’s working and how can
we do more of it?”</li>
          <li>Ex: Jerry Sternin, save the children. Fixed malnutrition in Vietnam in six
months by going to homes with healthy children, observing what they were
doing right, and then organizing community cooking groups</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Script the critical moves
    <ul>
      <li>Decision paralysis: more options freeze us and make us retreat to the
default plan</li>
      <li>Ambiguity is the enemy. Ambiguous goals-&gt;concrete behaviors</li>
      <li>Ambiguity tires the rider</li>
      <li>Ex: get people to file expense reports on time
        <ul>
          <li>See what people who do file expense reports on time are doing right</li>
          <li>Attach emotion: “doing me a favor”, “making my life easier”</li>
          <li>Make less friction to the submission process</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Point to the destination
    <ul>
      <li>Vivid picture of the short-term future that shows what could be possible
(<strong>destination postcard</strong>)</li>
      <li>Correct the tendency to get lost in analysis. Black and White goal: No
cheetos. Gym every single day.</li>
    </ul>
  </li>
</ul>

<h3 id="motivate-the-elephant">MOTIVATE THE ELEPHANT</h3>

<ul>
  <li>Find the feeling
    <ul>
      <li>See-Feel-Change</li>
      <li>Ex: give developers more empathy for end users
        <ul>
          <li>Direct the rider: point to group glory of successful launch.</li>
          <li>Motivate the elephant: involve developer in user testing</li>
          <li>Shape the path: add to routines</li>
        </ul>
      </li>
      <li>Instill hope and optimism</li>
    </ul>
  </li>
  <li>Shrink the change
    <ul>
      <li>Placebos apply to things that are self-reported</li>
      <li>Take care of smallest debt first</li>
      <li>Select small wins that are 1) meaningful and 2) within immediate reach</li>
      <li>Make it a matter of identity instead of consequences
        <ul>
          <li>“Am I the person who does this sort of thing?” vs. “What are the costs and
benefits of doing this thing?”</li>
          <li>Nursing turnover improved dramatically at Lovelace Hospital in New Mexico
once the administrators realized that the best nurses tie it to their
identity. Had recognitions for extraordinary nursing performance</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="shape-the-path">SHAPE THE PATH</h3>

<ul>
  <li>Tweak the environment
    <ul>
      <li>Fundamental Attribution Error: we have an inclination to attribute people’s
behavior to their character rather than their situation</li>
      <li>Stanford dorm experiment
        <ul>
          <li>Two sets of people: saints and jerks</li>
          <li>Two letters for canned food drive: one ambiguous, one specific
(directions to drop, asking for one can of beans)</li>
          <li>Ambiguous letter: 8% of saints, 0% of jerks. Specific letter: 42% of
saints, 25% of jerks!!</li>
        </ul>
      </li>
      <li>Make hard behaviors impossible. i.e. keep both hands occupied outside of a
machine’s danger zone</li>
      <li>Haddon Matrix: focus on pre-event, event, and post-event security
interventions</li>
    </ul>
  </li>
  <li>Build habits. Behavioral autopilot
    <ul>
      <li>Action trigger: pre-load the next decision with a previous one. E.g. gym
clothes on-&gt;go to gym
        <ul>
          <li>Execute an action when you encounter a trigger</li>
        </ul>
      </li>
      <li>Use checklists!!</li>
    </ul>
  </li>
  <li>Rally the herd
    <ul>
      <li>Behavior is contagious</li>
      <li>Obesity is contagious: 3x more likely to become obese if a close friend
becomes obese (Christakis)
        <ul>
          <li>You change your idea of what is acceptable based on the people around you</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Keep the switch going
    <ul>
      <li>Mere exposure principle: change becomes more favorable as people get used to
it
        <ul>
          <li>Ex: Eiffel tower. People thought it was ugly at first (protests, etc.)</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/01/27/switch/</guid>
                <description>
                    
                    How to drive behavior change: Direct the rider. Motivate the Elephant. Shape the path.
                    
                </description>
                <pubDate>Sun, 27 Jan 2019 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Keith Rabois - If You Can't Sell Them, Compete With Them</title>
                <link>http://tigerthinks.com/2019/01/21/keith-rabois/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>We cover a lot, but one thing we kept returning to was business strategy.
Keith’s frameworks for gaining and building strategic power helped me clarify my
thinking on the topic, and his examples of contrarian thinking will hopefully
make you question some commonly held beliefs.</li>
  <li>What problem am I trying to solve</li>
  <li>How do I get the right people to solve it</li>
  <li>How do I convince people I’ve solved it</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/01/21/keith-rabois/</guid>
                <description>
                    
                    Mental models from an investor who has held senior positions at big companies.
                    
                </description>
                <pubDate>Mon, 21 Jan 2019 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>What Truly Makes a Senior Developer</title>
                <link>http://tigerthinks.com/2019/01/20/what-truly-makes-a-senior-developer/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Junior developers know one way to solve a problem, usually based on tutorials
or something they did in school. It’s almost certainly using some trendy
framework.</li>
  <li>Mid-level developers understand that every problem exists as part of a larger
system and worry about maintainability, code quality, and so on but still don’t
see the big picture. They tend to get more hung up on the process.</li>
  <li>Senior developers understand that nothing is without possible issues,
downsides, and risks. Their choices are not about what’s cool or “correct”
according to some book as much as they are about holistic risk management
across the entire team. They care about what’s going to be easy to maintain,
easy to teach, and easy to debug.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/01/20/what-truly-makes-a-senior-developer/</guid>
                <description>
                    
                    Senior developers understand that nothing is without possible issues, downsides, and risks.
                    
                </description>
                <pubDate>Sun, 20 Jan 2019 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>The Defining Decade</title>
                <link>http://tigerthinks.com/2019/01/20/the-defining-decade/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: Mostly stories. Entertaining read, not much actionable. Good reminders
to get my ass into gear.</p>

<h2 id="notes">Notes</h2>

<ul>
  <li>80% of life’s most significant events happen before 35</li>
</ul>

<h3 id="work">Work</h3>

<ul>
  <li>20-somethings are like airplanes. A small course change right after takeoff wlil
make a huge difference. A small course change close to destination won’t
matter much</li>
  <li><strong>Identity capital</strong>: collection of personal assets. Repertoire of individual
resources we assemble over time. Investments in ourselves, things we do well
enough that they become part of who we are
    <ul>
      <li>Resume pieces and personal pieces</li>
      <li>Currency for purchasing jobs, relationships, other things we want</li>
    </ul>
  </li>
  <li>You can’t think your way through life</li>
  <li>Urbanization has killed weak ties
    <ul>
      <li>“Strength of Weak Ties” (Granovetter)
        <ul>
          <li>75% of new jobs come from weak ties</li>
        </ul>
      </li>
      <li>Because they’re not just figures in an already ingrown cluster, weak ties
give us access to something fresh</li>
    </ul>
  </li>
  <li>Ben Franklin effect: if someone does you a favor, they’re more likely to think
they like you
    <ul>
      <li>Behaviors shape attitudes</li>
    </ul>
  </li>
  <li><strong>Unthought known</strong>: we know about ourselves but we forget (dreams, truths,
acknowledgements)</li>
</ul>

<h3 id="love">Love</h3>

<ul>
  <li>Roulette</li>
  <li>Marrying later protects against divorce until about age 25</li>
  <li>People feel an “Age Thirty Deadline”</li>
  <li>Best time to work on marriage is before you have one</li>
  <li>YAVIS: young, attractive, verbal, intelligent, successful – give advantages
but makes it hard when you want to seek help</li>
  <li>You are <strong>picking a family</strong> when you get into relationships</li>
  <li>The <strong>cohabitation effect</strong> is that couples who live together before marriage
are more likely to divorce than couples who do not
    <ul>
      <li>“Sliding, not deciding”. Things get fuzzy</li>
    </ul>
  </li>
  <li>Do a Big Five test with each other</li>
  <li>Be picky about stuff that matters in 20 years, not about everyday
discrepancies</li>
</ul>

<h3 id="the-brain-and-the-body">The Brain and the Body</h3>

<ul>
  <li>Frontal lobe development in adolescence and 20s. Most neuroplastic you will
ever be again</li>
  <li>If you don’t feel anxious, you’re either overconfident or underemployed</li>
  <li>Don’t take things personally</li>
  <li>Confidence comes from mastery experiences</li>
  <li>Most personality change happens in 20s</li>
  <li>Fertility risks are real :(
    <ul>
      <li>Per-cycle odds of conception are 20-25% up to age 35</li>
      <li>Sharp drop to 5% at 40</li>
      <li>Miscarriages: 1/4 of after-35 pregnancies and 1/2 of after-40 pregnancies</li>
    </ul>
  </li>
  <li><strong>Present bias</strong>: people discount the future all the time</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/01/20/the-defining-decade/</guid>
                <description>
                    
                    Mostly anecdotes and stories about how the 20s are high-stakes but not treated appropriately by people going through them. Entertaining read, not much actionable. Wish there was more data. Good reminders to get my ass into gear.
                    
                </description>
                <pubDate>Sun, 20 Jan 2019 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Coolest Things I Learned in 2018</title>
                <link>http://tigerthinks.com/2019/01/20/coolest-things-i-learned-in-2018/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Whenever there is a market fad/phenomena with low or no barriers and a flood
 of entrants—the best strategy is often: Be the arms dealer.</li>
  <li>The lowest profile players in high-profile, low-barrier industries are
almost always the most profitable.</li>
  <li>Don’t sell wine, sell barrels.</li>
  <li>Don’t make movies, create animation software.</li>
  <li>Don’t own restaurants, build the restaurant supply company.</li>
  <li>Feynman: Instead of arbitrarily memorizing things, look for the explanation
that makes it obvious.</li>
  <li>“Avoid boring people” - Jim Watson, co-discoverer of DNA</li>
  <li>A Simple Formula for Writing Better Hooks
    <ul>
      <li>“Get 3 yes’s in 30 seconds.”</li>
      <li>Readers should nod their head yes to the headline, subheading, and first
sentence.</li>
      <li>If they’ve made it to the third sentence, they’re ready for an interesting and
compelling story.</li>
    </ul>
  </li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/01/20/coolest-things-i-learned-in-2018/</guid>
                <description>
                    
                    Assorted snippets from the author of Monday Musings
                    
                </description>
                <pubDate>Sun, 20 Jan 2019 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Freakonomics Radio Live: The World's a Mess. But Oysters, They Hold it Down.</title>
                <link>http://tigerthinks.com/2019/01/19/the-worlds-a-mess-but-oysters-they-hold-it-down/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Celebrity chef Alex Guarnaschelli joins us to co-host an evening of delicious
fact-finding: where a trillion oysters went, whether a soda tax can work, and
how beer helped build an empire. Washington Post columnist Alexandra Petri is
our real-time fact-checker.</li>
  <li>Hypo and hypercognition</li>
  <li>Cardiologists overdiagnose heart attacks</li>
  <li>We don’t see that we don’t see it</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/01/19/the-worlds-a-mess-but-oysters-they-hold-it-down/</guid>
                <description>
                    
                    Oysters, soda tax, beer empire. Pulled the important concept of hypo- and hyper-cognition out.
                    
                </description>
                <pubDate>Sat, 19 Jan 2019 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Beginner's Health and Fitness Guide</title>
                <link>http://tigerthinks.com/2019/01/18/beginners-health-and-fitness-guide/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<h3 id="part-i-opening-qa-and-general-myth-busting">PART I: OPENING Q&amp;A AND GENERAL MYTH-BUSTING</h3>

<ul>
  <li>The methods for improving fitness are actually very well understood, and, aside
from minor matters of detail, have changed very little in the last 30 years or
so. Most of the seeming contradictions in fitness advice are really just
hairsplitting arguments over matters of detail that need not concern the
beginner, or are due to hucksters peddling utter garbage. There is almost
universal consensus among knowledgeable people about what works and what
doesn’t. That’s what this guide is based on.</li>
  <li>There are two basic considerations: diet and exercise. The same advice for each
applies to almost everyone. The exceptions are at the extremes, e.g. the very
obese needing to lose immense amounts of weight to stay alive, and the people
pursuing extreme levels of performance or muscular development. Both of those
are beyond the scope of this guide.</li>
  <li>If you do ab exercises, do them holding a heavy plate and in the 5-10 repetition range.</li>
</ul>

<h3 id="part-ii-mindset">PART II: MINDSET</h3>

<ul>
  <li>You can’t look at diet or exercise as a short-term ordeal that ends at some
point when you aren’t out of shape anymore. They must be seen as long-term
lifestyle changes. That sounds kind of scary, but is actually not a big deal
when you think about it, and once you start seeing results you will be
motivated to continue.</li>
  <li>You get in shape, and more importantly stay in shape, by accumulating
significant, but livable, improvements to your lifestyle over time, and
building on that.</li>
  <li>You can lose about 1-2 lbs of fat or build around .5 lbs of muscle a week as a male</li>
  <li>Be persistent and be patient</li>
</ul>

<h3 id="part-iii-diet">PART III: DIET</h3>

<ul>
  <li>In the end, it really is calories in and calories out. Everything else is just
fiddling around the edges of this basic fact.</li>
  <li>As a rule of thumb, if it was part of a traditional diet, if you could make it
by hand, it is good (eggs, butter, olive oil, oatmeal, fruit, …), if not, it’s
not (margarine, soda, pizza, gummi bears …).</li>
  <li>Carbohydrates, fats and proteins are all known as macronutrients. All are
necessary, and none are evil per se. To summarize:
    <ul>
      <li>Carbohydrates (“carbs”). 4 calories per gram. Despite what you may have
heard, these are not evil. They are a necessary source of energy for your
body. The problem is that people over-consume certain sources of
carbohydrates, most notably simple sugars from soda and candy, and starches
from white bread. However, if you have to cut down on one macronutrient, cut
down on carbohydrates. People in Western cultures consume far too many
carbohydrates on average.</li>
      <li>Proteins. 4 calories per gram. Protein is formed by a linked chain of amino
acids, which are necessary for your body to maintain and repair damage to
its muscles. Most people get enough protein, though an intense exercise
program may call for eating more for optimal results. Protein helps you lose
fat, build muscle, fills you up so you’re less hungry,
supports lean body mass (muscle) over flabby and unhealthy body mass
(fat), helps you recover better from all kinds of exercise, decreases
soreness, and helps to keep off weight loss (combating the yoyo effect).</li>
      <li>Fats. 9 calories per gram. Fats are not evil, either. Eating dietary fat
does not mean that body fat will instantly appear on your gut or ass; your
body doesn’t work that way. Fats perform a variety of necessary functions.
The problem is that people over-consume saturated fats and trans fats, which
raise LDL (“bad”) cholesterol and lower HDL (“good”) cholesterol, and
under-consume healthy fats like monounsaturated fats (found in high
concentrations in olive oil and canola oil) and Omega-3 fatty acids (found
in fish, flax seed oil and other sources). Fats also have more calories
ounce-for-ounce than carbohydrates and proteins, making very high fat foods
very calorie-dense, which is where the bad reputation often stems from.</li>
    </ul>
  </li>
  <li>In the end, it’s about persistence, patience, protein and calories. If your
diet of choice gets these 4 right, it will work. If not, it wont.</li>
  <li>If there is one supplement that everyone should take, this is it. Don’t focus
on total mg of fish oil; instead, take enough fish oil to get a total of
approximately 720mg of EPA and 480mg of DHA a day.</li>
  <li>Creatine improves numerous aspects of strength and power. The average increase
may be around 5%.</li>
  <li>The idea that eating after a certain time will cause the body to store such
calories as fat is a myth.</li>
  <li>Starving is a bad way to lose weight.
    <ul>
      <li>Your metabolism slows down. Your body will burn fewer calories to maintain
itself, and you will feel awful. This is bad for weight loss because as soon
as you quit starving yourself, you’ll gain weight fast because your
metabolism has bottomed out.</li>
      <li>You will tend to lose muscle more than fat. Your body will naturally try to
conserve fat and cannibalize muscle if it thinks it is outright starving.
This is bad because your real goal is FAT loss, not weight loss. This is how
you have people who lose 100 pounds and reach their “ideal” weight, but
still look amazingly flabby. Also, losing muscle slows your metabolism down
even further, amplifying the giant horrible rebound effect once you quit
starving yourself.</li>
      <li>Your life will be a living hell. You’ll eventually feel horrible, the diet
will fail, and you’ll binge eat and regain everything you lost, plus
interest.</li>
    </ul>
  </li>
</ul>

<h3 id="part-iv-exercise">PART IV: EXERCISE</h3>

<ul>
  <li>Lifting burns tons of calories, and lifting weights while dieting will cause
you to retain more muscle and lose more fat than just diet and/or cardio.
Because the name of the game when it comes to not looking awful is FAT LOSS,
not weight loss. Do you want to be that guy who loses lots of weight and still
looks flabby and useless? Of course not.</li>
  <li>Cardio is good for everyone because it improves your overall endurance and
ability to exert yourself over an extended period. It promotes cardiovascular
health and contributes to increased bone density. Additionally, it pretty much
makes everything else function better: cardio helps stabilize hormone levels
(increasing testosterone and increasing insulin sensitivity), improves
endurance and recovery, helps the body fuel calories away from the fat cells
and into the muscle, helps with weight maintenance/preventing the “yo-yo
effect”, generally keeps you healthy, and finally burns calories.</li>
  <li>Compound is much better than isolation (1 joint), especially for beginners, for several reasons.
    <ul>
      <li>They do a much better job of stimulating overall muscle growth and
development than isolation movements.</li>
      <li>They allow you to work out more efficiently. You can hit every major muscle
group with a small number of exercises.</li>
      <li>They more closely resemble ways you will exert your body in real life. They
are better at producing practical, useful strength.</li>
    </ul>
  </li>
  <li>Good workout programs work out the entire body</li>
  <li>Move a substantial amount of weight</li>
  <li>Barbells and dumbbells, not machines</li>
  <li>Track your progress in writing!</li>
</ul>

<h3 id="part-v-measuring-progress">PART V: MEASURING PROGRESS</h3>

<h3 id="part-vi-more-questions--answers">PART VI: MORE QUESTIONS &amp; ANSWERS</h3>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/01/18/beginners-health-and-fitness-guide/</guid>
                <description>
                    
                    Thoroughly-cited and comprehensive baselines for health. Recommend to everyone.
                    
                </description>
                <pubDate>Fri, 18 Jan 2019 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>#1213 - Dr. Andrew Weil</title>
                <link>http://tigerthinks.com/2019/01/16/dr-andrew-weil/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Dr. Andrew Weil is a physician, author, spokesperson, and broadly described
“guru” of the alternative medical brands: holistic health and integrative
medicine.</li>
  <li>Mind body is crazy</li>
  <li>Allergy gone by LSD</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/01/16/dr-andrew-weil/</guid>
                <description>
                    
                    Combining 'scientific' and 'holistic' medicine. Interesting perspective.
                    
                </description>
                <pubDate>Wed, 16 Jan 2019 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>MkCert: Valid HTTPS Certificates for LocalHost</title>
                <link>http://tigerthinks.com/2019/01/15/mkcert/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/01/15/mkcert/</guid>
                <description>
                    
                    Use HTTPS locally to remove difference with production
                    
                </description>
                <pubDate>Tue, 15 Jan 2019 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Harry Potter and the Methods of Rationality</title>
                <link>http://tigerthinks.com/2019/01/14/hpmor/</link>
                <content:encoded>
                    <![CDATA[
                    <p>Tiger is a self-taught software and machine learning engineer who has been
working full-time in the industry since he was 15. He is currently working on a
startup in Denver.</p>

<p><em>TL;DR</em>: Adapts the story of Harry Potter by attempting to explain wizardry
through the scientific method. I don’t think I was smart enough to get all of
the content about rationality but I enjoyed the story.</p>

<h2 id="notes">Notes</h2>

<p>Really long and unfortunately the book and my notes/highlights are not
making an appearance on my computer clients. I have had trouble with concrete
takeaways, but I found a few summaries that do a decent job if I want a quick
refresher. (sources:
http://www.anarchyishyperbole.com/p/previously-on-harry-potter-and-methods.html, https://www.reddit.com/r/HPMOR/comments/22vqhx/chapter_by_chapter_summary_of_hpmor_without/).
Maybe will come back at a later date once I can wrap my head around
more of the book.</p>

<p>–</p>

<p>The Boy-Who-Lived was raised by Petunia Evans and her husband, Oxford professor
of physics Michael Verres.  He grew up in a loving home and was raised to revere
the scientific method and its results.  When he discovered he was a wizard,
Harry Potter-Evans-Verres was shocked at the backwards world he found – a
society that was almost feudal, a school hardly worthy of the name, and a
distinct lack of optimization.  Harry’s quest to rectify these flaws was quickly
derailed by the plotting of his mentor Professor Quirrell, a Defense Against the
Dark Arts teacher who was actually the Dark Lord Voldemort, and who seeks the
Philosopher’s Stone.</p>

<p>Working with Hermione Granger and (separately and secretly) with Draco Malfoy,
Harry did his best to navigate the challenges of his first year: fighting in
mock battles in Defense class, inventing partial Transfiguration, denouncing the
abusive Professor Snape, devising a new Patronus that can destroy Dementors,
breaking an innocent out of Azkaban, and angrily pointing out the flaws of
Quidditch.  But his worst fears are realized when Hermione is murdered.  Harry
vows that he will keep to the old words of the Potter family… “the last enemy
that shall be defeated is death.”</p>

<p>At the climax of the story, Voldemort’s plot to retrieve the Philosopher’s Stone
succeeded.  In the process, Dumbledore was defeated and banished beyond time,
while Hermione was resurrected and imbued with the regenerative powers of a
troll and a unicorn to keep her alive.  Voldemort revealed that the
Philosopher’s Stone’s power was actually to make any Transfiguration permanent,
even a human one, and that his overriding concern was to prevent a prophecy that
predicts Harry will destroy the very stars in heaven in his vain questing to
optimize the world.  He further revealed that the curse he cast on Harry as a
child left an imprint of Voldemort’s own thinking on the child, explaining some
of Harry’s mysterious “dark side.”  Harry was surrounded by Death Eaters, and
Voldemort demanded any secrets he might possess,</p>

<p>Calling upon all his ingenuity, Harry used partial Transfiguration to kill all
of his enemies at a blow, except Voldemort, whom he captured.  He took up the
Stone of Permanency, and returned to school to take control: to discover the
source of magic, to end the injustices in the world, and to destroy death.</p>

<p>ch 1 – Test things to see if they are true.</p>

<p>ch 2 – Establish the parameters of your experiment carefully before performing
it. You can’t make little changes to the laws of physics without breaking
everything else.</p>

<p>ch 3 – You can scare a much larger group into submission by killing anyone who
tries to speak out. Critical thinking is the hardest when it’s most important.</p>

<p>ch 4 – Successful entrepreneurship requires taking advantage of a money-making
opportunity before everyone else realizes it exists. Knowing how to do Fermi
calculations will make you smarter.</p>

<p>ch 5 – The way people behave depends on circumstances just as much as
personality.</p>

<p>ch 6 – When planning things, take into account that things usually go worse
than planned.</p>

<p>ch 7 – You can never have too many books. When you give someone something for
free and then ask for something in return, they feel obligated to reciprocate
even if they wouldn’t have agreed to the trade.</p>

<p>ch 8 – It’s more important what a hypothesis rules out than what it allows.</p>

<p>ch 9 – It’s hard to explain something to someone with a completely different
worldview.</p>

<p>ch 10 – Don’t do things that might destroy the world just to indulge your
personal pride. Things have moral value if they are aware of their own
awareness.</p>

<p>ch 11 – You can’t give Ender a wand without giving the hive queen a horcrux.
Songs in fanfics are really bad. It is hard to be too pessimistic.</p>

<p>ch 12 – Not becoming evil requires conscious effort.</p>

<p>ch 13 – Sufficiently powerful magic is indistinguishable from Dada.</p>

<p>ch 14 – There is a perfectly reasonable explanation for everything; things only
seem strange because of your own ignorance.</p>

<p>ch 15 – Competition is a powerful motivator.</p>

<p>ch 16 – Talking about other people as objects to be manipulated makes you look
like a sociopath.</p>

<p>ch 17 – Sometimes the hardest part of finding answers is figuring out where to
look.</p>

<p>ch 18 – Status hierarchies seem very important when you happen to be on top.</p>

<p>ch 19 – It’s easy to fixate on complicated explanations when you have no idea
what’s really going on. Sometimes it’s wise to swallow your pride and let
someone else (seem to) win.</p>

<p>ch 20 – For something to act as evidence for a proposition, it has to be more
likely if the proposition is true than if the proposition is false. Hints that
seems obvious to a writer may be missed completely by readers.</p>

<p>ch 21 – Sometimes goals are just stories people tell to explain their own
behaviour. There is no point making up complex arguments if you’ve already
decided on your conclusion.</p>

<p>ch 22 – The trouble with science is you find out when you’re wrong.</p>

<p>ch 23 – Don’t try to make yourself believe something if you know it isn’t true.</p>

<p>ch 24 – The reason people are so smart is so they can outsmart other people.</p>

<p>ch 25 – It’s a good idea to discuss a problem thoroughly before suggesting
solutions, so you don’t become too attached to your first idea.</p>

<p>ch 26 – When two pieces of data are contradictory, one of them must be false.</p>

<p>ch 27 – To outsmart someone, you have to be slightly trickier than they think
you are. Don’t underestimate or trivialize the pain of others.</p>

<p>ch 28 – Complex systems are entirely explained by the behaviour of low-level
interactions.</p>

<p>ch 29 – Everyone thinks they are the hero of their own story.</p>

<p>ch 30 – People will do anything for the sake of military simulation.</p>

<p>ch 31 – Don’t try to do everything by yourself.</p>

<p>ch 32 – To win people over, word things in a way they find appealing.</p>

<p>ch 33 – The current release of the human brain does not correctly implement
Hofstadterian superrationality.</p>

<p>ch 34 – People are so bad at working together that sometimes dictatorship works
better than democracy.</p>

<p>ch 35 – People are so evil that that democracy is usually preferable to
dictatorship.</p>

<p>ch 36 – Relationships are hard because not everyone involved sees them the same
way. Personal interactions get messy when everyone is trying to assert their
dominance.</p>

<p>ch 37 – It’s nice when two people are willing to put pride and pretense aside
and speak openly.</p>

<p>ch 38 – Don’t go making stuff up when you have no idea what you’re talking
about.</p>

<p>ch 39 – Just because something sounds deep doesn’t mean it’s true.</p>

<p>ch 40 – If you really believed something, you’d act like it were were true.</p>

<p>ch 41 – But sometimes it’s really hard to convince your animal brain to act on
intellectual beliefs.</p>

<p>ch 42 – Then again, when your brain tells you not to jump off a cliff, it might
be right.</p>

<p>ch 43 – Being good means valuing human life.</p>

<p>ch 44 – Only true love can thaw a frozen heart.</p>

<p>ch 45 – To value life should mean to defy the necessity of death.</p>

<p>ch 46 – If knowing something is likely to hurt someone, just don’t tell them.</p>

<p>ch 47 – If you can’t understand how someone could believe something, you might
be missing something important. For the sake of humanity, put aside your tribal
allegiances and accept the moral worth of every human being.</p>

<p>ch 48 – Accepting the moral worth of others is a bit of a slippery slope.
Ethics is fine, but don’t forget to be nice to people as well.</p>

<p>ch 49 – If you want to look smart, it helps to figure out the answers in
advance.</p>

<p>ch 50 – People don’t always think about how their actions hurt others until
they themselves are hurt.</p>

<p>ch 51 – Deciding to trust someone is a large and dangerous decision.</p>

<p>ch 52 – Prisons sound pretty awful when you think about it. The Bayesian
Conspiracy offers its support to Amanda Knox.</p>

<p>ch 53 – Perfect crimes could happen all the time and nobody would know.</p>

<p>ch 54 – A plan may fail if it doesn’t take into account the emotional states of
the human beings expected to carry it out.</p>

<p>ch 55 – Depression is dangerous because it makes you unable to remember why
happiness is worthwhile.</p>

<p>ch 56 – The great superpower of the human brain is its ability to generate
solutions to ridiculously constrained problems.</p>

<p>ch 57 – It’s hard to think clearly if you stop yourself thinking certain
thoughts.</p>

<p>ch 58 – When trapped in a dilemma, select a preferred option and then search
for a way out.</p>

<p>ch 59 – Try to find out how things work rather than just accepting them because
they seem normal. When you suspect something, everything looks like evidence of
it.</p>

<p>ch 60 – People allow many terrible things to happen because they don’t expect
to be personally affected. Don’t point a gun at someone if you don’t want them
dead.</p>

<p>ch 61 – Time travel is confusing.</p>

<p>ch 62 – Don’t routinely accept non-minuscule chances of total disaster.
Compromises unthinkable to an idealist may sometimes be justified.</p>

<p>ch 63 – Lying is dangerous, because you have to keep telling more lies to cover
it up. Don’t let yourself get so swept up in a narrative that you don’t think
about what you’re actually doing. People will do things they know are evil if
they’re too embarrassed to protest.</p>

<p>ch 64 – Don’t forget to get some sleep.</p>

<p>ch 65 – When you don’t want to believe something that’s true, it’s easy to get
into the habit of lying and thinking other people are lying. Growing up happens
not as a result of age, but of being through hard adult experiences.</p>

<p>ch 66 – Hesitation is always easy but seldom useful. Decide right now what
information you will need and what decision you will make depending on the
information you get.</p>

<p>ch 67 – Aim for the head when fighting someone wearing body armour. Don’t keep
trying strategies that aren’t working.</p>

<p>ch 68 – People disagree on what it means to be “who you were meant to be” but
think it’s a good idea.</p>

<p>ch 69 – People don’t always achieve their potential because they get bad ideas
from their environment. Helping people feels good, but being a true hero isn’t
fun or easy.</p>

<p>ch 70 – It isn’t sexism if they act that way with everyone.</p>

<p>ch 71 – Feminism should be about women being free to be who they want to be,
not trying to pretend they don’t care at all about men.</p>

<p>ch 72 – If you lie too much, people won’t believe things you say. If you refuse
to answer questions, people won’t know what to think.</p>

<p>ch 73 – Making every other paragraph a flashback makes the story hard to
understand. Knowledge is better than ignorance, because not knowing about a
problem doesn’t make it go away.</p>

<p>ch 74 – You should think before you do things.</p>

<p>ch 75 – When you try to be sensible, your friends might not understand you.
Consent is important. Being a hero means doing whatever you can to help, not
worrying about whose fault it is or whether it ought to be someone else’s job.</p>

<p>ch 76 – Sometimes you can get good ideas by talking to well-meaning clueless
people.</p>

<p>ch 77 – Sometimes it’s better to “lose” a small conflict than escalate it and
raise the stakes. But some things are worth fighting for. Memory-wiping magic is
OP.</p>

<p>ch 78 – Unflinchingly discard ideas that are appealing in some sense but
ultimately flawed.</p>

<p>ch 79 – Sometimes people assess the quality of an argument based on who they
usually hear using it, rather than its quality.</p>

<p>ch 80 – When you think of someone as “bad” for some reason, it’s easy to keep
seeing more bad things about them. People are too quick to heap hate on
unpopular people when they should urge restraint.</p>

<p>ch 81 – It’s hard to give up large amounts of money, even for a good cause.</p>

<p>ch 82 – Sometimes we act contrary to game theory to protect those we love.</p>

<p>ch 83 – Rumours aren’t always true.</p>

<p>ch 84 – People like to do what everyone else is doing, even if they know it’s
wrong.</p>

<p>ch 85 – It’s really hard to say what’s good and bad, and what’s justified in
pursuit of a good cause.</p>

<p>ch 86 – Consider multiple explanations and use Bayes’ Theorem to consider the
likelihood of each.</p>

<p>ch 87 – A lot of the things we do are because of small rewards and punishments.
Evolutionary psychology is a bad topic to bring up when someone asks you what
your relationship with them means.</p>

<p>ch 88 – Don’t waste time thinking about things that aren’t helping you solve
the problem.</p>

<p>ch 89 – There is no God.</p>

<p>ch 90 – Sometimes people act like they imagine the person others see them as
would, rather than doing what is actually smart.</p>

<p>ch 91 – You can’t learn from books what it’s like to be Severus Snape. It sucks
to live in a society where you have no rights.</p>

<p>ch 92 – It’s a good idea to think of doing things before it’s too late, rather
than after.</p>

<p>ch 93 – Sometimes people will step outside their “roles” and exceed your
expectations.</p>

<p>ch 94 – Life isn’t fair and it’s really scary to fight people who are smart.</p>

<p>ch 95 – Just because someone doesn’t do something that would help others
doesn’t mean they don’t care about them.</p>

<p>ch 96 – Throughout most of history people have been unable to stop death. But
maybe we can.</p>

<p>ch 97 – Getting a lawyer is a good idea.</p>

<p>ch 98 – Don’t let your real enemies trick you into fighting people who could be
your friends.</p>

<p>ch 99 – Apparently we’re doing the forbidden forest scene.</p>

<p>ch 100 – Consider the worst thing that could happen and take precautions.</p>

<p>ch 101 – What actually happens will probably be worse.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/01/14/hpmor/</guid>
                <description>
                    
                    Adapts the story of Harry Potter by attempting to explain wizardry through the scientific method. I don't think I was smart enough to read this.
                    
                </description>
                <pubDate>Mon, 14 Jan 2019 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Putting Mental Models to Practice</title>
                <link>http://tigerthinks.com/2019/01/13/putting-mental-models-to-practice/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<h3 id="part-1">Part 1</h3>

<ul>
  <li>The first — and probably the single most important — principle is to ‘let
reality be the teacher’. That is — if you have some expectations of a
technique and try it out, and then it doesn’t work — either the technique is
bad, or the technique is not suitable to your specific context, or your
implementation of the technique is bad, or your expectations are wrong.</li>
  <li>When it comes to practice, one should pay attention to actual practitioners.
This is because their approaches have been tested by reality.</li>
  <li>Without explanation, my framework is as follows:
    <ul>
      <li>Use intelligent trial and error in service of solving problems. This means two
sub-approaches: first, using the field of instrumental rationality to get more
efficient at trial and error. Second, using a meta-skill I call ‘skill
extraction’ to extract approaches from practitioners in your field.</li>
      <li>Concurrently use the two techniques known for building expertise (deliberate
practice and perceptual exposure) to build skills in order to get at more
difficult problems.</li>
      <li>Periodically attempt to generalise from what you have learnt during the above
steps into explicit mental models.</li>
    </ul>
  </li>
</ul>

<h3 id="part-2-an-introduction-to-rationality">Part 2: An Introduction to Rationality</h3>

<ul>
  <li>We may now see that Farnam Street’s list of mental models is really a list of three types of models:
    <ul>
      <li>Descriptive mental models that come from domains like physics, chemistry,
economics, or math, that describe some property of the world.</li>
      <li>Thinking mental models that have to do with divining the truth (epistemic
rationality) — e.g. Bayesian updating, base rate failures, the availability
heuristic.</li>
      <li>Thinking mental models that have to do with decision making (instrumental
rationality) — e.g. inversion, ‘tendency to want to do something’,
sensitivity to fairness, commitment &amp; consistency bias.</li>
    </ul>
  </li>
</ul>

<h3 id="part-3-better-trial-and-error">Part 3: Better Trial and Error</h3>

<ul>
  <li>The search inference framework states that all of thinking can be modelled as
a search for Possibilities, Evaluation Criteria (that Baron calls ‘Goals’),
and Evidence. In addition to a process of search, a process of inference also
happens as we strengthen or weaken the possibilities, by weighing the evidence
we have found for each possibility in accordance to a set of evaluation
criteria.</li>
  <li>The search-inference framework, then, concerns three objects:
    <ul>
      <li>Possibilities are possible answers to the original question. In this case
they are the course options you may take.</li>
      <li>Evaluation criteria (or ‘goals’, as Baron originally calls them) are the
criteria by which you evaluate the possibilities. You have three goals in
the above example: you want an interesting course, you want to learn
something about modern history, and you want to keep your work load
manageable.</li>
      <li>Evidence consists of any belief or potential belief that helps you determine
the extent to which a possibility achieves some goal. In this example, the
evidence consists of your friend’s report that the course was interesting
and the work load was heavy. At the end of the example, you resolved to find
your friend Sam for more evidence about the work load on the second course.</li>
    </ul>
  </li>
  <li>Imagine that you are a college student trying to decide which courses you will
take next term. You are left with one elective to select, having already
scheduled the required courses for your major. The question that starts your
thinking is “which course should I take?”
    <ul>
      <li>You search for possibilities — that is, possible course options — by
searching internally (from your memory) and externally (from the course
catalog website, and from your friends). As you perform this search, you
determined the good features of two courses, some bad features of one
course, and a set of evaluation criteria, such as the fact that you don’t
want a heavy course load for this elective. You also made an inference: you
rejected the course on Soviet-American relations because the work was too
hard.</li>
    </ul>
  </li>
  <li>The dominant approach in decision science is something called  expected
utility theory, which was created by Daniel Bernoulli in 1738. It asserts that
a person acts rationally when they choose that which maximises their utility —
that is, whatever decision it is that brings them the most benefits in pursuit
of their goals.
    <ul>
      <li>The overall expected utility for a given option is the sum of all the states and probabilities.</li>
      <li>Visualize dat bitch</li>
      <li>Von Neumann-Morgenstern Rationality Axioms</li>
    </ul>
  </li>
  <li>While expected utility theory is sometimes used for decision analysis —
especially in business and in medicine — it is too impractical to recommend as
a general decision-making framework. As Baron puts it: “search has negative
utility”. The more time you spend analysing a given decision, the more
negative utility you incur because of diminishing returns.</li>
  <li>The second problem with using expected utility theory as a personal
prescriptive model is that, in the real world, judgments and results actually
matter</li>
  <li>field of naturalistic decision making. This world view stems from the premise
that we cannot know the state of the world, that we do not have the mental
power to make comprehensive searches or inferences, and that we should build
our theories of decision making by empirical research — that is, find out what
experts actually do when making decisions in the field, and use that as the
starting point for decision making.</li>
  <li>The second view is the view of Munger, Baron, Tversky, Kahneman, and
Stanovich: that of rational decision analysis. This is the world view that we
have explored for most of this essay. It assumes that you want to make the
best decisions you can, perhaps because they are not reversible</li>
  <li>What have we covered in this essay? We’ve covered the basics of trial and
error, and the five ways it may fail. We have covered Baron’s search-inference
framework of thinking, and used it as an organising framework for mental
models of decision making. We have covered the foundations of decision science
— or at least, the foundations of decision science as related to instrumental
rationality. You now understand the basics of expected utility theory — the
normative model that is used as the goal of mental models in decision making.</li>
  <li>Mind map</li>
</ul>

<h3 id="part-4-expert-decisionmaking">Part 4: Expert Decisionmaking</h3>

<ul>
  <li>Recognition-primed decision making (henceforth called RPD) is a descriptive
model of decision-making: that is, it describes how humans make decisions in
real world environments. RPD is one of the thinking models from the field of
Naturalistic Decision Making (NDM), which is concerned with how practitioners
actually make decisions on the job.</li>
  <li>Memorize final RPD model</li>
  <li>What are considered sources of bias in rational choice analysis are considered strengths in the RPD model.
    <ul>
      <li>Availability/representativeness heuristics</li>
    </ul>
  </li>
  <li>I believe that most of us work in domains that have what Kahneman and Klein
call “fractionated expertise”. (In the 2009 paper they state that they believe
most domains are fractionated). Fractionated expertise means that a
practitioner may possess expertise for some portion of skills in the field,
but not for others.</li>
  <li>The most powerful lesson from their joint paper is that in fields with
fractionated expertise, it is incredibly important to recognise where one has
expertise and one does not.</li>
  <li>Here’s where we tie the two threads together. I think trial and error is how
most of us will build expertise in our careers — a direct result of the lack
of theory and insight for many practicable areas of interest. Even
practitioners in areas with good theory — such as medicine, engineering, or
computer programming — must spend a large amount of their time developing
expertise through experience and practice.</li>
  <li>How do you know that you are getting better? For this, I think we should look
to what actual practitioners do. In Principles, Ray Dalio suggests that we may
use the class of problems we experience in our lives to gauge our progress.
That is, while you might not be able to evaluate the results of a trial and
error cycle immediately, you may, over time, observe to see if the problems
that belong to that class seem to become easier to deal with. If you find that
problems in that class no longer pose much of a challenge for you, then you
may conclude that your collection of ‘principles’ or approaches are working
and that you have improved.</li>
  <li>That said, I think that everyone who is interested in decision making should
pay attention to the nature of expert intuition. The adoption of intuitive
decision-making as part of US military doctrine (in 2003) and the growth of
NPD-based training programs for soldiers, nurses and firefighters is telling.
The form of decision making that most of us do is recognition-primed decision
making, not rational choice selection. We should pay close attention to what
we actually use and figure out ways to improve it, instead of improving what
we are told to use (but rarely do).</li>
</ul>

<h3 id="part-5-skill-extraction">Part 5: Skill Extraction</h3>

<ul>
  <li>Klein argues that we should adhere to two common-sense principles: first, we
must find substitutes for real-world experience for the specific subskills
where we can’t practice in the real world. Second, we must get the most out of
every experience that we are able to get.</li>
  <li>His strategy for developing expertise-driven decision making, then, is
four-fold:
    <ul>
      <li>First, identify discrete decision points in one’s field of work. Each of
these decision points represent discrete areas of improvement you will now
train deliberately for.</li>
      <li>Second, whenever possible, look for ways to do trial and error in the course
of doing. For instance, run smaller, cheaper experiments instead of
launching the full-scale project you’re thinking of. Look for quick actions
that you may use to tests aspects of your domain-specific mental models.
This is, of course, not always possible. Which leads us to —</li>
      <li>Run simulations where you cannot learn from doing. Klein and co have
developed a technique for running simulations called ‘decision making
exercises’, or DMXs. The DMX style of decision training was originally
developed for Marine Corps rifle squad leaders and officers in 1996. It is
still in use for squad leader training; the version I describe here has been
adapted by Klein for corporate decision makers.</li>
      <li>Fourth, because opportunities for experiences are relatively rare, you
should maximise the amount of learning you can get out of each. Klein has
specific recommendations for decision-making criticism, though it won’t
surprise you to hear that these are very similar to existing recommendations
for after-action reviews. We will mention this only in passing.</li>
    </ul>
  </li>
  <li>The most experienced executives that played this game, however, had uneasy
feelings from the very beginning (around items 5 and 7). These executives saw
the contradiction between starting an internal project to use surplus labour
while downsizing to reduce the labour supply. They picked up on the
implications of the hiring freeze in item 3, and predicted that people were
going to be pulled out from the project when new contracts were announced
(items 5, 7, and 11). When two of Joe’s colleagues quit (item 14), they
surmised that this would further intensify the labour shortage.</li>
  <li>One technique that I’ve found quite useful is NDM’s approach to identifying
decision points.
    <ul>
      <li>Decision Requirements table</li>
      <li>Give examples</li>
    </ul>
  </li>
  <li>Expert decisionmakers:
    <ul>
      <li>Cues let us recognise patterns.</li>
      <li>Patterns activate action scripts.</li>
      <li>Action scripts are assessed through mental simulation.</li>
      <li>Mental simulation is driven by mental models.</li>
    </ul>
  </li>
  <li>Thankfully, Klein and his collaborators have developed a technique for
extracting tacit mental models of expertise. Their overall approach is known
as Cognitive Task Analysis, and the specific method that is of interest to us
as practitioners is known as the ‘critical decision method’, or CDM. This
method requires some skill to use, but the simple form as relayed by Klein in
Sources of Power is practical enough for us to attempt to apply.
    <ul>
      <li>The setup for CDM is to use the human instinct for storytelling to elicit
mental models from the expert practitioner. Don’t ask how they did it — ask
what happened, and then use cognitive probes to tease out their models.</li>
      <li>Someone is defined to be believable if they have a record of at least three
relevant successes, and have a good explanation of their approach when
probed.</li>
    </ul>
  </li>
  <li>The last part of Klein’s decision training is to engage in decision-making
critique.</li>
  <li>It isn’t the best way. It is certainly one good way, and it can be a
worthwhile pursuit given one’s domain. But the approach to decision making
that it inhabits is not the full picture that’s available to us. It isn’t very
effective if you are a novice getting started in some fractionated field.
    <ul>
      <li>Acquiring mental models of expertise represent the other half of good
decision making — and finding a balance between the two approaches appears
to be the increasingly mainstream prescription of decision science (well, if
Klein is to be believed, that is).</li>
    </ul>
  </li>
</ul>

<h3 id="part-6-the-epistemology-of-practice">Part 6: The Epistemology of Practice</h3>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/01/13/putting-mental-models-to-practice/</guid>
                <description>
                    
                    Get the most out of using mental models by applying them deliberately.
                    
                </description>
                <pubDate>Sun, 13 Jan 2019 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Side Hustle: From Idea to Income in 27 Days</title>
                <link>http://tigerthinks.com/2019/01/12/side-hustle/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: Playbook for launching a side hustle. I really need to work on the
“fear” part of launching things.</p>

<h2 id="notes">Notes</h2>

<ul>
  <li>When you have multiple paychecks, you’re no longer dependent on a single
employer</li>
</ul>

<h3 id="week-1-build-an-arsenal-of-ideas">Week 1: Build an Arsenal of Ideas</h3>

<h4 id="day-1-predict-the-fture">Day 1: Predict the Fture</h4>

<ul>
  <li>Create a sustainable and ongoing source of income that makes a real difference
in your quality of life</li>
  <li>Idea should be <strong>feasible, profitable, and persuasive</strong></li>
  <li>Should be able to explain in a sentence or two</li>
</ul>

<h4 id="day-2-learn-how-money-grows-on-trees">Day 2: Learn How Money Grows on Trees</h4>

<ul>
  <li>High-potential idea:
    <ul>
      <li>Describe in one sentence</li>
      <li>Obvious way to make money</li>
      <li>Solves a problem</li>
      <li>Can happen quickly</li>
      <li>Low maintenance</li>
      <li>Can get paid more than once?</li>
    </ul>
  </li>
</ul>

<h4 id="day-3-brainstorm-borrow-or-steal-ideas">Day 3: Brainstorm, Borrow, or Steal Ideas</h4>

<ul>
  <li>Starter idea: sell your own stuff</li>
  <li>Next-level idea: buy other peoples’ stuff, then resell for more</li>
</ul>

<h4 id="day-4-weight-the-obstacles-and-opportunities-of-each-idea">Day 4: Weight the Obstacles and Opportunities of Each Idea</h4>

<h4 id="day-5-forecast-your-profit-on-the-back-of-a-napkin">Day 5: Forecast your Profit on the Back of a Napkin</h4>

<ul>
  <li>Profit = Income - Expenses</li>
  <li>Make a range of projections: Original, Conservative, Optimistic</li>
</ul>

<h3 id="week-2-select-your-best-idea">Week 2: Select Your Best Idea</h3>

<h4 id="day-6-use-the-side-hustle-selector-to-compare-ideas">Day 6: Use the Side Hustle Selector to Compare Ideas</h4>

<h4 id="day-7-become-a-detective">Day 7: Become a Detective</h4>

<h4 id="day-8-have-imaginary-coffee-with-your-ideal-customer">Day 8: Have Imaginary Coffee with Your Ideal Customer</h4>

<ul>
  <li>Every side hustle has a target customer. Start with one “avatar”: single,
specific, imaginary person</li>
</ul>

<h4 id="day-9-transform-your-idea-into-an-offer">Day 9: Transform Your Idea into an Offer</h4>

<ul>
  <li>The Promise: how your hustle will change someone’s life</li>
  <li>The Pitch: why they should purchase or sign up now</li>
  <li>The Price: what it costs to purchase or sign up (and how to do it)</li>
</ul>

<h4 id="day-10-create-your-origins-story">Day 10: Create Your Origins Story</h4>

<ul>
  <li>A narrative of <em>why</em>
    <ul>
      <li>I started this because I noticed <em>blank</em>. There didn’t seem to be anyone else
doing anything about it, so I made <em>blank</em>.</li>
    </ul>
  </li>
</ul>

<h3 id="week-3-prepare-for-liftoff">Week 3: Prepare for Liftoff</h3>

<h4 id="day-11-assemble-the-nuts-and-bolts">Day 11: Assemble the Nuts and Bolts</h4>

<ul>
  <li>Steps everyone needs to take</li>
</ul>

<h4 id="day-12-decide-how-to-price-your-offer">Day 12: Decide How to Price Your Offer</h4>

<ul>
  <li>Product should take into account time spent</li>
  <li>Service should at least match your normal hourly rate</li>
</ul>

<h4 id="day-13-create-a-side-hustle-shopping-list">Day 13: Create a Side Hustle Shopping List</h4>

<h4 id="day-14-set-up-a-way-to-get-paid">Day 14: Set Up a Way to Get Paid</h4>

<ul>
  <li>Don’t re-invent the wheel</li>
</ul>

<h4 id="day-15-design-your-first-workflow">Day 15: Design Your First Workflow</h4>

<ul>
  <li>Repeatable checklist</li>
</ul>

<h4 id="day-16-spend-10-percent-more-time-on-the-most-important-tasks">Day 16: Spend 10 Percent More Time on the Most Important Tasks</h4>

<ul>
  <li><em>Provide more value</em> and <em>make more money</em></li>
</ul>

<h3 id="week-4-launch-your-idea-to-the-right-people">Week 4: Launch Your Idea to the Right People</h3>

<h4 id="day-17-publish-your-offer">Day 17: Publish Your Offer!</h4>

<ul>
  <li>Launch in <em>beta</em></li>
</ul>

<h4 id="day-18-sell-like-a-girl-scout">Day 18: Sell Like a Girl Scout</h4>

<ul>
  <li>Benefits are ways in which a product will improve someone’s life</li>
  <li>Features are details that demonstrate how</li>
  <li>Benefits are much better!!</li>
</ul>

<h4 id="day-19-ask-ten-people-for-help">Day 19: Ask Ten People for Help</h4>

<h4 id="day-20-test-test-and-test-again">Day 20: Test, Test, and Test Again</h4>

<ul>
  <li>Data don’t lie</li>
  <li>Test the big things: product (what you offer), offer (how you present it),
price (how much it costs)</li>
</ul>

<h4 id="day-21-burn-down-the-furniture-store">Day 21: Burn Down the Furniture Store</h4>

<ul>
  <li>Deals, sales, special offers: not-so-secret weapon</li>
</ul>

<h4 id="day-22-frame-your-first-dollar">Day 22: Frame Your First Dollar</h4>

<h3 id="week-5-regroup-and-refine">Week 5: Regroup and Refine</h3>

<h4 id="day-23-track-your-progress-and-decide-on-next-steps">Day 23: Track Your Progress and Decide on Next Steps</h4>

<ul>
  <li>Metrics: profit, growth, time</li>
</ul>

<h4 id="day-24-grow-what-works-let-go-of-what-doesnt">Day 24: Grow What Works, Let Go of What Doesn’t</h4>

<ul>
  <li>What’s working well?</li>
  <li>Automate or outsource?</li>
  <li>Make more money without spending more time?</li>
  <li>Increase prices?</li>
</ul>

<h4 id="day-25-look-for-money-lying-under-a-rock">Day 25: Look for Money Lying Under a Rock</h4>

<h4 id="day-26-get-it-out-of-your-head">Day 26: Get It Out of Your Head</h4>

<ul>
  <li>WRITE DOWN SALES, SERVICE, AND ONBOARDING WORKFLOWS with templates, etc.</li>
</ul>

<h4 id="day-27-back-to-the-future">Day 27: Back to the Future</h4>

<h3 id="appendices">Appendices</h3>

<ul>
  <li>Useful: Appendix 2: How to Validate an Idea with $10 and a Facebook Account</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/01/12/side-hustle/</guid>
                <description>
                    
                    Playbook for launching a side hustle. I really need to work on the fear part of launching things.
                    
                </description>
                <pubDate>Sat, 12 Jan 2019 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>The Yoda of Silicon Valley</title>
                <link>http://tigerthinks.com/2019/01/10/the-yoda-of-silicon-valley/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Hero</li>
  <li>Lives in Stanford and still as excited as ever about computers</li>
  <li>Estimates 25 more years to finish The Art of Computer Programming</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/01/10/the-yoda-of-silicon-valley/</guid>
                <description>
                    
                    Profile of Donald Knuth, author of the Bible of CS
                    
                </description>
                <pubDate>Thu, 10 Jan 2019 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>360. Is the Protestant Work Ethic Real?</title>
                <link>http://tigerthinks.com/2019/01/09/is-the-protestant-work-ethic-real/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Max Weber argued that Protestantism created wealth. Finally, there are data to
prove if he was right. All it took were some missionary experiments in the
Philippines and a clever map-matching trick that goes back to 16th-century
Germany.</li>
  <li>James Choi @ Yale</li>
  <li>Lots of suggested evidence but not much convincing</li>
  <li>80% of the planet is religious</li>
  <li>Experiment in the Philippines</li>
  <li>Very poor people earned more money as a result of religious instruction</li>
  <li>Why? Optimism and grit</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/01/09/is-the-protestant-work-ethic-real/</guid>
                <description>
                    
                    Protestants working harder might be a function of their religion. It's still up in the air. Circumstantial evidence points to the fact religion might have an effect.
                    
                </description>
                <pubDate>Wed, 09 Jan 2019 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>#1212 - David Goggins</title>
                <link>http://tigerthinks.com/2019/01/09/david-goggins/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>A retired Navy SEAL and former USAF Tactical Air Control Party member who
served in Iraq and Afghanistan. He is an ultramarathon runner, ultra-distance
cyclist, triathlete and world record holder for the most pull-ups done in 24
hours.</li>
  <li>Book: Can’t Hurt Me</li>
  <li>Different animal</li>
  <li>There’s great joy in your own grind</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/01/09/david-goggins/</guid>
                <description>
                    
                    Crazy dedication coming from a very rough childhood. Listening to him will make you want to run through a wall.
                    
                </description>
                <pubDate>Wed, 09 Jan 2019 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Writing copy for landing pages</title>
                <link>http://tigerthinks.com/2019/01/07/writing-copy-for-landing-pages/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Best used as a reference for when I am in this position, nothing to anchor it
to at the moment</li>
  <li>Quick wins:
    <ul>
      <li>Focus copy on them</li>
      <li>Add pattern, texture, and shine to a block of copy</li>
      <li>Defang objections with an “even if” clause</li>
      <li>Limit each sentence to one idea</li>
      <li>Create a landing page that’s not your homepage</li>
    </ul>
  </li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/01/07/writing-copy-for-landing-pages/</guid>
                <description>
                    
                    How to write high-conversion copy for landing pages
                    
                </description>
                <pubDate>Mon, 07 Jan 2019 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>The Playlist of Awesome: Putting Perceptual Exposure to Practice</title>
                <link>http://tigerthinks.com/2019/01/05/the-playlist-of-awesome/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>First, you need a large number of superficially diverse, positive examples.
Think about what this implies: a diverse selection means that it’s better to
have a selection of small but good examples, instead of longer, bigger chunks.
Smaller chunks allow you to work through more examples in the same period of
time. So: pick smaller snippets of code, or little snatches of essays, instead
of complete programs or long articles, ones that take hours to finish reading.</li>
  <li>‘Positive’ examples means that you’ll have to pick what is good. Don’t worry
if you have to use your judgment to pick at the beginning. You may have the
presence of mind to know that your taste for a good picture or a good piece of
writing might be suspect when you are starting out. No matter. Pick the examples
that you admire most. Your taste will improve, and so will your picks.</li>
  <li>Then go through your Perceptual Exposure Playlist at a leisurely pace, never
spending more than a couple of minutes per example. Don’t reflect, don’t think,
just browse.</li>
  <li>Close your playlist and move on. One tricky thing is that during this
exercise, you probably wouldn’t feel as if you’ve learnt anything consciously
(one of the most salient features of perceptual learning is that the learners
can’t articulate whatever it is that they’ve picked up during the process, or
sometimes even whether they’ve learnt anything at all). What you’re trying to
improve is a subconscious sense of ‘good’.</li>
  <li>Schedule updated sessions to create new playlists, and review old ones. As
your perceptual abilities improves, you should find that your evaluation of
old playlists will shift over time.</li>
  <li>Concrete examples: Rule of Thirds. Narrative in Writing</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/01/05/the-playlist-of-awesome/</guid>
                <description>
                    
                    How to use perceptual exposure to improve your subconscious processing.
                    
                </description>
                <pubDate>Sat, 05 Jan 2019 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>#464: What's Causing the Sex Recession?</title>
                <link>http://tigerthinks.com/2019/01/04/whats-causing-the-sex-recession/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>A decline in physical intimacy may potentially speak to a decline in emotional
intimacy, and a struggle modern folks are having with connecting with each other</li>
  <li>The way dating apps are shaping in-person interactions, the prevalence of
porn, and an increase in anxiety and depression</li>
  <li>Kate Julian</li>
  <li>People living with parents</li>
  <li>People feel like they need a job and house before getting married</li>
  <li>Social media</li>
  <li>Depression</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/01/04/whats-causing-the-sex-recession/</guid>
                <description>
                    
                    Kate Julian says fear or emotional connection is causing less physical connection.
                    
                </description>
                <pubDate>Fri, 04 Jan 2019 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Draft No. 4</title>
                <link>http://tigerthinks.com/2019/01/04/draft-no-4/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: Nonfiction version of On Writing</p>

<ul>
  <li>Good source of perceptual exposure options for narrative writing</li>
</ul>

<h2 id="notes">Notes</h2>

<h3 id="progression">Progression</h3>

<ul>
  <li><em>so sound asleep that his mouth fell open wider than a golf ball.</em> (12)</li>
</ul>

<h3 id="structure">Structure</h3>

<ul>
  <li><em>Then, as I do now, I settled on an ending before going back to the
beginning.</em> (19)</li>
  <li><em>Readers are not supposed to notice the structure. It is meant to be about as
visible as someone’s bones. And I hope this structure illustrates what I take
to be a basic criterion for all structures: they should not be imposed upon
the material. They should arise from within it.</em> (34)</li>
  <li><em>A piece of writing has to start somewhere, go somewhere, and sit down when it
gets there. You do that by building what you hope is an unarguable structure.
Beginning, middle, end. Aristotle, page 1.</em> (34)</li>
  <li><em>You should always write your lead […] before you go at the big pile of raw
material and sort it into a structure.</em> (49)</li>
  <li><em>The lead–like the title–should be a flashlight that shines down into the
story. A lead is a promise. It promises that the piece of writing is going to
be like this. If it is not going to be so, don’t use the lead.</em> (50)</li>
</ul>

<h3 id="editors--publisher">Editors &amp; Publisher</h3>

<h3 id="elicitation">Elicitation</h3>

<ul>
  <li><em>Whatever you do, don’t rely on memory.</em> (94)</li>
  <li><em>Do enough preparation to be polite</em> (97)</li>
</ul>

<h3 id="frame-of-reference">Frame of Reference</h3>

<ul>
  <li><em>The last thing I would ever suggest to young writers is that they consciously
try to write for the ages. Oh, yik, disgusting. Nobody should ever be trying
that. We should just be hoping that our pieces aren’t obsolete before the
editor sees them. If you look for allusions and images that have some
durability, your choices will stabilize your piece of writing. Don’t assume
that everyone on earth has seen every movie you have seen.</em> (118)</li>
</ul>

<h3 id="checkpoints">Checkpoints</h3>

<h3 id="draft-no-4">Draft No. 4</h3>

<ul>
  <li>Combat writer’s block: write “Dear Mother”, go with what comes to mind, snip
off the salutation</li>
  <li><em>After reading the second draft aloud, and going through the piece for the
third time, I enclose words and phrases in pencilled boxes for Draft No. 4. If
I enjoy anything in this process it is Draft No. 4.</em> (161)
    <ul>
      <li>Titular</li>
    </ul>
  </li>
  <li><em>The dictionary definitions of words you are trying to replace are far more
likely to help you out than a scattershot wad from a thesaurus.</em> (162)</li>
</ul>

<h3 id="omission">Omission</h3>

<ul>
  <li><em>An instantly likable guy if the instant had not been this one.</em> (179)
    <ul>
      <li>Great writing</li>
    </ul>
  </li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2019/01/04/draft-no-4/</guid>
                <description>
                    
                    Master-class on long-form nonfiction writing (books, newspaper articles), with personal narrative interspersed. Not super applicable to me (editors, publishers, etc.) but extremely well-written and engaging nontheless.
                    
                </description>
                <pubDate>Fri, 04 Jan 2019 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>#462: How to Tell Better Stories</title>
                <link>http://tigerthinks.com/2018/12/30/how-to-tell-better-stories/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Fortunately, good storytelling is a skill that can learned by anyone. Here to
teach us the art of storytelling is Matthew Dicks, a writer, five-time Moth
GrandSlam storytelling winner, and the author of the book Storyworthy: Engage,
Teach, Persuade, and Change Your Life through the Power of Storytelling.</li>
  <li>Today on the show, Matthew walks us through the nuts and bolts of how to craft
a compelling story. We begin our conversation discussing ways to generate story
ideas, why good stories don’t have to be about big moments, and why he
recommends a practice called “Homework for Life.”</li>
  <li>Homework for life. Journal one moment a day that is story worthy</li>
  <li>Little moments are good because relatable</li>
  <li>Stories come from first, last, best, worst</li>
  <li>Know the ending</li>
  <li>5 second moment of change</li>
  <li>Begin with the opposite</li>
  <li>Know the stakes</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/12/30/how-to-tell-better-stories/</guid>
                <description>
                    
                    Moth winner says storytelling is easy. Just pick something and run with it. Stop trying to be perfect.
                    
                </description>
                <pubDate>Sun, 30 Dec 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>126: Matthew Walker | Unlocking the Power of Sleep</title>
                <link>http://tigerthinks.com/2018/12/22/matthew-walker-unlocking-sleep/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Professor of Neuroscience and Psychology at the University of California in
Berkeley, founder and director of the Center for Human Sleep Science, and author
of Why We Sleep: Unlocking the Power of Sleep and Dreams</li>
  <li>Caffeine hijacks adenosine receptors</li>
  <li>8-9hrs nice</li>
  <li>Drop temperature at night</li>
  <li>Regularity is key</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/12/22/matthew-walker-unlocking-sleep/</guid>
                <description>
                    
                    Really smart woman who took a pretty unconventional path of running underground poker games, lost it all, and has come back strong.
                    
                </description>
                <pubDate>Sat, 22 Dec 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Where Jonathan Haidt things the American mind went wrong</title>
                <link>http://tigerthinks.com/2018/12/20/jonathan-haidt-ezra-klein/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Haidt sees a generation warped by overparenting and smartphones and flirting
with illiberalism. He worries over a culture of “safetyism” that confuses
disagreement with violence. He sees political correctness on campus as a threat
not just to speakers’ incomes, but to students’ psyches.</li>
  <li>Nothing is miserable unless you think it so. Nothing brings happiness unless
you are content with it</li>
  <li>Mental health problems are up. Point to hospital admissions for self harm,
which are constantly for millennials but way up for Gen z</li>
  <li>Great untruths</li>
  <li>Fragility</li>
  <li>Emotional reasoning</li>
  <li>Us vs. them</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/12/20/jonathan-haidt-ezra-klein/</guid>
                <description>
                    
                    What's wrong with safe spaces and how they're hurting more than they're helping this generation
                    
                </description>
                <pubDate>Thu, 20 Dec 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Dr. Elon &amp; Mr. Musk: Life Inside Tesla's Production Hell</title>
                <link>http://tigerthinks.com/2018/12/18/dr-elon-mr-musk/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Success comes at a cost. Does Elon Musk cross the line when it comes to how he
treats the people around him in pursuit of his huge aspirations?</li>
  <li>The company had to move faster, Musk told his senior executives. He wanted to
start production in July 2017, almost four months ahead of plan. Musk was
excited by a particular notion: He had recently had a dream, people in the
room recall him saying, in which he had seen the factory of the future, a
fully automated manufacturing plant where robots built everything at high
speed and parts moved along conveyor belts that delivered each piece, just in
time, to exactly the right place. He said he had been working on such ideas
for a while. “This thing will be an unstoppable alien dreadnought,” he told
his colleagues, causing some of them to pull out their phones and Google the
phrase.</li>
  <li>A previous employee remembered Musk saying that Tesla’s goal was to save the
world. “He would get really emotional,” this person told me—and that’s why he
sometimes seemed callous, “because what’s one person’s feelings compared to
the fate of billions? Elon cares a lot about humanity, but he doesn’t really
care about individual people all that much.</li>
  <li>Eric Larkin, who helped oversee factory software until he was fired in April,
still feels a strong emotional and financial attachment to Tesla. He’d worked
there for three years and was proud to be part of something that could reduce
carbon in the atmosphere and “accelerate the world’s transition to sustainable
energy,” as the company’s mission statement puts it. “Tesla is the only
company positioned to make this world a better place, to really improve the
world right now,” Larkin told me. “And Tesla is Elon. How can you be bitter
about humanity’s best hope?”</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/12/18/dr-elon-mr-musk/</guid>
                <description>
                    
                    Success comes at a cost. Does Elon Musk cross the line when it comes to how he treats the people around him in pursuit of his huge goals?
                    
                </description>
                <pubDate>Tue, 18 Dec 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>The cold start problem: how to build your machine learning portfolio</title>
                <link>http://tigerthinks.com/2018/12/17/how-to-build-your-machine-learning-portfolio/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Build a project with an interesting dataset that took obvious effort to collect, and make it as visually impactful as possible.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/12/17/how-to-build-your-machine-learning-portfolio/</guid>
                <description>
                    
                    Build a project with an interesting dataset that took obvious effort to collect, and make it as visually impactful as possible.
                    
                </description>
                <pubDate>Mon, 17 Dec 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Convert a Bird Scooter to a personal one with $32 kit</title>
                <link>http://tigerthinks.com/2018/12/15/convert-a-bird-scooter-to-a-personal-one/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<p>Buy a Bird at police auction and replace motherboard with custom part.  Would
like to try this at some point. Maybe when it gets warmer.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/12/15/convert-a-bird-scooter-to-a-personal-one/</guid>
                <description>
                    
                    Buy a Bird at police auction and replace motherboard with custom part.  Would like to try this at some point. Maybe when it gets warmer.
                    
                </description>
                <pubDate>Sat, 15 Dec 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Atlassian Retrospectives</title>
                <link>http://tigerthinks.com/2018/12/15/atlassian-retrospectives/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Setup</li>
  <li>What went well</li>
  <li>What went wrong</li>
  <li>Action items/next steps</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/12/15/atlassian-retrospectives/</guid>
                <description>
                    
                    Run retrospectives: setup, what went well, what went wrong, action items/next strps
                    
                </description>
                <pubDate>Sat, 15 Dec 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>The Friendship That Made Google Huge</title>
                <link>http://tigerthinks.com/2018/12/14/the-friendship-that-made-google-huge/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>The problem was that, as Google grew, its computing infrastructure also
expanded. Computer hardware rarely failed, until you had enough of it—then it
failed all the time. Wires wore down, hard drives fell apart, motherboards
overheated. Many machines never worked in the first place; some would
unaccountably grow slower. Strange environmental factors came into play.
    <ul>
      <li>Solved by MapReduce</li>
    </ul>
  </li>
  <li>Jeff once circulated a list of “Latency Numbers Every Programmer Should
Know.” In fact, it’s a list of numbers that almost no programmer knows: that
an L1 cache reference usually takes half a nanosecond, or that reading one
megabyte sequentially from memory takes two hundred and fifty microseconds.
These numbers are hardwired into Jeff’s and Sanjay’s brains.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/12/14/the-friendship-that-made-google-huge/</guid>
                <description>
                    
                    Jeff Dean + Sanjay Ghemawat: MapReduce, TensorFlow, etc. Engineering royalty.
                    
                </description>
                <pubDate>Fri, 14 Dec 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Google Rules of Machine Learning</title>
                <link>http://tigerthinks.com/2018/12/14/rules-of-ml/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Rule #1: Don’t be afraid to launch a product without machine learning.</li>
  <li>Rule #5: Test the infrastructure independently from the machine learning.</li>
  <li>Rule #9: Detect problems before exporting models.</li>
  <li>Rule #23: You are not a typical end user.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/12/14/rules-of-ml/</guid>
                <description>
                    
                    Bite-size, Google-scale advice for ML.
                    
                </description>
                <pubDate>Fri, 14 Dec 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>How to unit test machine learning code</title>
                <link>http://tigerthinks.com/2018/12/14/how-to-unit-test-machine-learning-code/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>When your only feedback is the final validation error, the only place you have
to search is your entire network architecture.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/12/14/how-to-unit-test-machine-learning-code/</guid>
                <description>
                    
                    Actual code examples for testing neural networks and ML algorithms yay
                    
                </description>
                <pubDate>Fri, 14 Dec 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>#48 - Brian Christian on better living through the wisdom of computer science</title>
                <link>http://tigerthinks.com/2018/12/14/brian-christian-algorithms-to-live-by/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Computational kindness, and the best way to schedule meetings</li>
  <li>How can we characterize a computational model of what people are actually
doing, and is there a rigorous way to analyse just how good their instincts
actually are?</li>
  <li>What’s it like being a human confederate in the Turing test competition?</li>
  <li>Is trying to detect fake social media accounts a losing battle?</li>
  <li>The canonical explore/exploit problem in computer science: the multi-armed
bandit</li>
  <li>What’s the optimal way to buy or sell a house?</li>
  <li>Why is information economics so important?</li>
  <li>What kind of decisions should people randomize more in life?</li>
  <li>How much time should we spend on prioritisation?</li>
  <li>Explore exploit problem</li>
  <li>Multi armed bandit problem</li>
  <li>Good form for life</li>
  <li>A key assumption is immediate feedback</li>
  <li>Restless bandit problem is np complete, when payouts are constantly changing</li>
  <li>Work dumber. In 2005 “worse” Linux scheduler resulted in actually getting more
work done</li>
  <li>Copernican principle is actually mathematically supported!</li>
  <li>Computational kindness :)</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/12/14/brian-christian-algorithms-to-live-by/</guid>
                <description>
                    
                    Optimal shopping. Multi-armed bandit. Really great parallels between CS and life. Will be picking up the book.
                    
                </description>
                <pubDate>Fri, 14 Dec 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>The Starter Manager Guide</title>
                <link>http://tigerthinks.com/2018/12/13/the-starter-manager-guide/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<h3 id="1-what-is-the-managers-job">1: What is the Manager’s Job?</h3>

<ul>
  <li>The manager’s job is to increase the output of the team. (Grove)</li>
  <li>As an example, say that a programmer is unable to work until a program
specification has been written. If a manager doesn’t ensure that a spec is
ready for the programmer to work on, then she has just decreased the output of
her team, because the programmer is now sitting idle. (In practice, the
programmer might start working on something of less importance — which is just
as bad.)</li>
  <li>Grove calls this idea ‘managerial leverage’. Positive managerial leverage
occurs when an activity increases the output of the team. Negative managerial
leverage does the reverse.</li>
  <li>From now onwards, when you come across a new management technique, ask yourself the following three questions:
    <ul>
      <li>How has this helped the author improve the output of their team?</li>
      <li>How may I adapt this technique for my organisation?</li>
      <li>Once I’ve applied it, how will I know if it has successfully increased the output of my team?</li>
    </ul>
  </li>
  <li>Once every week, sit down with pen and paper and ask yourself: have I
increased or decreased the output of my team this past week? What may I do
differently next week, that may increase the output of my team just a little
more?</li>
</ul>

<h3 id="2-how-to-delegate-without-micro-management">2: How to Delegate Without Micro-Management</h3>

<ul>
  <li>We know from self-determination theory that autonomy is strongly linked to
work-related happiness. Remove autonomy, and you’ll guarantee your
subordinate’s unhappiness.</li>
  <li>Delegation can only happen in a situation where  both the delegator and the
delegatee share a common understanding of how to accomplish the job to be
done.</li>
  <li>One hack that I use often is something I call ‘the selfish manager’: recognise
that you are allowed to keep some tasks to yourself.</li>
  <li>This leads us to our second mental hack: the idea of ‘having two hats’.
    <ul>
      <li>Manager and IC</li>
    </ul>
  </li>
  <li>Check at the lowest value stage of production.</li>
  <li>Check often at the beginning, and then taper off as the feature reaches completion.</li>
  <li>The secret here is to check according to your subordinate’s task relevant maturity.
    <ul>
      <li>For each kind of task, different subordinates would have different levels of
maturity. This is more accurate than judging a subordinate as ‘experienced’ or
‘not experienced’: instead, you must judge the subordinate as ‘experienced with
regard to this particular task’.</li>
    </ul>
  </li>
  <li>If you delegate tasks that you don’t know how to do, check your subordinate’s
thinking by asking her for a plan. Then check the output against that plan.</li>
</ul>

<h3 id="3-how-to-train-without-becoming-a-bottleneck">3: How to Train Without Becoming a Bottleneck</h3>

<ul>
  <li>The ‘thing’ your systematised training should produce is a training document.
    <ul>
      <li>If you are a software engineer, you should freeze a copy of your codebase
(e.g. create a git branch) and hand this frozen copy to your new hire. Then,
give them a series of tasks that operates on this codebase. Bonus points if
you give an actual (but edited) specification for features that have already
been built into your product. Then, you may compare their solutions with the
actual code your team shipped, and use this to train them on what a real,
deployed feature looks like in your company.</li>
    </ul>
  </li>
  <li>Doing this — that is, using a simulation of an actual task — is better than
training using a real task, because it is a repeatable process.</li>
  <li>First, think about the tasks that you are most likely to delegate in your
team. Break each of them down to the smallest possible components, and then
order it from the most simple to the most complex. Write this down as a series
of tasks you will ask your subordinate to do. After testing this program once,
go back and tweak depending on the task-relevant-maturity that you see in your
new subordinate.</li>
  <li>If you are good at training, you should find that the set of tasks you may
delegate reliably to your team to grow over time. Conversely, if at six months
you still find yourself diving into the weeds and fixing things for your
subordinates, this is a strong signal that you need to improve in your
training. Diving into the weeds to fix things for your subordinates should be
the exception, not the norm.</li>
</ul>

<h3 id="4-how-to-prioritise-and-regain-your-sanity">4: How to Prioritise and Regain Your Sanity</h3>

<ul>
  <li>Visualize the four quadrants prioritisation model</li>
  <li>Fill in the blank of the four quadrants prioritisation model</li>
  <li>More productive manager:
    <ul>
      <li>She does her work faster (that is, she does more work done per unit time)</li>
      <li>She increases the managerial leverage of her activities</li>
      <li>She changes the mix of activities so that she does more high leverage activities and less low leverage ones.</li>
    </ul>
  </li>
  <li>Consider your information sources. Are there sources of information that you
have not considered before, or are paying only a little attention to? Andy
Grove wrote that he spends a portion of his time reading customer complaints
while he was CEO at Intel, because he believed that it was an extremely timely
information source with relatively high accuracy, and therefore a high
leverage activity.</li>
</ul>

<h3 id="5-one-on-ones-how-to-prevent-blowups-from-happening">5: One-on-Ones: How to Prevent Blowups From Happening</h3>

<ul>
  <li>One-on-ones are a powerful tool that enables you to catch problems before they
happen.</li>
  <li>Grove recommends that managers in Intel schedule their one-on-ones according
to the overall task-relevant maturity of the subordinate — juniors warrant
more frequent one-on-ones, while seniors could be met with once every quarter.
In order to prevent meetings from being skipped, Grove recommends scheduling
the date and time of the next one-on-one at the end of the current one. That
way, any interruptions such as vacations and crunch periods would be taken
into account. These are all worthy options, but the point is that you should
figure out what works for you.</li>
  <li>The one-on-one should be the subordinate’s meeting. The subordinate should
prepare the agenda for each one-on-one, and the manager should merely send a
reminder to remind the subordinate to prepare for their meeting before it
happens.</li>
  <li>Techniques for rants
    <ul>
      <li>The first technique is called the mirror. When your subordinate is ranting,
keep her going by repeating what she is saying back to her in the form of a
question. For instance, if she says “I can’t stand Andy, he’s full of shit
and he takes up so much of our time during staff meetings!” You say, in a
non-judgmental tone: “Takes up so much of our time?”</li>
      <li>The second technique is the ‘label their pain’ technique. As your
subordinate is ranting, you label their emotions back to them. For instance,
to play off the earlier example with ‘full-of-shit Andy’, a response could
be: “Oh. Wow. It seems you’ve been feeling this way for some time.”</li>
    </ul>
  </li>
</ul>

<h3 id="6-where-to-go-from-here">6: Where to Go From Here</h3>

<ul>
  <li>Framework for evaluating all of management: that essentially, the manager’s
job is to increase the output of the team. I argued that you should use this
framework as your North Star — that with every technique that you apply, with
each experiment that you do, with everything that you learn, you should pause
and evaluate: “Have I increased the output of my team? Or have I decreased it?
If I’ve increased it, how may I increase it further? If I have decreased it,
how might I prevent that from happening again?”</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/12/13/the-starter-manager-guide/</guid>
                <description>
                    
                    Getting started guide for new managers, especially in the context of startups
                    
                </description>
                <pubDate>Thu, 13 Dec 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Pricing low-touch SaaS</title>
                <link>http://tigerthinks.com/2018/12/12/pricing-low-touch-saas/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Best used as a reference for when I am in this position, nothing to anchor it
to at the moment</li>
  <li>Different case studies for selling to:
    <ul>
      <li>Consumers</li>
      <li>Undifferentiated SMBs</li>
      <li>Tight verticals</li>
      <li>Sophisticated businesses</li>
    </ul>
  </li>
  <li>Charge. More.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/12/12/pricing-low-touch-saas/</guid>
                <description>
                    
                    Low-touch SaaS pricing guide with case studies
                    
                </description>
                <pubDate>Wed, 12 Dec 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Just Fucking Ship</title>
                <link>http://tigerthinks.com/2018/12/11/just-fucking-ship/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>One of the most surprising solopreneurship lessons for me over the past couple
of months has been the idea that shipping is a skill.</li>
  <li>Setting a deadline and taking it seriously will force you to make significant
progress.</li>
  <li>For a project, you should start from the completed product, and then work backwards, asking:
    <ul>
      <li>What’s the end result look like, exactly?</li>
      <li>How many chapters/videos/features?</li>
      <li>What is absolutely required, what’s nice to have?</li>
      <li>How perfect does it have to be?</li>
      <li>How long will each of these take?</li>
      <li>What has to come first?</li>
      <li>What do I need to prepare?</li>
      <li>How long will that take?</li>
      <li>What do I need to find out?</li>
      <li>How long will that take?</li>
      <li>How much, or how little, defines success? And who controls that?</li>
    </ul>
  </li>
  <li>Be crispy: specific, vivid, detailed</li>
  <li>Track your progress
    <ul>
      <li>Visible progress is a fantastic motivator.</li>
      <li>Emotional management — when it comes to the sense of forward motion! —
really, really matters.</li>
    </ul>
  </li>
  <li>Have everything ready and ‘mise en place’ before you start working.</li>
  <li>If it’s not necessary, just let it go.</li>
  <li>The answer to these ‘feelings’ is to ignore all of them, in the same way that
you ignore rain, and choose not to let a rainy day affect your mood
permanently.</li>
  <li>My main takeaway from the book — apart from the techniques I’ve summarised
above, which are, you know, kinda the point of the book —  my main takeaway is
that shipping needs to deal with emotions effectively.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/12/11/just-fucking-ship/</guid>
                <description>
                    
                    Title says it all. Techniques for getting around the emotional barriers to shipping a product.
                    
                </description>
                <pubDate>Tue, 11 Dec 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>#102 - Andrew Kortina</title>
                <link>http://tigerthinks.com/2018/12/10/andrew-kortina/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Hard to change your relationship with dignity and work</li>
  <li>Bike touring makes you interesting to everyone around the world</li>
  <li>When Fin succeeds, no one will need to work any more</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/12/10/andrew-kortina/</guid>
                <description>
                    
                    Founder of Venmo and Fin. Future of work.
                    
                </description>
                <pubDate>Mon, 10 Dec 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>285. There's a War on Sugar. Is it Justified?</title>
                <link>http://tigerthinks.com/2018/12/09/war-on-sugar/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Argue that sugar should be regulated, like alcohol and tobacco, on the grounds
that it’s addictive and toxic.</li>
  <li>Acute health crises get all the attention, but diet and nutrition and exercise
are more important</li>
  <li>Americans consume 30 tsp of added sugar a day</li>
  <li>Criteria for drugs:</li>
  <li>Ubiquity</li>
  <li>Toxicity</li>
  <li>Potential for abuse</li>
  <li>Externalities</li>
  <li>Pessimistic meta-induction: why should we do anything if it will always end up
being wrong in 10 years?</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/12/09/war-on-sugar/</guid>
                <description>
                    
                    Sugar is addictive and toxic. People generally support some type of regulation, but not an outright ban.
                    
                </description>
                <pubDate>Sun, 09 Dec 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>A Nuanced Take on Preventing Burnout</title>
                <link>http://tigerthinks.com/2018/12/05/nuanced-take-on-preventing-burnout/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Burnout is like a <strong>kettle</strong>, and you can keep it going by letting steam out
occasionally</li>
  <li>My burnout prevention technique has two components to it: detection and
corrective action.</li>
  <li>Detection is actually really easy. Once a week, introspect and ask yourself:
“Do I feel resentful?” This works remarkably well, because resentment is the
first sign of burnout.</li>
  <li>Maslach Burnout Inventory: ICE
    <ul>
      <li>Inefficacy: reduced personal accomplishment</li>
      <li>Cynicism: negative attitudes</li>
      <li>Exhaustion: loss of energy, fatigue</li>
    </ul>
  </li>
  <li>Do restful activity that’s actually restful.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/12/05/nuanced-take-on-preventing-burnout/</guid>
                <description>
                    
                    Don't get burnt out. It's not worth it. Scientific literature suggests how.
                    
                </description>
                <pubDate>Wed, 05 Dec 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>#1022 - Eric Weinstein</title>
                <link>http://tigerthinks.com/2018/12/05/eric-weinstein/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Eric Weinstein is a mathematician and economist, and he is also the managing
director at Thiel Capital.</li>
  <li>The era for disagreeability. Sticking to first principles is best way to not
get swayed</li>
  <li>Weight cutting is the biggest danger in pro MMA</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/12/05/eric-weinstein/</guid>
                <description>
                    
                    Managing director at Thiel Capital. Really smart, wide-ranging discussion.
                    
                </description>
                <pubDate>Wed, 05 Dec 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Career Moats 101</title>
                <link>http://tigerthinks.com/2018/12/05/career-moats-101/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>A career moat is an individual’s ability to maintain competitive advantages
over your competition (say, in the job market) in order to protect your long
term prospects, your employability, and your ability to generate sufficient
financial returns to support the life you want to live. Just like a medieval
castle, the moat serves to protect those inside the fortress and their riches
from outsiders.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/12/05/career-moats-101/</guid>
                <description>
                    
                    Summary page of CommonCog's first year of writing on Career moats
                    
                </description>
                <pubDate>Wed, 05 Dec 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>358. Yes, the Open Office is Terrible -- But It Doesn't Have to Be</title>
                <link>http://tigerthinks.com/2018/12/03/yes-the-open-office-is-terrible/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>It has evolved into a nightmare of noise and discomfort.</li>
  <li>Ethan Bernstein</li>
  <li>Steven turbin</li>
  <li>Case study: 2 fortune 500 companies switching to open offices</li>
  <li>Transparency paradox: more transparent workplaces make less transparent
employees. They hide stuff, looking over their shoulder</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/12/03/yes-the-open-office-is-terrible/</guid>
                <description>
                    
                    Use small team offices or WFH or individual offices to address the issues with open offices.
                    
                </description>
                <pubDate>Mon, 03 Dec 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Effective learning: Twenty rules of formulating knowledge</title>
                <link>http://tigerthinks.com/2018/12/02/twenty-rules-of-formulating-knowledge/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Do not learn if you do not understand</li>
  <li>Before you proceed with memorizing individual facts and rules, you need to
build an overall picture of the learned knowledge.</li>
  <li>Stick to the minimum information principle
    <ul>
      <li>We want answer to be as short as imaginably possible!</li>
    </ul>
  </li>
  <li>Use imagery</li>
  <li><strong>Use mnemonic techniques</strong></li>
  <li>Graphic deletion is as good as cloze deletion</li>
  <li><strong>Avoid sets and enumerations</strong>
    <ul>
      <li>A classic example of an item that is difficult to learn is an item that asks
for the list of the members of a set.</li>
      <li>You should always try to make sure your brain works in the exactly same way
at each repetition.</li>
      <li>Use enumerations instead of sets</li>
      <li>Use overlapping close deletions instead of enumerations
        <ul>
          <li>Enumerations require hacks that will fail you at times</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>The wording of your items must be optimized to make sure that in minimum time
the right bulb in your brain lights up.</li>
  <li>Personalize and provide examples</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/12/02/twenty-rules-of-formulating-knowledge/</guid>
                <description>
                    
                    SuperMemo creator gets deep into best usages of SRS
                    
                </description>
                <pubDate>Sun, 02 Dec 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>120: Molly Bloom | The One Who Makes the Rules Wins the Game</title>
                <link>http://tigerthinks.com/2018/12/02/molly-bloom/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>What Molly Bloom learned by running underground poker games for some of the
world’s wealthiest and well-known. The psychology Molly used to control the
games – and their players. The secrets of generating rapport and trust among
those who aren’t in the habit of trusting anyone. The strategies Molly utilized
to become indispensable to her players. How Molly got involved in the world of
poker in spite of unlikely beginnings, and what happened to make her quit it for
good.</li>
  <li>High achiever</li>
  <li>Figure out a way to work hard and make people feel special</li>
  <li>Authentic curiosity</li>
  <li>I have never regretted sacrificing short term gains for my integrity</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/12/02/molly-bloom/</guid>
                <description>
                    
                    Really smart woman who took a pretty unconventional path of running underground poker games, lost it all, and has come back strong.
                    
                </description>
                <pubDate>Sun, 02 Dec 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>101: Ben Orenstein - How to Build an App in a Week</title>
                <link>http://tigerthinks.com/2018/12/02/ben-orenstein-app-in-a-week/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>The common mistakes people make when working on a new project that prevent
them from getting it to the finish line.</li>
  <li>Be ruthless about cutting. Cut password resets, credit card expiry, etc</li>
  <li>Developers shouldn’t fall in love with complexity but they do</li>
  <li>Yes there are edge cases, no you don’t need to handle all of them up front</li>
  <li>Let the world push you into more complexity</li>
  <li>Things change. It’s not a failure of yourself if your system from last month
isn’t good enough to support you today. It means you designed the right system
for last month</li>
  <li>Beware the iceberg problem: 10% on surface 90% lies below</li>
  <li>Billing is a good example of this. Half a day to get credit cards working,
hundreds of hours for everything else</li>
  <li>Nix user auth, teams, invites, etc</li>
  <li>Deadlines are bad if accompanied by fixed scope. Flexible scope makes
deadlines great</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/12/02/ben-orenstein-app-in-a-week/</guid>
                <description>
                    
                    Be ruthless about cutting and be flexible about scope. Set hard deadlines.
                    
                </description>
                <pubDate>Sun, 02 Dec 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Memorizing a programming language using spaced repetition software</title>
                <link>http://tigerthinks.com/2018/11/29/memorizing-a-programming-language-using-srs/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Turn prose into code</li>
  <li>Try to trick your future self</li>
  <li>Save cool tricks</li>
  <li>Turn broad concepts into succinct examples</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/11/29/memorizing-a-programming-language-using-srs/</guid>
                <description>
                    
                    Programming-specific SRS tips
                    
                </description>
                <pubDate>Thu, 29 Nov 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>#87 - Elad Gil</title>
                <link>http://tigerthinks.com/2018/11/28/elad-gil/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Tactical advice on key issues for post product-market fit companies such as
the role of the CEO, hiring executives, late stage fundraising, M&amp;A, and other
topics.</li>
  <li>Have to grind out your early customers</li>
  <li>Have to find design partners who will give you feedback if in enterprise</li>
  <li>Biggest mistake is messing up hiring</li>
  <li>To get VC eyes, in order:</li>
  <li>High margin, rapidly growing, high traction product</li>
  <li>Compelling market</li>
  <li>Great story</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/11/28/elad-gil/</guid>
                <description>
                    
                    Be ruthless about cutting and be flexible about scope. Set hard deadlines.
                    
                </description>
                <pubDate>Wed, 28 Nov 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Peter Attia, M.D. -- How to Live a Longer, Higher Quality Life</title>
                <link>http://tigerthinks.com/2018/11/26/peter-attia-how-to-live-a-longer-higher-quality-life/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Mission is to understand and improve human lifespan and healthspan (or quality
of life).</li>
  <li>Mastery and lifespan</li>
  <li>Wealth defined as the number of great people in your life?</li>
  <li>80 is lifespan</li>
  <li>40 is where healthspan starts to dip</li>
  <li>At 70 you’re halfway done with healthspan</li>
  <li>You want more of both!</li>
  <li>Health compounds!</li>
  <li>Prevention &gt; treatment</li>
  <li>Cancer spends &gt; 80% of its life undetectable. You need to be aware that it
does not happen overnight</li>
  <li>Healthspan is composed of mind body and spirit</li>
  <li>Mind measured by executive function, processing speed, short term memory</li>
  <li>Body is maintenance of muscle mass, ability to carry out functional movement,
frequency of pain</li>
  <li>Spirit is sense of purpose and social support</li>
  <li>To increase healthspan, move these levers positively. Eating, sleeping,
exercise, stress management, drugs and hormones, learning to avoid harmful
behaviors</li>
  <li>3 diseases: cardio disease, cancer, neurodegenerative disease. These are main
causes of death outside drinking/smoking and suicide</li>
  <li>People who live to 100 have genetic advantages. Their genes code for proteins
which offer protection from the above</li>
  <li>Cyclic fasting &gt; caloric restriction</li>
  <li>Wisconsin study shows that caloric restriction only works for monkeys with
already bad diets cause they cut out crap. No effect on healthy normal diet
monkeys</li>
  <li>Only rapomicin (drug) extends life</li>
  <li>Next frontier is fixing aging like gray hair and muscle loss</li>
  <li>Autophagy is the backing concept for cyclic fasting. Self killing cells.
Collect the good parts get rid of the bad parts. Happens when you’re hungry</li>
  <li>No clue how to optimize for autophagy. Can’t measure in humans</li>
  <li>Benefits of lifting/exercise?</li>
  <li>Dense bones help prevent breakage</li>
  <li>Metabolic benefits are best. Help with glucose regulation, need to keep
glucose levels low and stdev low</li>
  <li>Don’t anchor your ego to being right. Shed things when data says differently.
Anchor it to knowing as much as possible.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/11/26/peter-attia-how-to-live-a-longer-higher-quality-life/</guid>
                <description>
                    
                    Great actionable advice on health. Will definitely try and read more of Attia's work.
                    
                </description>
                <pubDate>Mon, 26 Nov 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>The Mental Model Fallacy</title>
                <link>http://tigerthinks.com/2018/11/25/the-mental-model-fallacy/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>The mental model fallacy is that it’s worth it to read descriptions of mental
models, written and aggregated by non-practitioners, in the pursuit of
self-improvement and success.</li>
  <li>The second half of this assertion is false: you cannot learn the mental models
that are responsible for success through reading and thinking. The reason for
this is the same reason that attempting to learn how to ride a bicycle by
reading a book is stupid. The most valuable mental models do not survive
codification. They cannot be expressed through words alone.</li>
  <li>The answer is that the mental models that make Buffett and Munger so effective
are divided into two types: mental models that are explicit knowledge and
mental models that are tacit knowledge.</li>
  <li>Similarly, the idea that knowledge can be divided into explicit and tacit is
not new: the Ancient Greeks called the former epistêmê and the latter technê,
loosely translated into ‘knowledge’ and ‘art’.</li>
  <li>Read from the source material of master practitioners, copy their actions,
climb their skill trees,  and reflect through trial and error. Don’t read
third-party accounts of technê. And stop reading this blog if my career goals
diverge from yours.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/11/25/the-mental-model-fallacy/</guid>
                <description>
                    
                    The mental model fallacy is that it’s worth it to read descriptions of mental models, written and aggregated by non-practitioners, in the pursuit of self-improvement and success.
                    
                </description>
                <pubDate>Sun, 25 Nov 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>The elusive formula for great hiring w/Workday's Aneel Bhusri</title>
                <link>http://tigerthinks.com/2018/11/24/the-elusive-formula-for-great-hiring/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Culture spreads by assimilation and association</li>
  <li>Customer satisfaction begins with happy employees which begins with the hiring
process</li>
  <li>Integrity</li>
  <li>Priority: explicit learning. Ask people what they would go back and tell their
younger self</li>
  <li>Huffington: compassionate directness</li>
  <li>Ask about a time when someone was unhappy</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/11/24/the-elusive-formula-for-great-hiring/</guid>
                <description>
                    
                    Advice on hiring. Bhusri personally interviewed first 500 employees at Workday.
                    
                </description>
                <pubDate>Sat, 24 Nov 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Why Conduct One-On-Ones When They Take So Much Of Your Time?</title>
                <link>http://tigerthinks.com/2018/11/22/why-conduct-one-on-ones/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Prevent blowups
    <ul>
      <li>Look for warning signs</li>
    </ul>
  </li>
  <li>Build trust</li>
  <li>Give and receive feedback</li>
  <li>Spread culture</li>
  <li>Hold on to subordinates</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/11/22/why-conduct-one-on-ones/</guid>
                <description>
                    
                    One on ones help prevent blowups, build trust, give and receive feedback, spread culture, and hold on to subordinates
                    
                </description>
                <pubDate>Thu, 22 Nov 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>The One Management Hack That Will Help You Keep Your Sanity</title>
                <link>http://tigerthinks.com/2018/11/22/management-hack-that-will-help-you-keep-your-sanity/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Ask two questions to evaluate a task according to output:
    <ul>
      <li>How urgent is this?</li>
      <li>By how much does this increase the output of my team?</li>
    </ul>
  </li>
  <li>Prioritise tasks that increase the output of your team or prevent decreases in
team output</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/11/22/management-hack-that-will-help-you-keep-your-sanity/</guid>
                <description>
                    
                    The secret to prioritizing is getting really good at evaluating management tasks.
                    
                </description>
                <pubDate>Thu, 22 Nov 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>SYSK Selects: How Grief Works</title>
                <link>http://tigerthinks.com/2018/11/21/how-grief-works/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Most people don’t have significant grief. 25-65% of widows and widowers had
significant grief</li>
  <li>21% depression</li>
  <li>11% couldnt shake it after 6 months</li>
  <li>10% had mild relief</li>
  <li>Bonanno is the researcher</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/11/21/how-grief-works/</guid>
                <description>
                    
                    Grief isn't as easily described ('5 stages') or widespread as you might think
                    
                </description>
                <pubDate>Wed, 21 Nov 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>#47 - Catherine Olsson &amp; Daniel Ziegler on the fast path into high-impact ML roles</title>
                <link>http://tigerthinks.com/2018/11/20/olsson-ziegler-high-impact-ai/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>After dropping out of a machine learning PhD at Stanford, Daniel Ziegler
needed to decide what to do next. He’d always enjoyed building stuff and wanted
to shape the development of AI, so he thought a research engineering position at
an org dedicated to aligning AI with human interests could be his best option.</li>
  <li>Catherine Olsson, who has also worked at OpenAI, and left her computational
neuroscience PhD to become a research engineer at Google Brain. She and Daniel
share this piece of advice for those curious about this career path: just dive
in. If you’re trying to get good at something, just start doing that thing, and
figure out that way what’s necessary to be able to do it well.</li>
  <li>Daniel emphasizes that the most important thing was to practice <em>exactly</em>
those things that he knew he needed to be able to do.</li>
  <li>Google brain and open AI</li>
  <li>2 parts of AI system</li>
  <li>Giving correct objective</li>
  <li>Optimizing for objective robustly</li>
  <li>AI safety is general</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/11/20/olsson-ziegler-high-impact-ai/</guid>
                <description>
                    
                    OpenAI and Google Brain engineers on their unconventional paths into AI and the impactful work they're doing
                    
                </description>
                <pubDate>Tue, 20 Nov 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Teaching Tech Together</title>
                <link>http://tigerthinks.com/2018/11/18/teaching-tech-together/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Great book for everyone, even better for those interested in teaching CS.
Tons of citations. Added to reading list.</li>
  <li>What do we know about how humans learn? And how might we use that knowledge to
learn better, as individuals?</li>
  <li>Three levels of skill:
    <ul>
      <li>Novices don’t know what they don’t know — that is, they don’t yet have a
usable mental model of the domain.</li>
      <li>Competent practitioners can do normal tasks with normal effort under normal
circumstances because they have a mental model that’s good enough for everyday
purposes. The model doesn’t have to be complete or accurate, just useful.</li>
      <li>Experts have mental models that include all the complexities and special cases
that competent practitioners aren’t able to handle. This then allows them to
handle situations that are out of the ordinary. It also allows them to quickly
diagnose and solve problems.</li>
    </ul>
  </li>
  <li>The way you teach novices is to help them construct the right mental models,
so they have somewhere to put your facts.</li>
  <li>Mental model: a simplified representation of the most important parts of some
problem domain that is good enough to enable problem solving. One example is
the ball-and-spring models of molecules used in high school chemistry.</li>
  <li>Novice mental model:
<img src="/images/articles/teaching-tech-together-novice-mental-model.png" alt="novice-mental-model" /></li>
  <li>Competent practitioner mental model:
<img src="/images/articles/teaching-tech-together-competent-practitioner-mental-model.png" alt="competent-practitioner-mental-model" /></li>
  <li>Expert mental model:
<img src="/images/articles/teaching-tech-together-expert-mental-model.png" alt="expert-mental-model" /></li>
  <li>Experts are often so familiar with the subject that they can no longer imagine
what it’s like to not see the world that way. This is so pervasive that it has
a name: ‘the expert blind spot’. The expert blind spot may be overcome by
training, but it explains why experts are often less good at teaching the
subject than people with less expertise who still remember learning it
themselves. They also build intuition and are better at diagnosis</li>
  <li>Deliberate practice is defined as doing similar but subtly different things,
paying attention to what works and what doesn’t, and then changing behaviour
in response to that feedback to get cumulatively better.</li>
  <li>Individual learning strategies:
    <ul>
      <li>Spaced practice: space out your study time</li>
      <li>Retrieval practice: remember things</li>
      <li>Interleaving study of different topics</li>
      <li>Elaboration: talk to yourself</li>
      <li>Concrete examples: talk in the concrete</li>
      <li>Dual coding: combine images and words to have concepts reinforce each other</li>
    </ul>
  </li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/11/18/teaching-tech-together/</guid>
                <description>
                    
                    Learn by constructing mental models where you can put the facts related to the domain
                    
                </description>
                <pubDate>Sun, 18 Nov 2018 05:11:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>The Lazarus Drug</title>
                <link>http://tigerthinks.com/2018/11/18/the-lazarus-drug/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Naloxone might be leading some users to engage in riskier behavior — and
causing more deaths than it saves.</li>
  <li>Naloxone and narcan. Narcan is easy and accessible</li>
  <li>A moral hazard!! Nobody can agree on whether access to Lazarus drug is a net
positive or negative</li>
  <li>Does it save lives?? Or does it enable more people to feel “safe” taking
drugs? Hard to say</li>
  <li>The Moral Hazard of Lifesaving Innovations: Naloxone, Access, Opioid Abuse,
and Crime, by Jennifer L. Doleac and Anita Mukherjee</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/11/18/the-lazarus-drug/</guid>
                <description>
                    
                    Narcan and Naloxone have saved thousands of lives, but they might actually encourage dangerous drug use.
                    
                </description>
                <pubDate>Sun, 18 Nov 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Dissect Season 2: My Beautiful Dark Twisted Fantasy by Kanye West</title>
                <link>http://tigerthinks.com/2018/11/17/dissect-season-2/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<p>Listening to Dissect was truly life-changing.</p>

<p>Because it is such an intensely and uniquely auditory experience, I feel like I
cannot do it justice with a summary. Additionally, it is the rare piece of
striking content which has such an effect that I don’t feel the need to record
notes in order to remember it. Every time I hear a song from this album, or when
I am struck to listen to it all the way through on my own, Cole Cuchna’s voice
plays as an accompanying track in the back of my head.</p>

<p>Lost in the depth and beauty of the albums he is analyzing, I want to make sure
I acknowledge that Cole’s thoroughness and enthusiasm shines through and is a
work of art in itself.</p>

<p>Season 2 takes us through Kanye West’s My Beautiful Dark Twisted Fantasy, his
comeback album after the infamous VMA event where he interrupted Taylor Swift.
Learning about the backstory for Kanye’s music career and for the creation of
this album in particular gave me a deep, deep appreciation and kinship with
Kanye and his craft.</p>

<p>Seriously, listen to this podcast.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/11/17/dissect-season-2/</guid>
                <description>
                    
                    MBDTF: rightfully considered one of the greatest hip hop albums ever, even more so when put into context.
                    
                </description>
                <pubDate>Sat, 17 Nov 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>The Best SaaS landing page examples I've seen</title>
                <link>http://tigerthinks.com/2018/11/16/the-best-saas-landing-page-examples/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>What makes a great header?
    <ul>
      <li>Explains what it does and introduces what problem it might fix</li>
      <li>Creates curiosity in visitors to learn more about the product as you can only fit so much info at the beginning of the page.</li>
      <li>Avoids high bounce rates (people leaving without go beyond your Landing page)</li>
    </ul>
  </li>
  <li>Examples
    <ul>
      <li>CrazyEgg</li>
      <li>Lobe</li>
      <li>Plutio: use demos!</li>
    </ul>
  </li>
  <li>Social proof</li>
  <li>Great call to action</li>
  <li>Reference this for DyslexAI</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/11/16/the-best-saas-landing-page-examples/</guid>
                <description>
                    
                    SaaS landing pages should have a great header, social proof, a great call to action
                    
                </description>
                <pubDate>Fri, 16 Nov 2018 18:46:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Muscle Over Motor</title>
                <link>http://tigerthinks.com/2018/11/15/muscle-over-motor/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li><strong>Muscle Over Motor</strong></li>
  <li>Save money and gain enjoyment with manual labor</li>
  <li>Which activities do we choose: the expensive ones where you sit on your butt
and twist a throttle? Or the low-cost ones that also make us healthy and
develop our physical skills?</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/11/15/muscle-over-motor/</guid>
                <description>
                    
                    Manual labor &gt; electric labor for the able-bodied. Also need to consider opportunity cost of time
                    
                </description>
                <pubDate>Thu, 15 Nov 2018 17:33:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Killing Your $1000 Grocery Bill</title>
                <link>http://tigerthinks.com/2018/11/15/killing-your-grocery-bill/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Let’s say a family of four wants to spend only $365 per month on groceries,
saving them $579 per month over the USDA average family. Investing this
savings would compound into about $102,483.00 every ten years, which would
obviously make a pretty big improvement in the financial health of the
average young family.</li>
  <li>2012 dollars:</li>
  <li>Cost per 667 calorie “Meal” of common foods:
    <ul>
      <li>Basmati Rice: 25 cents</li>
      <li>Spaghetti noodles: 28 cents</li>
      <li>Black beans (uncooked): 49 cents</li>
      <li>Natural (peanuts only) Peanut Butter: 53.36 cents</li>
      <li>California Raw Almonds: 80 cents</li>
      <li>Bananas: 92 cents</li>
      <li>Potatoes: 57 cents</li>
      <li>Canola Oil:  14.38 cents</li>
      <li>Organic Extra Virgin Olive Oil:  57 cents</li>
      <li>Cheddar cheese: $1.09</li>
      <li>Apples:  $2.79</li>
      <li>Organic cage-free eggs:  $2.85</li>
      <li>Organic boneless skinless chicken breast: $8.00</li>
    </ul>
  </li>
  <li>Eat eggs, almonds, olive oil. Get cheap protein and fats. $/calorie is a good
way of thinking about this</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/11/15/killing-your-grocery-bill/</guid>
                <description>
                    
                    Price-consciousness when it comes to food is all about $/calorie
                    
                </description>
                <pubDate>Thu, 15 Nov 2018 12:27:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Being Bayesian</title>
                <link>http://tigerthinks.com/2018/11/15/being-bayesian/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Describing knowledge of a system probabilistically, having an appropriate
prior probability, know how to weigh new evidence, and following Bayes’s rule to
compute the revised distribution.</li>
  <li>How Yoshi sends signals about her food preferences.</li>
  <li>Prob x given y</li>
  <li>Posterior probability and prior probability</li>
  <li>Distribution after and distribution before</li>
  <li>Prior times likelihood is posterior</li>
  <li>Converges quickly to new posterior</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/11/15/being-bayesian/</guid>
                <description>
                    
                    Be more rigorous in real life by thinking in terms of priors, posteriors, and updates.
                    
                </description>
                <pubDate>Thu, 15 Nov 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Chinese Businessmen: Maybe Strategy Matters</title>
                <link>http://tigerthinks.com/2018/11/11/chinese-businessmen-maybe-strategy-matters/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Strategy matters when you’re a complex business, operating in a market at the
margins of what is possible. This might be true when you’re a cutting edge tech
company. It matters less when you’re selling commodities, as we were.</li>
  <li>The majority of traditional Chinese businessmen don’t think strategically.
They think opportunistically. And that’s perfectly fine — by and large, the
business domains they work in don’t demand it.</li>
  <li>The SME loop is as follows:
Imagine that you’re a traditional small-to-medium-sized enterprise, or ‘SME’.
The business model doesn’t matter for this discussion. You could be making and
selling physical items, in which case you own equipment and hold inventory and
require a fair amount of cash on hand. Or you’re a software consultancy and you
turn programmer hours into code. Or you’re a distributor: you buy some product,
and sell it to consumers for a markup.
After a few years of execution, most SMEs stagnate. They remain small-to-medium
sized. Growth slows to a crawl. If we treat this study of businesses like we
would organisms, there appears to be an invisible ceiling that constrains the
growth of many of these small businesses</li>
  <li>The common thread amongst all these companies — or at least, the ones that
successfully broke free from the SME loop — is this: they had access to a line
of capital that enabled their growth.</li>
  <li>Maybe strategy matters. Maybe trial and error works only for starting small
businesses, but breaking past the SME loop requires picking markets or
businesses strategically.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/11/11/chinese-businessmen-maybe-strategy-matters/</guid>
                <description>
                    
                    Strategy might matter for growing massive, but it is less important at small scales.
                    
                </description>
                <pubDate>Sun, 11 Nov 2018 09:30:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>#1189 - Alex Honnold</title>
                <link>http://tigerthinks.com/2018/11/11/alex-honnold/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Visualize everything, all the sensations</li>
  <li>Make sure nothing is surprising</li>
  <li>Football is brain damage</li>
  <li>No free soloer has ever died free soloing</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/11/11/alex-honnold/</guid>
                <description>
                    
                    Alex Honnold is a big wall free solo climber. Good insight into the mind of someone who is crazy but also rational.
                    
                </description>
                <pubDate>Sun, 11 Nov 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Why Are We Still Teaching Reading the Wrong Way?</title>
                <link>http://tigerthinks.com/2018/11/08/why-are-we-still-teaching-reading-the-wrong-way/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Reading should be taught methodically beginning with phonics, not by putting
books in front of kids and telling them to read.</li>
  <li>Study backing this up: https://www.apmreports.org/story/2018/09/10/further-reading-hard-words</li>
</ul>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/11/08/why-are-we-still-teaching-reading-the-wrong-way/</guid>
                <description>
                    
                    Reading should be taught methodically beginning with phonics, not by putting books in front of kids and telling them to read.
                    
                </description>
                <pubDate>Thu, 08 Nov 2018 08:19:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>355. Where Does Creativity Come From (and Why Do Schools Kill It Off)?</title>
                <link>http://tigerthinks.com/2018/11/08/where-does-creativity-come-from/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Family environments and “diversifying experiences” (including the early death of a parent); intrinsic versus extrinsic motivations; schools that value assessments, but don’t assess the things we value. All these elements factor into the long, mysterious march towards a creative life.</li>
  <li>AI weiwei</li>
  <li>Changed the world. Prison is not big enough to hold him</li>
  <li>Dad exiled from China when he was born</li>
  <li>Left China after jailed</li>
  <li>Dean simonton again</li>
  <li>Diversifying experiences is events in childhood that put you on a different
track from everyone else</li>
  <li>Big five personality factors for creativity</li>
  <li>Conscientious</li>
  <li>Extroversion</li>
  <li>Neuroticism</li>
  <li>Agreeableness</li>
  <li>Openness to experience</li>
  <li>Four P’s</li>
  <li>Project</li>
  <li>Passion</li>
  <li>Peers</li>
  <li>Play</li>
  <li>See Anki for much more</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/11/08/where-does-creativity-come-from/</guid>
                <description>
                    
                    Creativity stems from early-life circumstances. How can these circumstances be replicated?
                    
                </description>
                <pubDate>Thu, 08 Nov 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Nina Jacobson: How to Make a Hit in Hollywood</title>
                <link>http://tigerthinks.com/2018/11/08/nina-jacobson/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Nina Jacobson is a force in Hollywood. She’s behind some of the biggest movies
of the last 20 years: The Sixth Sense, Pirates of the Caribbean, The Chronicles
of Narnia, The Hunger Games, and most recently Crazy Rich Asians.</li>
  <li>If you don’t think your employee is better than you, you’ve hired the wrong
person</li>
  <li>It’s better to make something a few people love than something lots of people
merely like</li>
  <li>You will fail</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/11/08/nina-jacobson/</guid>
                <description>
                    
                    Big failures can be handled by pushing forward and believing in your core values.
                    
                </description>
                <pubDate>Thu, 08 Nov 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>David Deutsch on the infinite reach of knowledge</title>
                <link>http://tigerthinks.com/2018/11/08/david-deutsch-infinite-reach-of-knowledge/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Humans possess one unique skill: attaining knowledge.</li>
  <li>Oxford professor, father of quantum computing, recluse</li>
  <li>Humans are significant because we have knowledge</li>
  <li>Why wouldn’t advanced civilizations go microscopic instead of macroscopic?
Minimize distances</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/11/08/david-deutsch-infinite-reach-of-knowledge/</guid>
                <description>
                    
                    Futurist and optimist. Humans are significant because we have knowledge.
                    
                </description>
                <pubDate>Thu, 08 Nov 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>The Friendship Cure</title>
                <link>http://tigerthinks.com/2018/11/07/the-friendship-cure/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Kate Leaver</li>
  <li>Modern society structure, technology make us think we have an enormous circle
of friends when we really need 5 good ones</li>
  <li>Any ailment physical or mental can be linked to or made worse by loneliness</li>
  <li>To make new friends, start by auditing your own life</li>
  <li>Loneliness is like a silent disco where you’re the only one without headphones
on</li>
  <li>Female friendship has vulnerability</li>
  <li>Men respond to anxiety with fear and flight, women respond with tend and
befriend</li>
  <li>Internalized homophobia with male friendships</li>
  <li>Both sides need some parts of the other</li>
  <li>“Your flaws bring somewhere”</li>
  <li>Give yourself and others permission to be friends with the opposite sex</li>
  <li>Sardinia bunch of 100 year old people – they have normal lives but they are
always surrounded by friends and family</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/11/07/the-friendship-cure/</guid>
                <description>
                    
                    5 great friends &gt; many shallow ones
                    
                </description>
                <pubDate>Wed, 07 Nov 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>#449: Faster and Cheaper Alternatives to College</title>
                <link>http://tigerthinks.com/2018/11/07/faster-and-cheaper-alternatives-to-college/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/11/07/faster-and-cheaper-alternatives-to-college/</guid>
                <description>
                    
                    Why college is the way it is today, and why that makes it a suboptimal choice for a lot of people
                    
                </description>
                <pubDate>Wed, 07 Nov 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>The Chinese Businessman Paradox</title>
                <link>http://tigerthinks.com/2018/11/06/chinese-businessman-paradox/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Characteristics of people with “Chinese businessman wisdom”: thrifty, low-key,
savvy, cunning, pragmatic, and respected — even begrudgingly! — by the
communities they run businesses in.</li>
  <li>The following paradox: first, that the most successful Chinese businessmen
were often the least educated ones. Second, that Chinese businessmen as a
group were more superstitious than most, but that this didn’t seem to have
much of an effect on their ability to run their businesses! And finally, that
the vast majority of Chinese businesspeople did not think too far ahead. They
optimised locally, and by keeping close tabs on the bottom line, shut down
lines of business that weren’t performing as well.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/11/06/chinese-businessman-paradox/</guid>
                <description>
                    
                    The success of Chinese businessmen under 'poor' business practices should make us question accepted Western wisdom.
                    
                </description>
                <pubDate>Tue, 06 Nov 2018 07:48:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>354. How to Be Creative</title>
                <link>http://tigerthinks.com/2018/11/06/how-to-be-creative/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>“Novelty that works”</li>
  <li>Need field experience and tests. Labs super overrepresented. 86% of psych
research is on college undergrads</li>
  <li>Dean Edmonton Traits:</li>
  <li>General intelligence</li>
  <li>Absolutely love what they do</li>
  <li>Willing to overcome struggles</li>
  <li>No blanket pattern of mental illness :)</li>
  <li>Ai weiwei, Chinese guy who is same age as dad who grew up in prison camp</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/11/06/how-to-be-creative/</guid>
                <description>
                    
                    We need more field experience and tests on creativity to really get to the root of it.
                    
                </description>
                <pubDate>Tue, 06 Nov 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Chinese Businessmen: Let Reality Be The Teacher</title>
                <link>http://tigerthinks.com/2018/11/04/chinese-businessman-reality-teacher/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Ng Teng Fong: Singaporean businessman who never went to school but has built
largest real estate development company in Singapore</li>
  <li>There are two basic approaches to problem solving: trial and error, and theory
and insight. It’s difficult to overstate how much we are driven towards theory
and insight by the formal education we receive.</li>
  <li>The optimal strategy for learning in business is trial and error, because
business changes too quickly for there to be immutable rules. Traditional
Chinese businessmen are thus the product of trial and error. The children who
run their parent’s businesses are themselves taught via this principle of
learning.</li>
  <li>If someone makes a mistake, takes a hit — as Ng Teng Fong did — but remains in
the game, what matters is what they learn from it.</li>
  <li>Successful Chinese businessmen are better because they are better at trial and
error. They use less cycles to learn the right lessons.</li>
  <li>It works because it can be as thoughtful as the person who does ‘thinking and
insight’; it works because trial and error never lies. It lets reality become
the teacher.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/11/04/chinese-businessman-reality-teacher/</guid>
                <description>
                    
                    Trial and error &gt; business theory!!
                    
                </description>
                <pubDate>Sun, 04 Nov 2018 14:23:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>What is Harvard Trying to Hide?</title>
                <link>http://tigerthinks.com/2018/11/01/what-is-harvard-trying-to-hide/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>With great prestige should come great responsibility. That’s why opening up
Harvard’s admissions practices to the light of day is more than just the means
to a good story or a cudgel in the affirmative action wars. It’s only fair.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/11/01/what-is-harvard-trying-to-hide/</guid>
                <description>
                    
                    Best article on Harvard racial discrimination lawsuit
                    
                </description>
                <pubDate>Thu, 01 Nov 2018 15:31:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Ask HN: What do you do in your 1-on-1s with your direct reports?</title>
                <link>http://tigerthinks.com/2018/10/31/ask-hn-1-on-1/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<p>This seems to work for me:</p>

<ol>
  <li>This is your time to talk about whatever is on your mind. If you want to talk
about the footy over the weekend, that’s fine. If you want to talk about work
or issues at home or career progression, that’s fine.</li>
  <li>Sometimes there is not much to talk about - and that’s fine too. If they do
not have much to say on a particular day and I don’t have much to say, it’s a
short meeting.</li>
  <li>As said previously, try never to reschedule and never, never forget.</li>
  <li>It’s a really good time as a manager to practice listening. For that reason,
I never have an agenda (i.e. things I want to say) at these meetings. Also, I
try to contain the impulse to give advice unless they specifically ask for
it.</li>
  <li>I make it quite clear that as far as legally possible, I will maintain
confidentiality. The only time that something may be relayed upward is if
there is requirement for me to do so (e.g. an employee reporting
harassment).</li>
</ol>

<p>From Manager Tools Podcast:</p>

<ol>
  <li>Have a 1x1 once a week with each direct for 30 min</li>
  <li>If you can have your 1x1 walking (go for coffee, head outside) try and do
that; conversation flows easier when it’s not in a confined space like a
meeting room.</li>
  <li>Loosely allocate the meeting in 1/2: 15 min for them to talk about whatever
they want. 15 min for you to talk about what you need to talk about (usually
top-&gt;down information), and at least leave a few min at the end for career
development or tactics.</li>
  <li>Throw out rule #3 if they want to talk more than 15 min. Always cut your
portion down to accommodate them. The point of the meeting is to build trust.
Building trust means listening to your directs and getting to know them and
what makes them tick. You’ll always learn more by listening than instructing.</li>
</ol>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/10/31/ask-hn-1-on-1/</guid>
                <description>
                    
                    Wisdom of the crowd for 1-on-1s
                    
                </description>
                <pubDate>Wed, 31 Oct 2018 12:22:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>The SaaS Learning Curve</title>
                <link>http://tigerthinks.com/2018/10/27/the-saas-learning-curve/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Innovators represent about 10% of the market and will provide you with great
product feedback but rarely have a budget. As such, they are quite useful in
the pre-revenue stage of a Service as a Software company.</li>
  <li>Early Adopters represent another 10–15% of the market and they have a budget.
They often buy because they seek a competitive advantage. They see that being
achieved by working with you to realize what should become a shared vision for
your product.</li>
  <li>Start thinking of SaaS as Service as a Software, not Software as a Service.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/10/27/the-saas-learning-curve/</guid>
                <description>
                    
                    People &gt; tech; SaaS = Service as a Software
                    
                </description>
                <pubDate>Sat, 27 Oct 2018 11:00:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Don't Take Generic Business Advice From VCs</title>
                <link>http://tigerthinks.com/2018/10/27/dont-take-generic-business-advice-from-vcs/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<p><img src="/images/articles/generic-vcs-possible-businesses.png" alt="possible-businesses" /></p>

<ul>
  <li>VC’s incentives are not the same as entrepreneurs’, don’t delude yourself into
thinking that they are.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/10/27/dont-take-generic-business-advice-from-vcs/</guid>
                <description>
                    
                    VC's incentives are not the same as entrepreneurs', don't delude yourself into thinking that they are.
                    
                </description>
                <pubDate>Sat, 27 Oct 2018 07:40:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Documents OCR: Improving Efficiency by Making PDFs Searchable</title>
                <link>http://tigerthinks.com/2018/10/27/documents-ocr-efficiency-pdfs-searchable/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<p>Use Google Cloud Vision. Good OCR pipeline reference for startup.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/10/27/documents-ocr-efficiency-pdfs-searchable/</guid>
                <description>
                    
                    Use Google Cloud Vision. Good OCR pipeline reference for startup.
                    
                </description>
                <pubDate>Sat, 27 Oct 2018 07:37:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Quitting my job has been the best thing I've done for my career</title>
                <link>http://tigerthinks.com/2018/10/24/quitting-my-job-best-thing-for-career/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<p>Interesting account from a software developer who quit his job and how it helped his life.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/10/24/quitting-my-job-best-thing-for-career/</guid>
                <description>
                    
                    Interesting account from a software developer who quit his job and how it helped his life.
                    
                </description>
                <pubDate>Wed, 24 Oct 2018 16:16:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>353. How to Optimize Your Apology</title>
                <link>http://tigerthinks.com/2018/10/23/how-to-optimize-your-apology/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Don’t wait</li>
  <li>Don’t give context</li>
  <li>Apologise for actions not misunderstandings</li>
  <li>Identify your victim</li>
  <li>Express remorse</li>
  <li>Restitution</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/10/23/how-to-optimize-your-apology/</guid>
                <description>
                    
                    Considerations when apologizing: don't wait, don't give context, apologize for actions not misunderstandings, identify your victim, express remorse, provide restitution.
                    
                </description>
                <pubDate>Tue, 23 Oct 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>The untold story of Stripe, the secretive $20bn startup driving Apple, Amazon, and Facebook</title>
                <link>http://tigerthinks.com/2018/10/21/stripe-20-billion/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<p>Narrative deep-dive on one of my favorite startups and pair of founders, Patrick
and John Collison.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/10/21/stripe-20-billion/</guid>
                <description>
                    
                    Narrative deep-dive on one of my favorite startups and pair of founders.
                    
                </description>
                <pubDate>Sun, 21 Oct 2018 17:08:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Getting Rich: from Zero to Hero in One Blog Post</title>
                <link>http://tigerthinks.com/2018/10/20/getting-rich-from-zero-to-hero/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Here’s how to cut your life costs in half. Start by getting rid of your Debt
Emergency if you have one. Live close to work. Move to another city if you
enjoy adventure. Don’t borrow money for cars, and don’t buy stupid ones. Ride
a bike wherever you can. Cancel your TV service. Stop wasting money on
groceries. Give your kids the opportunity to achieve greatness without being
pampered. Lose the overpriced cell phones. Learn to appreciate the
life-boosting joy of using your own body to get things done. Learn to mock
convenience. Practice optimism.</li>
  <li>If you can get 25 times your annual spending saved up and working for you,
that is enough to live off – forever.</li>
  <li>If you can save 50% of your take-home pay starting at age 20, you’ll be
wealthy enough to retire by age 37. If you already have some assets now,
you’re even closer than that.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/10/20/getting-rich-from-zero-to-hero/</guid>
                <description>
                    
                    Entry point for Mr. Money Mustache's work
                    
                </description>
                <pubDate>Sat, 20 Oct 2018 19:54:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>From Research to Startup, There and Back Again</title>
                <link>http://tigerthinks.com/2018/10/20/from-research-to-startup/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Raise. Prices.</li>
  <li>Silicon valley starts with education and universities</li>
  <li>Top challenge of big companies is industrial, production ready machine
learning applications</li>
  <li>You should anticipate and enjoy the heavy tail of complexity instead of
searching for elegant solutions</li>
  <li>Alan Kay: why are cars valued more than computers? They have no idea what
computers can do</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/10/20/from-research-to-startup/</guid>
                <description>
                    
                    Decades of experience in Silicon Valley with John Hennessy (current chairman of Alphabet)
                    
                </description>
                <pubDate>Sat, 20 Oct 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>108: James Clear | Forming Atomic Habits for Astronomic Results</title>
                <link>http://tigerthinks.com/2018/10/17/forming-atomic-habits-for-astronomic-results/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>4 rules structuring choices</li>
  <li>Make it obvious</li>
  <li>Make it attractive</li>
  <li>Make it easy</li>
  <li>Make it satisfying</li>
  <li>Discipline over willpower</li>
  <li>Pick good menus. Menu if you pull out your phone is Twitter, discord, etc.
Menu if you put on workout clothes is: go to the gym</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/10/17/forming-atomic-habits-for-astronomic-results/</guid>
                <description>
                    
                    Reducing effort to make habits second-nature.
                    
                </description>
                <pubDate>Wed, 17 Oct 2018 11:36:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Dissect Season 1: To Pimp a Butterfly by Kendrick Lamar</title>
                <link>http://tigerthinks.com/2018/10/17/dissect-season-1/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<p>Listening to Dissect was truly life-changing.</p>

<p>Because it is such an intensely and uniquely auditory experience, I feel like I
cannot do it justice with a summary. Additionally, it is the rare piece of
striking content which has such an effect that I don’t feel the need to record
notes in order to remember it. Every time I hear a song from this album, or when
I am struck to listen to it all the way through on my own, Cole Cuchna’s voice
plays as an accompanying track in the back of my head.</p>

<p>Lost in the depth and beauty of the albums he is analyzing, I want to make sure
I acknowledge that Cole’s thoroughness and enthusiasm shines through and is a
work of art in itself.</p>

<p>Season 1 takes us through Kendrick Lamar’s To Pimp a Butterfly, an
award-winning album that cemented my favorite rapper in the pantheon following
good kid, maad city.</p>

<p>Seriously, listen to this podcast.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/10/17/dissect-season-1/</guid>
                <description>
                    
                    Incredibly detailed analysis of To Pimp a Butterfly. Incredible music with a purpose
                    
                </description>
                <pubDate>Wed, 17 Oct 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Chinese Businessmen: Superstition Doesn't Count</title>
                <link>http://tigerthinks.com/2018/10/16/chinese-businessmen-superstition-doesnt-count/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>But if rationality matters so much, how is it that an entire generation of
Chinese businessmen could remain so superstitious yet achieve so much success?</li>
  <li>To explain this, it helps to understand that there are two commonly understood
forms of rationality, and LessWrong is mostly concerned with only one of them.
The two forms are:
    <ul>
      <li>Epistemic rationality — how do you know that your beliefs are true?</li>
      <li>Instrumental rationality — how do you make better decisions to achieve your goals?</li>
      <li>Jonathan Baron calls the first form — epistemic rationality — “thinking
about beliefs”. He calls the second “thinking about decisions”.</li>
    </ul>
  </li>
  <li>If you’re instrumentally rational, you don’t need to optimise for correct and
true beliefs to succeed. You merely need a small set of true beliefs, related
to your field; these beliefs can be determined from trial and error itself.</li>
  <li>Keith Stanovich laments that almost all societies are focused on intelligence
when the costs of irrational behavior are so high. But you can pick out the
signatures of rational thinking if you are alert to them. According to
Stanovich, they include adaptive behavioral acts, efficient behavioral
regulation, sensible goal prioritization, reflectivity, and the proper
treatment of evidence.</li>
  <li>If I were to summarise the rough thrust of these books:
    <ul>
      <li>Don’t do trial and error where error is catastrophic.</li>
      <li>Don’t repeat the same trials over and over again (aka don’t repeat the same
mistakes over and over again).</li>
      <li>Increase the number of trials you can do in your life. Decrease the length
and cost of each trial.</li>
      <li>In fields with optionality (i.e. your downside is capped but your upside is
large) the more trials you take, and the more cheap each trial costs, the
more likely you’ll eventually win. Or, as Taleb says: “randomness is good
when you have optionality.”</li>
      <li>Write down your lessons and approaches from your previous successful trials,
so you may generalise them to more situations (Principles, chapter 5)</li>
      <li>Systematically identify the factor that gives positive evidence, and vary
that to maximise the expected size of the impact (Thinking and Deciding,
chapter 7)</li>
      <li>Actively look for disconfirming evidence when you’ve found an approach that
seems to work. (Thinking and Deciding, chapter 7, Principles, chapter 3).</li>
    </ul>
  </li>
  <li>It doesn’t seem like the sorts of rationality that LessWrong prizes, or even
the sort of rationality explored by Kahneman and Tversky’s research matter
that much when it comes to success in business or in life. I suspect that
instrumental rationality, deployed in the service of trial and error, is
ultimately what matters.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/10/16/chinese-businessmen-superstition-doesnt-count/</guid>
                <description>
                    
                    Chinese businessmen are superstitious yet still successful because maybe 'rationality' isn't all that.
                    
                </description>
                <pubDate>Tue, 16 Oct 2018 10:21:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>How Brazilian Jiu-Jitsu Will Make You a Better Man</title>
                <link>http://tigerthinks.com/2018/10/15/jiu-jitsu-better-man/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Origin in Japanese jiu jitsu</li>
  <li>Why jiu jitsu?</li>
  <li>It’s more reliable. Technical leverage, distance management</li>
  <li>You’re not gonna punch me, I’m gonna grab you. I’m not gonna agree to stand in
front of you and punch</li>
  <li>Everyone is the same height on the ground</li>
  <li>We have 4 limbs, they have 2</li>
  <li>More applicable and practical than judo</li>
  <li>Self defense isn’t winning fight, it’s knowing how to avoid fight</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/10/15/jiu-jitsu-better-man/</guid>
                <description>
                    
                    Gracie family member on the origins and modern usages of BJJ.
                    
                </description>
                <pubDate>Mon, 15 Oct 2018 09:15:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Is the FIRE Movement a Good Idea?</title>
                <link>http://tigerthinks.com/2018/10/11/is-fire-a-good-idea/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>FIRE is attractive to engineer types</li>
  <li>FIRE is predicated on being able to retire early</li>
  <li>But living frugally, adopting the ideas of the FIRE movement with regard to
early investment in index funds or ETFs, and remaining financially prudent
throughout one’s career — these ideas are definitely a prerequisite to
building career moats.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/10/11/is-fire-a-good-idea/</guid>
                <description>
                    
                    You need money so you don't have to worry about day-to-day living, but you may not want to actually retire early.
                    
                </description>
                <pubDate>Thu, 11 Oct 2018 04:54:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>How to deliver on Machine Learning projects</title>
                <link>http://tigerthinks.com/2018/10/10/how-to-deliver-on-machine-learning-projects/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Good set of practical tips and methods for ML
    <ul>
      <li>Just flashcarding the important parts for now, but can come back and
reference?</li>
      <li>Nah do it all. Will be starting an ML project very soon so good to have in
back pocket.</li>
    </ul>
  </li>
  <li>The ML Engineering Loop, where ML Engineers iteratively
    <ul>
      <li>Analyze
        <ul>
          <li>Training set error bottleneck:
            <ul>
              <li>Choose a different optimization algorithm or tune yours</li>
              <li>Make sure you can memorize the dataset; model may be too small or
inexpressive (underfitting)</li>
              <li>Mislabeled/corrupt data. Manually inspect some training examples</li>
            </ul>
          </li>
          <li>Validation set error bottleneck:
            <ul>
              <li>Overfitting</li>
              <li>Not enough training data</li>
              <li>Training data distribution doesn’t match validation/test sets</li>
            </ul>
          </li>
          <li>Test set error bottleneck:
            <ul>
              <li>Overfitting</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>Select an approach
        <ul>
          <li>Find simplest way to address bottleneck</li>
          <li>Bias toward simple, fast solutions</li>
          <li>If you need to tune optimizer for better fitting:
            <ul>
              <li>Change learning rate or momentum. Starting with a small momentum is
usually the easiest to get working</li>
              <li>Try different initialization strategies</li>
            </ul>
          </li>
          <li>If you need to fit more data:
            <ul>
              <li>Use a more expressive model class</li>
              <li>Check examples model gets wrong. Invest time in data cleanup</li>
            </ul>
          </li>
          <li>If model is overfitting:
            <ul>
              <li>Add training data</li>
              <li>Use data augmentation</li>
              <li>Hyperparameter tuning</li>
              <li>Try different regularization or different model class</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>Implement
        <ul>
          <li>Build only what you need to build, and do it fast</li>
          <li>The goal of this phase is to prototype rapidly so that you can measure the
results, learn from them, and go back around the cycle quickly.</li>
          <li>If possible, for any problem, we recommend going through these successive steps:
            <ul>
              <li>Find an implementation of a model solving a similar problem.</li>
              <li>Reproduce the implementation locally in the conditions of the existing
model (same dataset and hyperparameters).</li>
              <li>Slowly tweak the implementation of the model and the data pipeline to
match your needs.</li>
              <li>Rewrite any parts needed.</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>Measure
        <ul>
          <li>If each cycle of the ML Loop is relatively cheap</li>
          <li>Print each relevant metric to decide if you’re ready to ship</li>
          <li>Build a dashboard</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Tips:
    <ul>
      <li>Build a dashboard so you don’t have to do analysis manually</li>
    </ul>
  </li>
</ul>

<p><img src="/images/articles/deliver-machine-learning-ml-loop.png" alt="ml-loop" /></p>

<ul>
  <li>Getting started:
    <ul>
      <li>Setting up training, development and testing datasets, and</li>
      <li>Getting a simple model working.</li>
      <li>Goal is not to solve the problem</li>
      <li>The test set should reflect the needs of the product or business.</li>
      <li>It’s helpful to know how well humans perform on the test set, or how well
existing / competing systems perform. These give you a bound on the optimal
error rate, the best possible performance you could achieve.</li>
    </ul>
  </li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/10/10/how-to-deliver-on-machine-learning-projects/</guid>
                <description>
                    
                    Step-by-step pipeline from idea to production for an ML project
                    
                </description>
                <pubDate>Wed, 10 Oct 2018 14:15:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>False Discovery Rates</title>
                <link>http://tigerthinks.com/2018/10/10/false-discovery-rates/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Double blind medical studies</li>
  <li>If you torture the data enough, eventually it will tell you what you want</li>
  <li>Find out what data is random and not random using p values</li>
  <li>A statistically significant result can be spurious if good experimental design
is not followed</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/10/10/false-discovery-rates/</guid>
                <description>
                    
                    How to reduce the noise of making multiple comparisons.
                    
                </description>
                <pubDate>Wed, 10 Oct 2018 10:12:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Why Are Enterprises So Slow?</title>
                <link>http://tigerthinks.com/2018/10/08/why-are-enterprises-so-slow/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<p><img src="/images/articles/slow-enterprises-polygon-of-enterprise-despair.png" alt="slow-enterprises-polygon-of-enterprise-despair" /></p>

<ul>
  <li>“one throat to choke”: From ownership comes responsibility. A lot of the political footwork in an
enterprise revolves around trying to not own technologies.</li>
  <li>If there’s a common thread to these factors in reducing risk, it is to shift
responsibility and power from the individual to the corporate entity. If
you’re a regulated, systemically-significant enterprise, then the last thing
you or the public wants is for one person to wield too much power, either
through knowledge of a system, or ability to alter that system in their own
interests.</li>
  <li>The corollary of this is that it is very hard for one person to make change by
themselves. And, as we all know, if a task is given to multiple people to
achieve together, then things get complicated and change slows up pretty fast as
everyone must keep each other informed as to what everyone else is doing.</li>
  <li>The reality is that – as I said above – taking responsibility and owning a
technology or layer of your stack brings with it real costs and risks that you
may not be able to bear and stay in business.</li>
  <li>So however great you are as a team, you’re delivery cadence is constrained to a
local maxima based on your external dependencies, which are (effectively)
non-negotiable.</li>
  <li>How to fix things:
    <ul>
      <li>Senior leadership support
        <ul>
          <li>Bezos big mandate (2002):
            <ul>
              <li>All teams expose data through service interfaces</li>
              <li>Teams must communicate with each other through these interfaces</li>
              <li>No other communication is allowed other than service interfaces over the
network</li>
              <li>It doesn’t matter what technology they use</li>
              <li>All service interfaces must be designed to be externalizable</li>
              <li>Anyone wwho doesn’t do this will be fired</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>Reduce complexity</li>
      <li>Cross-functional team (product, marketing, sales, etc.)</li>
      <li>Use your cynical old heads</li>
    </ul>
  </li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/10/08/why-are-enterprises-so-slow/</guid>
                <description>
                    
                    Great visibility from a technical process perspective into why the enterprise is slow.
                    
                </description>
                <pubDate>Mon, 08 Oct 2018 13:41:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Income and expenses: What property managers need to know</title>
                <link>http://tigerthinks.com/2018/10/06/income-and-expenses-property-managers/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<p>Types of income:</p>

<table>
  <thead>
    <tr>
      <th>Income source</th>
      <th>What is it?</th>
      <th>Who pays it</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Management fees</td>
      <td>A standardized fee for performing normal property management duties—usually a percentage of the rent (or a flat fee for associations).</td>
      <td>Rental owner or association</td>
    </tr>
    <tr>
      <td>Maintenance markups</td>
      <td>A surcharge for acting as a general contractor on maintenance items—usually a percentage of the total property maintenance bill.</td>
      <td>Rental owner or association</td>
    </tr>
    <tr>
      <td>Finder’s fees</td>
      <td>A fee charged for finding a new tenant for a vacant unit. This fee is usually paid by the rental owner in weaker rental markets, and paid by the applicant in stronger ones.</td>
      <td>Applicant or rental owner</td>
    </tr>
    <tr>
      <td>Rental application fees</td>
      <td>A fee charged to cover the costs of tenant verification .</td>
      <td>Applicant</td>
    </tr>
    <tr>
      <td>Lockout fees or  “re-key” fees</td>
      <td>A penalty fee if the tenant locks themselves out or loses a key. This is especially common in student housing.</td>
      <td>Resident</td>
    </tr>
    <tr>
      <td>Out-of-lease surcharge</td>
      <td>A fee designed to encourage a tenant to sign a long-term lease.</td>
      <td>Resident</td>
    </tr>
    <tr>
      <td>Non-sufficient funds (NSF) fees</td>
      <td>A penalty fee meant to deter fraudulent payments, and to cover associated bank fees.</td>
      <td>Resident</td>
    </tr>
    <tr>
      <td>Late fees</td>
      <td>A penalty if rent, association fees, or some other assessed charge isn’t paid on time.</td>
      <td>Resident</td>
    </tr>
  </tbody>
</table>

<p>Types of expenses:</p>

<table>
  <thead>
    <tr>
      <th>Expense</th>
      <th>What is it?</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Payroll and contractor fees</td>
      <td>Paying your employees or contractors</td>
    </tr>
    <tr>
      <td>Rent</td>
      <td>Rent for your office space</td>
    </tr>
    <tr>
      <td>Supplies</td>
      <td>Office and maintenance supplies</td>
    </tr>
    <tr>
      <td>Utilities</td>
      <td>Water, electric, and HVAC bills</td>
    </tr>
    <tr>
      <td>Bookkeeping</td>
      <td>Many property managers work with an accountant, especially at tax time</td>
    </tr>
    <tr>
      <td>Service fees</td>
      <td>Buildium property management software , tenant screenings</td>
    </tr>
    <tr>
      <td>Membership fees</td>
      <td>Industry organizations like NARPM; Chamber of Commerce</td>
    </tr>
  </tbody>
</table>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/10/06/income-and-expenses-property-managers/</guid>
                <description>
                    
                    Summary of the relevant PM income and expense types, and who is responsible for each
                    
                </description>
                <pubDate>Sat, 06 Oct 2018 12:29:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Jeremiah Lowin - Machine Learning in Investing</title>
                <link>http://tigerthinks.com/2018/10/05/machine-learning-in-investing/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Jeremiah Lowin ML 101</li>
  <li>Bias towards models that “can shrug”/provide uncertainty</li>
  <li>Features and bags of words and labels etc.</li>
  <li>Regression is fitting to continuous data, classification to discrete</li>
  <li>Intelligence Augmentation is great. Humans decent at investment decisions</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/10/05/machine-learning-in-investing/</guid>
                <description>
                    
                    Investment theses of a top ML investor.
                    
                </description>
                <pubDate>Fri, 05 Oct 2018 17:57:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Startup School 2018</title>
                <link>http://tigerthinks.com/2018/10/05/startup-school/</link>
                <content:encoded>
                    <![CDATA[
                    <p><a href="https://www.startupschool.org/companies/i2zceSAMG6-wnw">Graduation</a></p>

<p>Helpful but mostly canned advice on how to start a company. It was good to
codify a lot of this knowledge in flashcards, and the speakers certainly
expressed the ideas more eloquently than I could have.</p>

<h2 id="notes">Notes</h2>

<ul>
  <li>what is the most important thing to a startup? (Sam Altman)	build something people spontaneously tell their friends about</li>
  <li>why is it easier to start a hard startup than an easy startup?	interesting problems attract talent</li>
  <li>what are the four traits Paul Buchheit came up with as the most important traits in founders?	frugality, focus, obsession, love</li>
  <li>What are the three things that Michael Seibel attributes his startup success to?	Technical team. Don’t spend much money. Ego was highly tied to startup.</li>
  <li>what is the best definition of your customer? (Seibel)	the person or party whose problem you are solving</li>
  <li>why is it better to start with a paid product instead of a free product? (Seibel)	you know that your users are using you because you are solving their problem instead of just because you are free</li>
  <li>what is the difference between an artist and entrepreneur? (Seibel)	an entrepreneur solves an actual problem with a product that is appreciated</li>
  <li>what is the first type of customer you should target? (Seibel)	the <em>desperate</em> ones</li>
  <li>what is the correct way to provide a discount on your product?	“add in an exploding ““discount”” – e.g. give the customer a 15% higher price, say AWS has given you a discount so you can pass that down to the customer, and only make that available for 30 days. this will come up in all of their internal discussions”</li>
  <li>what are the steps in the initial product market fit search? (Rusenko)	idea -&gt; prototype -&gt; launch -&gt; traction</li>
  <li>what are the steps in the continued product market fit refinement? (Rusenko)	monetization -&gt; growth</li>
  <li>what is an MRP in the context of product market fit? (Rusenko)	Minimum Remarkable Product</li>
  <li>what is customer renewal rate?	% of eligible subscriptions who renew</li>
  <li>why is customer renewal rate preferable to churn rate?	since churn rate is churned customers / total customers, it can be deceiving if your growth is accelerating (it will look lower than it actually is)</li>
  <li>what are the three key metrics to track product market fit?	returning usage, net promoter score, customer renewal rates</li>
  <li>what is net promoter score?	How likely is it that you would recommend our company/product/service to a friend or colleague? (0-10)<br /><br />Subtract the percentage of customers who are Detractors (0-6) from the percentage of customers who are Promoters (9-10).</li>
  <li>what is the difference between pivoting and iterating? (Seibel)	pivoting is changing the customer and/or the problem (rare). itearting is changing the solution (common)</li>
  <li>what does BEM stand for in CSS?	Block-Element-Modifier</li>
  <li>what is design? (Tan)	creating things for users that work well and delight them</li>
  <li>what are the three elements of design that are important for startups? (Tan)	product design then interaction design then visual design</li>
  <li>what is the central question for product design? (Tan)	what’s the problem and who’s the solution for?</li>
  <li>what’s the central question for interaction design? (Tan)	how does it work?</li>
  <li>what’s the central question for visual design? (Tan)	how does it look?</li>
  <li>what should you write down for each feature as part of PM 101? (Tan)	what it is, who it’s for, which problem it solves and how important it is</li>
  <li>Why is command language important? (Tan)	Writing has to be direct. Call to action has to be obvious. People do what you tell them to do. You just have to tell them.</li>
  <li>when is the appropriate time to start PR and content? (Mañalac)	after you’ve made something people want and are certain they’re not churning. PR/content is not an appropriate form of user acquisition</li>
  <li>What is a good way to do a trust check?	Ask: how easy is it to share intimate things? What would make it easier?</li>
  <li>How do you perform humble advice seeking?	I’m working on XYZ, can you help me with it? OR<br />I messed up doing XYZ, can you keep an eye out for that?</li>
  <li>What is the top thing to understand from a 1:1? (Lew)	how the other person is feeling</li>
  <li>what are the two types of feelings to uncover in a 1:1? (Lew)	tension and energy</li>
  <li>what are 2-3 examples of tension in a 1:1 setting? (Lew)	frustration, disappointment, annoyance, boredom, stress </li>
  <li>what are 2-3 examples of energy in a 1:1 context?	excitement, pride, motivation, flow, learning</li>
  <li>why are specific questions better than generic questions?	specific questions produce specific answers, generic questions produce generic answers</li>
  <li>which questions can be asked to gauge someone’s comfort level with receiving feedback?	do you prefer to receive feedback in public or in private?<br />which medium do you prefer to receive feedback through? slack, email, face-to-face</li>
  <li>What is a valid trait to associate with success? (patio11)	hustle plus at least one other skill</li>
  <li>“what are the only two things that are considered ““work”” for an early stage startup? (patio11)”	talking to customers and creating things that customers pay for</li>
  <li>what is the correct lens through which to view a startup, i.e. software vs. business? (patio11)	a startup is a business which happens to have software rather than software which is wrapped by a business</li>
  <li>“what is a ““friendcatcher””? (patio11)”	a skill or trait that attracts people to want to be your friend</li>
  <li>what is an example of a friendcatcher? (patio11)	the ability to cook; if you can cook, people will come eat and anyone who comes over to eat with you is a friend</li>
  <li>why are time horizons a competitive advantage? (patrickc)	most people get easily distracted/bored/discouraged, so just being willing to do the same thing for a long time is a kind of differentiation.</li>
  <li>what are the two ends of the curve to nail when pitching a startup? (patrickc)	super long-term vision (big exciting opportunity) and specific steps over the next year to make progress</li>
  <li>what is the reality vs. the perception of early startup sales? (bosmeny)	it’s the <em>founder</em>, talking to users. founder passion trumps sales experience.</li>
  <li>what are the four steps of the almighty funnel? (bosmeny)	prospecting -&gt; conversations -&gt; closing -&gt; revenue</li>
  <li>when is the sales process over for a given prospect? (bosmeny)	you close the deal or the other party <strong>explicitly says no</strong></li>
  <li>“how do you deal with the ““1 more feature”” closing trap?”	sign a conditional agreement or wait for demand from more customers</li>
  <li>“how do you deal with the ““free trial”” closing trap? (bosmeny)”	offer a 30 day cancellation period on an annual contract (bosmeny)</li>
  <li>what are the three steps of the hiring funnel? (taggar)	sourcing -&gt; screening -&gt; closing</li>
  <li>what are the five sources of engineers, in descending order of efficacy? (taggar)	personal network, hiring marketplaces, LinkedIn/Github, job boards, meetups</li>
  <li>what is the range for % of applicants who pass interviews at a company?	2% - 8%</li>
  <li>what are 3-4 of Ammon Bartram’s recommendations for effective and consistent sourcing?	decide what skills matter; design a structured interview; use good interview questions; hide credentials; consider false negatives; look at max skill; think about the candidate experience</li>
  <li>why is it important to be explicit about which skills matter?	if you aren’t, your engineers will decide for you. everyone biases towards thinking their own skills are important, so this will introduce a lot of noise</li>
  <li>what is the bullshit asymmetry principle?	The amount of energy needed to refute bullshit is an order of magnitude bigger than to produce it.</li>
  <li>what’s the dispute resolution system between Patrick and John Collison? (pcollison)	whoever cares more wins</li>
  <li>what are the two stories of a startup? (pcollison)	getting to product market fit, and post product market fit</li>
  <li>what should you focus on instead of metric pre product-market fit? (pcollison)	high-touch, high-throughput, qualitative feedback. Not many users, so you can look at everything</li>
  <li>what is the market size mental model to have as you approach product market fit? (pcollison)	there is a more or less fixed market size. you serve some %, and don’t serve some %. you must create the go-to-market tools to get to the % that you don’t serve. this is the best model for a growth curve; concentric circles, not hockey stick</li>
  <li>what did aaron levy tell the collisons about why B2B software is better than B2C? (pcollison)	consumer space is super amorphous, inscrutable, many times customers don’t even know what they want. businesses are mostly rational and allow you to work backwards from a comprehensible point</li>
  <li>what is the OODA loop, created by Boyd for fighter pilots? (pcollison)	Observe&lt;div&gt;Orient&lt;/div&gt;&lt;div&gt;Decide&lt;/div&gt;&lt;div&gt;Act&lt;/div&gt;&lt;div&gt;<br />&lt;/div&gt;&lt;div&gt;Make this as fast as possible.&lt;/div&gt;</li>
  <li>what are the key qualities of an early startup employee? (pcollison)	intellectually honest, cares a great deal, loves getting things done</li>
  <li>what is the calculation to run when deciding to hire a startup employee? (pcollison)	will this hire make us more responsive to users/the market? will it tighten our OODA loop?</li>
  <li>“what is the ““probably a bad idea”” document at Stripe? (pcollison)”	an annual document circulated around the company where employees are encouraged to add ideas that are probably bad but if they work out could be really good</li>
  <li>what is the most important thing to optimize for technology-wise at an early-stage startup? (chou)	quick iteration times</li>
  <li>how do you achieve quick technology iteration times? (chou)	build things modularly using technology you’re familiar with</li>
  <li>what are the three large phases of development at a startup? (french-owen)	hackathon, then working with a team, then scalability/security/end-to-end testing</li>
  <li>what are a few ways to speed up early startup development process? (startup school panel)	* get in front of users&lt;div&gt;* don’t spend time on infrastructure&lt;/div&gt;&lt;div&gt;* build cross-platform&lt;/div&gt;</li>
  <li>when should you raise money? (ralston)	when you don’t need it. you have all the leverage</li>
  <li>what are the important elements of your startup’s stor? (ralston)	large opportunity, compelling product/traction, an impressive storyteller and team</li>
  <li>why are post-money SAFEs the preferred form of investment? (ralston)	investors and founders both understand the situtation. a $1M investment at a $4M valuation is a transaction for 25% equity.</li>
  <li>what are some important pieces of storytelling to keep in mind when talking to investors? (ralston)	prepare and research. simplify your pitch. don’t be boring. demos are gold.</li>
  <li>how should you end every investor meeting? (ralston)	never leave without next steps or a close</li>
  <li>should you make long-term financial projections when raising a seed round? (ralston)	no, no, no, there’s no way to make it anywhere close to accurate.</li>
  <li>why is it better to have a vague vision than a detailed vision? (buchheit)	if you have too much detail, you’re almost guaranteed to have wasted your time</li>
  <li>figure out what you can <span class="cloze">[…]</span> today (buchheit)	figure out what you can <span class="cloze">launch</span> today (buchheit)<br /> launch</li>
  <li>what question should you go to unhappy users with individually? (buchheit)	what would it take to make you a happy user?</li>
  <li>in enterprise software: please the buyer, not the <span class="cloze">[…]</span>. (buchheit)	in enterprise software: please the buyer, not the <span class="cloze">end user</span>. (buchheit)<br /></li>
  <li>in enterprise software: please the <span class="cloze">[…]</span>, not the end user. (buchheit)	in enterprise software: please the <span class="cloze">buyer</span>, not the end user. (buchheit)<br /></li>
  <li>“what is a good use of the ““10 years in the future”” exercise as it pertains to a startup? (buchheit)”	factor out your startup and look at the landscape of exponential change. For example, if Facebook didn’t exist, someone would have built a gigantic social network. There’s an inevitability.</li>
  <li>how does the CEO’s role change from 2 people in the company -&gt; 10 people? (collin)	going from creating processes to hiring people who are better than you at scaling those processes</li>
  <li>what question do you ask yourself when considering an early-stage startup hire w.r.t. their fit? (collin/collison)	do i want 10x of this person? Because this person will hire 10 other people, etc.</li>
  <li>what is a bottom-up vs. top-down sales process? (collin)	bottom-up: pitch and demo to end users, they recommend it up the chain&lt;div&gt;top-down: pitch and demo to execs (CIOs, etc.) and they integrate it with their reports&lt;/div&gt;</li>
  <li>what is a reasonable weekly demos target for an early-stage startup enterprise salesperson? (collin)	15 demos</li>
  <li>how many times should you contact each lead in an enterprise sales process? (collin)	5 times</li>
  <li>what is the founder’s illusion to watch out for? (collin)	you need to be disciplined enough to be honest when you are not growing, and fix it</li>
  <li>what is a good trick for raising pricing? (collin)	notify users of price change, tell them that a 1-year commitment will lock in the current price for another year</li>
  <li>what is a recurring mistake for startup founders regarding work ethic? why is it wrong? (gross)	working hard instead of working smart. input != output. nobody wants to work for a tired idiot.</li>
  <li>what are some reasons why startup founders work hard but not smart? (gross)	want to win the approval of the pack&lt;div&gt;no mental model of leadership&lt;/div&gt;&lt;div&gt;never reported to a leader they respect&lt;/div&gt;</li>
  <li>what is the maslow’s hierarchy of startup success? (gross)	sleep&lt;div&gt;food&lt;/div&gt;&lt;div&gt;exercise&lt;/div&gt;&lt;div&gt;mind&lt;/div&gt;&lt;div&gt;leadership&lt;/div&gt;</li>
  <li>what are the 5 stages of Robert Kegan’s Theory of Adult Development? (gross)	Impulsive mind&lt;div&gt;Imperial mind&lt;/div&gt;&lt;div&gt;Socialized mind&lt;/div&gt;&lt;div&gt;Self-authoring mind&lt;/div&gt;&lt;div&gt;Self-transforming mind&lt;/div&gt;</li>
  <li>what is the Impulsive mind phase of Kegan’s Theory of Adult Development? (gross)	basically children</li>
  <li>what describes the Imperial mind phase of Kegan’s Theory of Adult Development? (gross)	still mostly children. very selfish, transactional, unable to see the other side, leadership failure: can’t get people to cooperate over the long term</li>
  <li>what is a good analogy for the socialized mind (Stage 3) of Kegan’s Theory of Adult Development?	it’s like an NPC</li>
  <li>describe the socialized mind (stage 3) of Kegan’s Theory of Adult Development.	“sees the other side, way too much. social experience (““they think I’ll look stupid””) becomes the internal experience (““I’m a moron””). Sense of self derived from others”</li>
  <li>what is the leadership failure of stage 3 (socialized mind) of Kegan’s Theory of Adult Development?	hard to have a truly independent view at this phase</li>
  <li>dsecribe the self-authoring mind (stage 4) of Kegan’s Theory of Adult Development.	“Not driven by social affirmation. Has a consistent, independent frame of mind. Take responsibility for their own inner states and emotions (““I am feeling angry because you violated a value that I hold dearly””)”</li>
  <li>what is the leadership success of people with a self-authoring mind? (gross)	good for early stage startups</li>
  <li>what is the leadership failure of people with a self-authoring mind? (gross)	hard to learn from people; bad for scale</li>
  <li>describe the self-transforming mind (stage 5) of Kegan’s Theory of Adult Development.	no longer held prisoner by their own identity nor tied to particular identities or roles. Think in systems, can hold multiple ideologies at once</li>
  <li>what are people at stage 5 (self-transforming mind) of Kegan’s Theory of Adult Development best suited for?	managing a strong executive team or product at scale</li>
  <li>it’s not hard work that burns people out, but rather <span class="cloze">[…]</span>	it’s not hard work that burns people out, but rather <span class="cloze">the feeling that their work doesn’t matter</span><br /></li>
  <li>what is the recommended decisionmaking process to minimize iteration time? (Hoffman)	make an initial provisional decision. Note what information would disprove this decision and go get that</li>
  <li>what are 2-3 suggestions to optimize a new hire’s experience at a startup?	every first day is a friday&lt;div&gt;gift certificate to a restaurant from boss on the first day&lt;/div&gt;&lt;div&gt;in the afternoon of the first day, bring snack and drink cart around to everyone&lt;/div&gt;</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/10/05/startup-school/</guid>
                <description>
                    
                    Startup School: How to start a startup. Talks from big YC founders and partners.
                    
                </description>
                <pubDate>Fri, 05 Oct 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Online Property Management Software vs. Excel</title>
                <link>http://tigerthinks.com/2018/10/05/online-property-management-software-vs-excel/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Excel was not made for trust accounting.</li>
  <li>Due to the lack of a central database with multiple components, you enter your
data into one spreadsheet, then in another for tenant records, then another
for receipt records etc. Talk about triple handling! So while it’s easy to
create a spreadsheet, trying to actually turn it into a fully operational
trust accounting tool is not</li>
  <li>If multiple people are accessing different spreadsheets, you are unable to
track who has made changes, if data has been deleted, or if anyone is shifting
numbers around.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/10/05/online-property-management-software-vs-excel/</guid>
                <description>
                    
                    Use Online Property Management Software for Auditing and Intuition
                    
                </description>
                <pubDate>Fri, 05 Oct 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Insurance Claim Bookkeeping and Accounting for Real Estate Total Management</title>
                <link>http://tigerthinks.com/2018/10/04/insurance-claim-bookkeeping/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Rundown of specific furnace insurance example. Can back-reference if needed</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/10/04/insurance-claim-bookkeeping/</guid>
                <description>
                    
                    How to handle insurance claims in PM software.
                    
                </description>
                <pubDate>Thu, 04 Oct 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Part 5: Rent Charges and Total Management</title>
                <link>http://tigerthinks.com/2018/10/02/property-management-accounting-part-5/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Examples to Anki</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/10/02/property-management-accounting-part-5/</guid>
                <description>
                    
                    Rent charges in PM accounting
                    
                </description>
                <pubDate>Tue, 02 Oct 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Part 4: Types of Accounts</title>
                <link>http://tigerthinks.com/2018/10/01/property-management-accounting-part-4/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>All accounts fit into 5 overarching account types: assets, liabilities,
equity, expenses, and Income.</li>
  <li>They are important so that you understand why an account fits into one of the
5 overarching categories.</li>
  <li>If you read 2 different accounting books, they will both agree on the 5
overarching accounts. However, you will get some different, but similar,
underling account types.</li>
  <li>An <strong>asset</strong> is basically something that a company owns and uses for the benefit
of the company. Think of an asset as something of value that the company owns.
The following are asset underling account types:
    <ul>
      <li>Bank Accounts – If I need to explain to you why they are valuable, then you
need to stop reading this.</li>
      <li>Accounts Receivable (A/R) – This is an account to track money that is owed
to you. A/R is different than a loan you make to someone (which is a note
receivable… also an asset.) Once you sell a good or service, you are owed
money. Accounting considers the money you are owed to be as good as
collected. So, A/R is an asset that you hold… It’s the future collection of
money… A/R is kind of like a trust fund that you don’t have access to yet.</li>
      <li>Fixed Asset – A fixed asset is something of value that you will have for a
long time, typically over a year. This includes your property, equipment,
furniture, etc… Fixed assets are usually depreciable, which sucks… because I
hate explaining depreciation.</li>
      <li>Current Asset – Current assets are assets that will be converted to cash
quickly, usually within a year. This includes inventory, prepaid expenses
(hold on, I’ll talk about that in a sec), undeposited funds (money you
collected, but haven’t deposited yet), etc…</li>
    </ul>
  </li>
  <li>A <strong>liability</strong> is money that you owe… basic. The following are liability
underling account types:
    <ul>
      <li>Accounts Payable (A/P) – This is an account to track money that you owe. Yes, that is the same definition I gave you for all liabilities… think of A/P as an account to track any bill you receive. A/P is different than your mortgage (which is a long term liability.) When you receive a good or service, you owe money. Accounting considers the money you owe to be as good as paid.</li>
      <li>Let’s you receive an electricity bill, but haven’t paid it yet. That bill represents an A/P liability because you owe that money.</li>
      <li>Liability (Current Liability) – Current liabilities are liabilities that will
typically be paid within one year. I say “Typically” very loosely. Since this
is property management accounting, if the account isn’t an A/P account and it
isn’t a mortgage/loan, it’s a current liability. So, here’s some examples:
accrued property tax (you owe property tax every month, but are only billed
twice a year… so you can track the liability each month if you’re an
accounting superstar… I am not an accounting superstar.), tenant prepaid rent,
security deposits, etc…</li>
      <li>Almost no accounting program handles these correctly. When I test other
property management software programs to see what they are doing, this is the
biggest part that gets me so frustrated with them… I should be happy that they
do it wrong, but I get so unbelievably frustrated… and I’m not even using
their software to do any actual management!</li>
      <li>Long Term Liability – Basically, your mortgage… moving on…</li>
    </ul>
  </li>
  <li>EQUITY (OWNERS’ EQUITY)–
    <ul>
      <li>Not gonna lie, this isn’t an easy one. Luckily, if you’re doing basic
bookkeeping, you won’t really have to deal with this. Equity accounts track
the value of the portion of the company that is owned by one or more people.
If a company has more than one owner, each owner may be tracked in their own
individual account. That takes a lot of work and I let my accountant do
that… I just track all owners in 1 equity account.</li>
      <li>Here’s an easy way to understand an equity account: Let’s say you wake-up in
the morning and want to know the value of your Microsoft stock. You grab the
newspaper, pour some Folgers in your cup, and look at the stock value (this
example takes place in 1990.) The value of your stock is basically the same
as looking at your equity account for Microsoft.</li>
    </ul>
  </li>
  <li>Expense – This is an easy one. If you are paying money and you are not paying
down a liability (security deposit, mortgage, etc…), the money you are paying
is an expense… pretty much, all of your bills use an expense account.</li>
  <li>Income – This one isn’t bad either. If you are charging a tenant for a
good/service, the charge is income. One thing I’ll clear up later, in an
example, is how to do the bookkeeping when you keep or make a withholding
against a security deposit. The deposit you are keeping is actually income,
even if it is used to pay for an expense… don’t worry, the expense you’re
concerned about offsets the income and they cancel each other out, so you’re
not actually paying taxes on that security deposit income.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/10/01/property-management-accounting-part-4/</guid>
                <description>
                    
                    Types of Financial Accounts in PM Accounting
                    
                </description>
                <pubDate>Mon, 01 Oct 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>90: Jonathan Haidt | The Danger of Good Intentions and Safe Spaces</title>
                <link>http://tigerthinks.com/2018/09/29/the-danger-of-good-intentions-and-safe-spaces/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>College is a resort and the students are the clients</li>
  <li>People take the worst possible interpretation of statements and turn them into
microaggressions</li>
  <li>Preference falsification: when private thoughts don’t match public actions
everyone gets a distorted view of reality</li>
  <li>Cognitive distortions</li>
  <li>Moral dependence for new generation :/ don’t solve it yourself</li>
  <li>Call out culture and victimhood culture: people standing up for others in
order to appear cool</li>
  <li>Angry self righteousness</li>
  <li>Call out culture</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/09/29/the-danger-of-good-intentions-and-safe-spaces/</guid>
                <description>
                    
                    What's wrong with the bubble of college campuses.
                    
                </description>
                <pubDate>Sat, 29 Sep 2018 16:23:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Part 3: Debits and Credits</title>
                <link>http://tigerthinks.com/2018/09/27/property-management-accounting-part-3/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Just two different ways to balance books</li>
  <li>Debits and Credits are not always positive and negative. The determining
factor is the type of account that is being debited or credited.</li>
  <li>Debits on the left of a transaction log and credits on the right</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/09/27/property-management-accounting-part-3/</guid>
                <description>
                    
                    Debits and Credits in PM Accounting
                    
                </description>
                <pubDate>Thu, 27 Sep 2018 00:02:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Part 2: Double-Entry Bookkeeping</title>
                <link>http://tigerthinks.com/2018/09/27/property-management-accounting-part-2/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<p>Basics:</p>

<ul>
  <li>For any transaction that involves money, there is a record of this transaction.</li>
  <li>We keep a set of books that we use to record these transactions under
different accounts.</li>
  <li>Any transaction is always recorded using a minimum of 2 accounts, using at
least 1 Debit and at least 1 Credit.</li>
  <li>For every Debit, there has to be an equal Credit.</li>
  <li>Revenue and income are used almost interchangeably and are almost the same.
Describe money that you earned
    <ul>
      <li>No expenses are taken into account when calculating revenue or income.</li>
    </ul>
  </li>
  <li>Net Income and Profit are the same. They both refer to “The bottom line.” They
look at revenue minus expenses.</li>
  <li>The books are a loose term, referring to the record of a company’s financial
transactions.</li>
  <li>The journal and the general ledger are very similar items.
    <ul>
      <li>The journal is like a book, it tells a story… just not a very interesting one.
It is a record of a company’s financial transactions in the order that they
happened. Transactions are listed, with all the accounts that were used and the
amounts of their debits and credits.</li>
      <li>The general ledger is organized by account… still not interesting. Accounts
are listed and under the account, all debits or credits that were made to the
account are listed.</li>
    </ul>
  </li>
  <li>The chart of accounts is just a list of all the accounts that a company uses.</li>
  <li>A capital expense can be easily understood as an expense that increases the
life or value of an asset (you’re property.) This does not include repairs. An
example would be repairing and replacing a roof. If you repair a few shingles
on a roof, the building’s value or life of the roof may be increased, but it
was just a repair. If you replace the roof on a building, the life of the
building is increased and the expense needs to be depreciated.</li>
  <li>Depreciation and Amortization are identical actions that calculate the decline
in value of an asset; the term only refers to the type of asset.  Depreciation
is for a tangible asset that you can see or hold, such as a truck or a
property.  IE: You re-carpet an apartment for $1,000 and the depreciable life
of the carpeting is 5yrs. You depreciate the carpeting over 5yrs and count an
expense of $1,000/5yrs (or $200) per year.  Amortization is for an intangible
asset, such as a mortgage.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/09/27/property-management-accounting-part-2/</guid>
                <description>
                    
                    Double Entry Bookkeeping in PM Accounting
                    
                </description>
                <pubDate>Thu, 27 Sep 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>346. Two (Totally Opposite) Ways to Save the Planet</title>
                <link>http://tigerthinks.com/2018/09/25/two-totally-opposite-ways-to-save-the-planet/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Prophets and wizards</li>
  <li>Climate change, food, water, energy challenges. 10B people by 2050</li>
  <li>Prophets sound the alarm</li>
  <li>Wizards believe in technology</li>
  <li>Both sides agree education and health system will help and reduce problems</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/09/25/two-totally-opposite-ways-to-save-the-planet/</guid>
                <description>
                    
                    Wizards and prophets offer two different perspectives on the fate of humanity.
                    
                </description>
                <pubDate>Tue, 25 Sep 2018 05:23:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>The Bad Show</title>
                <link>http://tigerthinks.com/2018/09/25/the-bad-show/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>In the milgram order following experiments, NOBODY OBEYED DIRECT ORDERS!</li>
  <li>Haber process. Same guy came up with process to make ammonia and fed billions,
and also the chlorine and eventual gas that was used in Nazi camps on Jews. He
was a German Jew. Was he bad?</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/09/25/the-bad-show/</guid>
                <description>
                    
                    Are bad and good black and white? How do you evaluate the gray area?
                    
                </description>
                <pubDate>Tue, 25 Sep 2018 05:23:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>#434: Legendary Coach John Wooden's Secrets of Leadership</title>
                <link>http://tigerthinks.com/2018/09/23/john-wooden-secrets-of-leadership/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Success is trying your best to be your best. Only you know that, your coach
and boss and parents don’t. Winning is a byproduct</li>
  <li>Don’t mistake activity for achievement. Focus</li>
  <li>Time spent getting even would be better spent getting ahead</li>
  <li>Make each day a masterpiece</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/09/23/john-wooden-secrets-of-leadership/</guid>
                <description>
                    
                    Takeaways from one of the most accomplished coaches ever.
                    
                </description>
                <pubDate>Sun, 23 Sep 2018 10:45:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>You 2.0: When Did Marriage Become So Hard?</title>
                <link>http://tigerthinks.com/2018/09/23/when-did-marriage-become-so-hard/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Love marriages only became a thing in the 50s</li>
  <li>Maslow’s mountain instead of triangle. Views are better at the top but the
oxygen is thinner</li>
  <li>A kid is 33.5 hours a week more time between parents (bureau of labor
statistics)</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/09/23/when-did-marriage-become-so-hard/</guid>
                <description>
                    
                    Changing perspectives on long-term relationships have changed the nature of marriage.
                    
                </description>
                <pubDate>Sun, 23 Sep 2018 09:03:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Boyd and Bronwyn Varty - Track Your Life</title>
                <link>http://tigerthinks.com/2018/09/22/track-your-life/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Deep presence = dominance. Be there in the moment. No roles, no agenda.</li>
  <li>Getting your solitary time allows you to be more present in groups</li>
  <li>Human capital »»»&gt; financial capital</li>
  <li>Visit Boyd and Bronwyn Varty</li>
  <li>Deep curiosity: exploration and strange intersections. Combine experience and
interest</li>
  <li>Persistence through randomness</li>
  <li>Risk management: good stuff is in new places</li>
  <li>Trail magic: kindness and goodwill from strangers. So positive sum.</li>
  <li>Follow your own way always</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/09/22/track-your-life/</guid>
                <description>
                    
                    Human connections to nature from the South African Safari. Parallels in business and life.
                    
                </description>
                <pubDate>Sat, 22 Sep 2018 07:07:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Part 1: Intro</title>
                <link>http://tigerthinks.com/2018/09/22/property-management-accounting-part-1/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Goal: rundown of property management accounting basics</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/09/22/property-management-accounting-part-1/</guid>
                <description>
                    
                    PM Accounting
                    
                </description>
                <pubDate>Sat, 22 Sep 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Switching From Engineering to Management</title>
                <link>http://tigerthinks.com/2018/09/19/switching-from-engineering-to-management/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Habits to get rid of:
    <ul>
      <li>Desire to do everything yourself</li>
      <li>Desire to be know-it-all</li>
      <li>Closing it up and working alone</li>
      <li>Caring only about your part of the work</li>
    </ul>
  </li>
  <li>Habits to improve:
    <ul>
      <li>Communication</li>
      <li>Stress management</li>
      <li>Decision making</li>
      <li>Ability to adapt and learn new things</li>
      <li>Accept that you will be wrong</li>
      <li>Caring about the small things</li>
    </ul>
  </li>
  <li>Benefits of management:
    <ul>
      <li>Meeting people</li>
      <li>Influence on the direction of the company</li>
      <li>Experience</li>
    </ul>
  </li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/09/19/switching-from-engineering-to-management/</guid>
                <description>
                    
                    Ease the transition by changing your mindset, getting rid of some habits, and improving on others
                    
                </description>
                <pubDate>Wed, 19 Sep 2018 00:02:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>How to Fail as a new engineering manager</title>
                <link>http://tigerthinks.com/2018/09/19/how-to-fail-as-a-new-engineering-manager/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Stop coding. Instead focus on code reviews etc.</li>
  <li>Focus on the people and the work</li>
  <li>Measure your value by the impact you have on others’ output, not on your own
output</li>
  <li>Express your expectations: assumptions and expectations when delegating work</li>
  <li>Communicate commitments/deadlines clearly to the team</li>
  <li>Lead, don’t direct. Leadership inspires, it doesn’t dictate.</li>
  <li>Lean in to hard conversations
    <ul>
      <li>Address issues quickly</li>
      <li>Be specific, have examples</li>
      <li>Focus on behavior, not on the person themself</li>
    </ul>
  </li>
  <li>Keep learning your craft</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/09/19/how-to-fail-as-a-new-engineering-manager/</guid>
                <description>
                    
                    Stop coding. Care about people. Express yourself.
                    
                </description>
                <pubDate>Wed, 19 Sep 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Live Episode! RXBAR: Peter Rahal</title>
                <link>http://tigerthinks.com/2018/09/17/rxbar-peter-rahal/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Dyslexic</li>
  <li>To get D’s I had to climb a hill with an airplane on my back</li>
  <li>Conditioned to work hard</li>
  <li>Tasks in a sequence are challenging for dyslexics</li>
  <li>Dyslexics are good at pattern recognition</li>
  <li>Failing was not foreign</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/09/17/rxbar-peter-rahal/</guid>
                <description>
                    
                    Peter Rahal overcame dyslexia to build a $600M health bar company in half a decade.
                    
                </description>
                <pubDate>Mon, 17 Sep 2018 07:25:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Kendrick Lamar on What Drives Him and the Album That Changed His Life</title>
                <link>http://tigerthinks.com/2018/09/17/kendrick-lamar-on-what-drives-him/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Kendricks’ two favorite words: “execution” because it’s visceral and gets to
the core of making music, and “discipline” because it gives him strength and a
curiosity about how disciplined he can be</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/09/17/kendrick-lamar-on-what-drives-him/</guid>
                <description>
                    
                    Well-crafted profile of my favorite artist.
                    
                </description>
                <pubDate>Mon, 17 Sep 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>The Bitter Regrets of a Useless Chinese Daughter</title>
                <link>http://tigerthinks.com/2018/09/14/the-bitter-regrets-of-a-useless-chinese-daughter/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Bitingly relatable narrative on the experience of a 2nd generation Asian American</li>
  <li>“guanxi,” the network of connections and relationships that make China function.</li>
  <li>Before my mother’s illness, I spurned what I saw as an excess of pragmatism
among Chinese people, who want to ensure that all of their efforts go toward
something useful. College degrees, jobs, friendships, marriages — all these
should be chosen practically. “Be wise, pick an able man. Love doesn’t feed
you,” my people like to say. Looking back on my high school years, all my
relatives tried to talk me, a top-ranking student, into majoring in science or
finance in college. But I was stubborn enough to stay with my favorite
subject, literature. Now I understand them. They knew very well that in life,
things can easily fall apart, and that those degrees are a promise of a
steady, good-paying job, and perhaps a ticket to freedom, too.</li>
  <li>My promise is useless. Even my decision-making is useless. Whether I choose to
go back home and take care of her or stay in the United States and keep
reaching for my dream, sooner or later, I will regret either choice. I will
scold myself for not having enough courage to take the other path.</li>
  <li>Relentless questioning of self</li>
  <li>Asian-American culturally pushed to doctor/lawyer/engineer</li>
  <li>It can seem surface-level but it ends up having real consequences</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/09/14/the-bitter-regrets-of-a-useless-chinese-daughter/</guid>
                <description>
                    
                    Bitingly relatable narrative on the experience of an Asian American
                    
                </description>
                <pubDate>Fri, 14 Sep 2018 00:02:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>341. Why We Choke Under Pressure (and How Not To)</title>
                <link>http://tigerthinks.com/2018/09/11/why-we-choke-under-pressure-and-how-not-to/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Sian beilock, from Berkeley, president of Barnard!</li>
  <li>Choking: worse performance than you would expect from an individual given high
stakes</li>
  <li>High IQ, best focus will choke more. If you normally have lots of cognitive
resources, pressure takes away more, and you are more prone to choke</li>
  <li>Skilled people do things on autopilot. Pressure makes you think too much</li>
  <li>Higher cognitive effort tasks are more conducive to choking</li>
  <li>Put yourself in realistic pressure practice situations: people watch you,
record yourself</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/09/11/why-we-choke-under-pressure-and-how-not-to/</guid>
                <description>
                    
                    Preparation --&gt; execution.
                    
                </description>
                <pubDate>Tue, 11 Sep 2018 08:51:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>A New Dyslexia Reading Method and Visual Correction Position Method</title>
                <link>http://tigerthinks.com/2018/09/11/a-new-dyslexia-reading-method/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Founded on language modalities, the phonologic attempt at understanding
dyslexia is based on the lowest level of word sound structure, the phoneme.
The phonologic theory of dyslexia implies an impairment of both retrieval and
storage of speech sounds. Reading in an alphabetic language system requires
understanding the relationship of sound to letters. This <strong>grapheme</strong> to phoneme
(reading to sound) relationship is a core belief of the phonologic deficit
theory. Phonemes are the smallest sound entities that distinguish closely
similar words. Dyslexics exhibit phoneme unawareness.2,3</li>
  <li>Thus, dyslexia is often considered a language disorder in both single word
decoding and phonologic abnormalities. With remediation treatment, dyslexics
activate the language based phonemic area of the left temporal-parietal region
similar to nondyslexics.2,4,5</li>
  <li>A visual origin theory for dyslexia seems a logical assumption when
consideration is given to the fact that dyslexia is so closely associated with
processing letters and words on the printed page. Dyslexia has been considered
the result of unstable binocular fixation and vergence difficulties. Visual
and ocular-motor defects would impair eye motor control, visual attention, and
eye movement for visual searching. Thus, reading skills would be subject to
impairment.
Reading Method</li>
  <li>All reading materials are placed slightly off center toward the nondominant
eye side. The index finger is now placed on the bottom center of the first
line to read. The index finger is slowly raised until the words are clearly
seen. Although the words were believed clear before, the words are now
distinctly clearer and easier to read. Words will, also, be blacker, sharper,
and clearer. The index finger is now quickly bent and slowly retracted while
maintaining clear print. Reading should only begin after the individual is
readily capable of using the index finger to “make-it-clear” with the printed
page. In actuality, only 1 or 2 attempts are needed to find this new focal
point and “make-it-clear.” This new, elevated, focal point distance needs to
be pointed out so that they can readily find it for reading without first
touching the page. Using the new focal point and with finger in place, this
line is read aloud.  Immediate increase in fluency is usually apparent.</li>
  <li>The Positional Reading Arc is predicated upon the use of cyclovergence where
on looking down the eyes rotate nasally and on looking up the eyes rotate
laterally. Cyclovergence is to aid in the correspondence of both eyes for
stereopsis.</li>
  <li>Two parts: positional reading arc and stereoscopic eye exercise
<img src="/images/articles/new-reading-method-positional-reading-arc.jpg" alt="positional-reading-arc" /></li>
  <li>Position C is perhaps the most versatile for the dyslexic. They do very well
with straight ahead computer screen levels. Frequently, Position C individuals
will rise up in their chair, lean forward, and read by looking straight down.</li>
  <li>71% of the students from Grade 2 to Grade 8 stated that there was a better
position; 21% chose Position “B,” 45% chose Position “C,” and 5% chose
Position “D”</li>
  <li>Improvements in comprehension, speed, and word error</li>
  <li>The economic loss from dyslexia is incalculable and the social loss is beyond
description.</li>
  <li>The financial burden on education, the lack of a dyslexic’s obtainable
economic and social potentials, and lower income expectations represent a few
disadvantages burdened by dyslexics.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/09/11/a-new-dyslexia-reading-method/</guid>
                <description>
                    
                    Recent and big-if-true paper proposing a visual rather than cognitive fix for dyslexia. Need to keep it in mind when doing further research
                    
                </description>
                <pubDate>Tue, 11 Sep 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Overcoming Dyslexia</title>
                <link>http://tigerthinks.com/2018/09/07/overcoming-dyslexia/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: Walks comprehensively through all aspects of dyslexia, from the
neuroscience to diagnosis to treatment strategies and more. Feel quite
well-informed after reading.</p>

<h2 id="notes">Notes</h2>

<ul>
  <li>“what is the root ““dys”” in dyslexia?”	impaired</li>
  <li>“what is the root ““lexia”” in dyslexia?”	word</li>
  <li>what are norm-referenced evaluations and under which circumstances are they used?	norm-referenced evaluations compare everyone to each other based on averages of the same assessment (percentile). they are used to measure relative performance within a group. </li>
  <li>what are criterion-referenced evaluations and under what circumstances are they used?	criterion-referenced evaluations compare everyone to the same pre-established criteria, e.g. expressed as a % of answers correct. they are used to measure whole-group performance.</li>
  <li>“what is meant by the ““unexpectedness”” of dyslexia?”	“&lt;div&gt;People who are quite strong in other cognitive areas (math, reasoning, etc.) are able to mask their reading difficulties using context clues, thus it is surprising or ““unexpected”” to learn that they are dyslexic. alternatives: isolated<br />&lt;/div&gt;”</li>
  <li>What are the upper and lower bound estimates for the % of children affected by dyslexia?	5% (UMich) to 20% (Overcoming Dyslexia)</li>
  <li>what is the central concept underlying developmental dyslexia?	unexpectedness/isolation/localization; a child who is slow in all cognitive skills would not be eligible for consideration as dyslexic</li>
  <li>which opthalmologist is credited with pioneering research into dyslexia, or congenital word-blindness?	Dr. James Hinshelwood</li>
  <li>describe the reasoning behind the Connecticut Longitudinal study.	in order to differentiate between children who were experiencing reading difficulties and those who were learning to read with ease, it was necessary to establish what rate of reading development, what behaviors, and what characteristics are normal for children.</li>
  <li>do good and poor readers form a continuum, or are they two distinct groups?	they are a continuum, just like many other occurrences in nature that form a gradiation even though regulation forces a cut-off (obesity, diabetes, etc.)</li>
  <li>what is the significance of an undiagnosed case of dyslexia?	students fall behind and must make up more and more ground. Many become defeated, lose interest in reading, and develop a life-long loss of self-worth.</li>
  <li>what did the Connecticut Longitudinal Study uncover about the temporality of dyslexia?	“dyslexia is not a temporary lag in reading development, but an ongoing one. A child with dyslexia will not ““catch up”” on their own.”</li>
  <li>describe the phonologic module at a high level.	The phonologic module is the language factory, the functional part of the brain where the sounds of language are put together to form words and where words are broken down into teir elemental sounds.</li>
  <li>which module in the brain does dyslexia reflect a weakness in?	the phonologic module</li>
  <li>what are the three phonemes in the word cat?	k, aaaa, t</li>
  <li>visualize the process of retrieving and ordering phonemes to make a word	“&lt;img src=”“paste-86abb15dfcef9a0af785b6387ef6143fc6719320.jpg””&gt;”</li>
  <li>what is a phoneme?	the fundamental element of the language system, building blocks of words</li>
  <li>what are the steps taken for a child to learn language?	1. words are made up of pieces<br />2. these pieces represent sound<br />3. words on paper map to spoken words<br />4. the printed word and spoken word share structure </li>
  <li>what is the alphabetic principle?	the understanding that both spoken and written words can be pulled apart based on the same phonemes.</li>
  <li>what is the significance of the alphabetic principle?	it means a child is ready to read.</li>
  <li>how many words can be held in memory sequentially at a time?	5 to 7</li>
  <li>describe coarticulation	the ability to overlap several phonemes into one bubble of sound while maintaining the integrity of each</li>
  <li>give an example of coarticulation	“"”tenth”” -&gt; ““nth”” is coarticulate ““n”” and ““th”””</li>
  <li>what are the two major components of the reading process?	comprehension (meaning) and decoding (word identification)</li>
  <li>does dyslexia affect both comprehension and decoding?	no, they are backed by completely different parts of the language system so dyslexia only affects decoding.</li>
  <li>what is the best predictor of ease of learning to read?	phonemic awareness</li>
  <li>describe at least two tasks which are especially difficult for people with dyslexia	deleting specific phonemes from words, rote memorization, rapid word retrieval</li>
  <li>what is a potential explanation for the disproportionately high representation of dyslexics at very high levels of creativity?	a dyslexia cannot simply memorize things, so to truly understand concepts they must achieve a deep understanding</li>
  <li>who was the first (highly controversial) phrenologist?	Franz Joseph Gall</li>
  <li>what is phrenology?	the idea that human behavior and cognitive ability is localized within the brain and each trait is housed in a specific area. The larger that area, the stronger that attribute in the person.</li>
  <li>give an example of a phrenological interpretation	protruding eyes -&gt; large frontal lobe -&gt; smart</li>
  <li>what is the autoregulation of cerebral blood flow?	when an area of the brain is active, it needs more energy and thus more blood flows to that area</li>
  <li>how does fMRI work?	the autoregulation of cerebral blood flow combined with the fact that increased blood flow produces alterations in the magnetism of hemoglobin in blood (more oxygen attached -&gt; stronger signal), which is picked up by the fMRI machine</li>
  <li>areas that should be tested for early recognition of reading problems:&lt;div&gt;<span class="cloze">[…]</span>&lt;/div&gt;&lt;div&gt;letters (names and sounds)&lt;/div&gt;&lt;div&gt;vocabulary&lt;/div&gt;&lt;div&gt;print conventions&lt;/div&gt;&lt;div&gt;listening comprehension&lt;/div&gt;&lt;div&gt;reading (real words, nonsense words, and comprehension)&lt;/div&gt;	areas that should be tested for early recognition of reading problems:&lt;div&gt;<span class="cloze">phonology (awareness, memory, access)</span>&lt;/div&gt;&lt;div&gt;letters (names and sounds)&lt;/div&gt;&lt;div&gt;vocabulary&lt;/div&gt;&lt;div&gt;print conventions&lt;/div&gt;&lt;div&gt;listening comprehension&lt;/div&gt;&lt;div&gt;reading (real words, nonsense words, and comprehension)&lt;/div&gt;<br /></li>
  <li>areas that should be tested for early recognition of reading problems:&lt;div&gt;phonology (awareness, memory, access)&lt;/div&gt;&lt;div&gt;<span class="cloze">[…]</span>&lt;/div&gt;&lt;div&gt;vocabulary&lt;/div&gt;&lt;div&gt;print conventions&lt;/div&gt;&lt;div&gt;listening comprehension&lt;/div&gt;&lt;div&gt;reading (real words, nonsense words, and comprehension)&lt;/div&gt;	areas that should be tested for early recognition of reading problems:&lt;div&gt;phonology (awareness, memory, access)&lt;/div&gt;&lt;div&gt;<span class="cloze">letters (names and sounds)</span>&lt;/div&gt;&lt;div&gt;vocabulary&lt;/div&gt;&lt;div&gt;print conventions&lt;/div&gt;&lt;div&gt;listening comprehension&lt;/div&gt;&lt;div&gt;reading (real words, nonsense words, and comprehension)&lt;/div&gt;<br /></li>
  <li>areas that should be tested for early recognition of reading problems:&lt;div&gt;phonology (awareness, memory, access)&lt;/div&gt;&lt;div&gt;letters (names and sounds)&lt;/div&gt;&lt;div&gt;<span class="cloze">[…]</span>&lt;/div&gt;&lt;div&gt;print conventions&lt;/div&gt;&lt;div&gt;listening comprehension&lt;/div&gt;&lt;div&gt;reading (real words, nonsense words, and comprehension)&lt;/div&gt;	areas that should be tested for early recognition of reading problems:&lt;div&gt;phonology (awareness, memory, access)&lt;/div&gt;&lt;div&gt;letters (names and sounds)&lt;/div&gt;&lt;div&gt;<span class="cloze">vocabulary</span>&lt;/div&gt;&lt;div&gt;print conventions&lt;/div&gt;&lt;div&gt;listening comprehension&lt;/div&gt;&lt;div&gt;reading (real words, nonsense words, and comprehension)&lt;/div&gt;<br /></li>
  <li>areas that should be tested for early recognition of reading problems:&lt;div&gt;phonology (awareness, memory, access)&lt;/div&gt;&lt;div&gt;letters (names and sounds)&lt;/div&gt;&lt;div&gt;vocabulary&lt;/div&gt;&lt;div&gt;<span class="cloze">[…]</span>&lt;/div&gt;&lt;div&gt;listening comprehension&lt;/div&gt;&lt;div&gt;reading (real words, nonsense words, and comprehension)&lt;/div&gt;	areas that should be tested for early recognition of reading problems:&lt;div&gt;phonology (awareness, memory, access)&lt;/div&gt;&lt;div&gt;letters (names and sounds)&lt;/div&gt;&lt;div&gt;vocabulary&lt;/div&gt;&lt;div&gt;<span class="cloze">print conventions</span>&lt;/div&gt;&lt;div&gt;listening comprehension&lt;/div&gt;&lt;div&gt;reading (real words, nonsense words, and comprehension)&lt;/div&gt;<br /></li>
  <li>areas that should be tested for early recognition of reading problems:&lt;div&gt;phonology (awareness, memory, access)&lt;/div&gt;&lt;div&gt;letters (names and sounds)&lt;/div&gt;&lt;div&gt;vocabulary&lt;/div&gt;&lt;div&gt;print conventions&lt;/div&gt;&lt;div&gt;<span class="cloze">[…]</span>&lt;/div&gt;&lt;div&gt;reading (real words, nonsense words, and comprehension)&lt;/div&gt;	areas that should be tested for early recognition of reading problems:&lt;div&gt;phonology (awareness, memory, access)&lt;/div&gt;&lt;div&gt;letters (names and sounds)&lt;/div&gt;&lt;div&gt;vocabulary&lt;/div&gt;&lt;div&gt;print conventions&lt;/div&gt;&lt;div&gt;<span class="cloze">listening comprehension</span>&lt;/div&gt;&lt;div&gt;reading (real words, nonsense words, and comprehension)&lt;/div&gt;<br /></li>
  <li>areas that should be tested for early recognition of reading problems:&lt;div&gt;phonology (awareness, memory, access)&lt;/div&gt;&lt;div&gt;letters (names and sounds)&lt;/div&gt;&lt;div&gt;vocabulary&lt;/div&gt;&lt;div&gt;print conventions&lt;/div&gt;&lt;div&gt;listening comprehension&lt;/div&gt;&lt;div&gt;<span class="cloze">[…]</span>&lt;/div&gt;	areas that should be tested for early recognition of reading problems:&lt;div&gt;phonology (awareness, memory, access)&lt;/div&gt;&lt;div&gt;letters (names and sounds)&lt;/div&gt;&lt;div&gt;vocabulary&lt;/div&gt;&lt;div&gt;print conventions&lt;/div&gt;&lt;div&gt;listening comprehension&lt;/div&gt;&lt;div&gt;<span class="cloze">reading (real words, nonsense words, and comprehension)</span>&lt;/div&gt;<br /></li>
  <li>what is the difference between how dyslexic and non-dyslexic college-age readers read?	“non-dyslexic readers use the ““automatic”” neural pathway to read words. dyslexic readers must use the slower neural system which permits accurate but not fluent reading, which takes more time.”</li>
  <li>what are the most likely tests to reveal phonologic deficits in a bright young adult?	reading speed tests</li>
  <li>what is the difference between the phonologic weakness in children vs. adults?	in children it affects reading accuracy, in adults it affects reading time</li>
  <li>what does the reliance on secondary reading pathways result in for adult dyslexics?	accurate but slow reading</li>
  <li>is the diagnosis of dyslexia precise or imprecise?	it is as precise and scientifically informed as almost any diagnosis in medicine.</li>
  <li>what are the two guiding principles for treatment of dyslexia in young children?	develop a life span perspective. remediate the phonologic weakness and access the higher-level thinking and reasoning strengths.</li>
  <li>“what are the first two steps breaking the reading code for children, under the category ““sound advice””?”	develop an awareness of rhyme. then work on components of words.</li>
  <li>what is segmenting when working with words?	pulling a word apart into its sounds</li>
  <li>what is blending when working with words?	pushing sounds together to form a word</li>
  <li>what are the two key processes involved in learning to spell and read words?	segmenting and blending</li>
  <li>what is part one of the reading code?	sound advice; learning sounds and words</li>
  <li>what is part two of the reading code?	put it in writing; writing letters and things</li>
  <li>what is phonics?	learning about and using different sound and letter combinations to decode words</li>
  <li>what are some examples of sight words?	a, is, are, one, two, said, again, been, could</li>
  <li>what are sight words?	words that pop up frequently that don’t seem to follow the rules; they must be committed to memory and recognized on sight</li>
  <li>what is the most important development of a dyslexic child as he/she leaves kindergarten?	how he/she feels about himself</li>
  <li>key questions to ask when evaluating reading programs for kindergarten-age students:&lt;div&gt;* is there <span class="cloze">[…]</span> that the program is effective? was the program or its methods reviewed by the National Reading Panel?&lt;/div&gt;&lt;div&gt;* in teaching beginning reading, are phonemic awareness and phonics taught systematically and explicitly?&lt;/div&gt;&lt;div&gt;* how are children taught to approach an unfamiliar word? they should be empowered to try to analyze and sound out first rather than guess from context.&lt;/div&gt;	key questions to ask when evaluating reading programs for kindergarten-age students:&lt;div&gt;* is there <span class="cloze">scientific evidence</span> that the program is effective? was the program or its methods reviewed by the National Reading Panel?&lt;/div&gt;&lt;div&gt;* in teaching beginning reading, are phonemic awareness and phonics taught systematically and explicitly?&lt;/div&gt;&lt;div&gt;* how are children taught to approach an unfamiliar word? they should be empowered to try to analyze and sound out first rather than guess from context.&lt;/div&gt;<br /></li>
  <li>key questions to ask when evaluating reading programs for kindergarten-age students:&lt;div&gt;* is there scientific evidence that the program is effective? was the program or its methods reviewed by the <span class="cloze">[…]</span>?&lt;/div&gt;&lt;div&gt;* in teaching beginning reading, are phonemic awareness and phonics taught systematically and explicitly?&lt;/div&gt;&lt;div&gt;* how are children taught to approach an unfamiliar word? they should be empowered to try to analyze and sound out first rather than guess from context.&lt;/div&gt;	key questions to ask when evaluating reading programs for kindergarten-age students:&lt;div&gt;* is there scientific evidence that the program is effective? was the program or its methods reviewed by the <span class="cloze">National Reading Panel</span>?&lt;/div&gt;&lt;div&gt;* in teaching beginning reading, are phonemic awareness and phonics taught systematically and explicitly?&lt;/div&gt;&lt;div&gt;* how are children taught to approach an unfamiliar word? they should be empowered to try to analyze and sound out first rather than guess from context.&lt;/div&gt;<br /></li>
  <li>key questions to ask when evaluating reading programs for kindergarten-age students:&lt;div&gt;* is there scientific evidence that the program is effective? was the program or its methods reviewed by the National Reading Panel?&lt;/div&gt;&lt;div&gt;* in teaching beginning reading, are <span class="cloze">[…]</span> taught systematically and explicitly?&lt;/div&gt;&lt;div&gt;* how are children taught to approach an unfamiliar word? they should be empowered to try to analyze and sound out first rather than guess from context.&lt;/div&gt;	key questions to ask when evaluating reading programs for kindergarten-age students:&lt;div&gt;* is there scientific evidence that the program is effective? was the program or its methods reviewed by the National Reading Panel?&lt;/div&gt;&lt;div&gt;* in teaching beginning reading, are <span class="cloze">phonemic awareness and phonics</span> taught systematically and explicitly?&lt;/div&gt;&lt;div&gt;* how are children taught to approach an unfamiliar word? they should be empowered to try to analyze and sound out first rather than guess from context.&lt;/div&gt;<br /></li>
  <li>key questions to ask when evaluating reading programs for kindergarten-age students:&lt;div&gt;* is there scientific evidence that the program is effective? was the program or its methods reviewed by the National Reading Panel?&lt;/div&gt;&lt;div&gt;* in teaching beginning reading, are phonemic awareness and phonics taught systematically and explicitly?&lt;/div&gt;&lt;div&gt;* <span class="cloze">[…]</span>? they should be empowered to try to analyze and sound out first rather than guess from context.&lt;/div&gt;	key questions to ask when evaluating reading programs for kindergarten-age students:&lt;div&gt;* is there scientific evidence that the program is effective? was the program or its methods reviewed by the National Reading Panel?&lt;/div&gt;&lt;div&gt;* in teaching beginning reading, are phonemic awareness and phonics taught systematically and explicitly?&lt;/div&gt;&lt;div&gt;* <span class="cloze">how are children taught to approach an unfamiliar word</span>? they should be empowered to try to analyze and sound out first rather than guess from context.&lt;/div&gt;<br /></li>
  <li><span class="cloze">[…]</span> is the key to becoming a skilled reader.	<span class="cloze">Practice</span> is the key to becoming a skilled reader.<br /></li>
  <li>how many words should a child be able to read correctly to read a book easily?	19 out of 20</li>
  <li>What step follows reading accuracy in the progression of learning to read?	fluency</li>
  <li>what are the three key features of reading programs teaching fluency?	a focus on oral reading&lt;div&gt;opportunities for practice, allowing reading and rereading&lt;/div&gt;&lt;div&gt;ongoing feedback as the child reads (made possible by oral reading)&lt;/div&gt;</li>
  <li>there is a very strong <span class="cloze">[…]</span> correlation between a child’s vocabulary size and their reading skill	there is a very strong <span class="cloze">positive</span> correlation between a child’s vocabulary size and their reading skill<br /></li>
  <li>what is the best amount and setting of intense instruction for a struggling reader?	a group of four students, for about an hour preferably 5 days a week</li>
  <li>when should a child be removed from an effective reading program?	when they are reading words and passages fluently at their grade level</li>
  <li>why are computers good for people with dyslexia?	it is easier to type than to handwrite. spellcheckers are great. dyslexic brains are better at recognizing patterns on a keyboard than on paper.</li>
  <li>what is the number one goal for parents and teachers of students with reading problems?	preserving self esteem</li>
  <li>what are some accomodations that should be allowed for dyslexic students?	extra time for tests. an isolated, quiet room for tests. non-multiple-choice tests. recorded tests and materials. waiver of the foreign language requirement.</li>
  <li>who are some significant, important, successful people with dyslexia?	Charles Schwab&lt;div&gt;Richard Branson&lt;/div&gt;&lt;div&gt;Mohammed Ali&lt;/div&gt;&lt;div&gt;Henry Ford&lt;/div&gt;&lt;div&gt;Thomas Edison&lt;/div&gt;&lt;div&gt;David Boies (big attorney)&lt;/div&gt;&lt;div&gt;Agatha Christie&lt;/div&gt;</li>
</ul>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/09/07/overcoming-dyslexia/</guid>
                <description>
                    
                    Best text on diagnosing and dealing with dyslexia, from a top researcher.
                    
                </description>
                <pubDate>Fri, 07 Sep 2018 13:53:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>How to Hire Your First Engineer</title>
                <link>http://tigerthinks.com/2018/09/04/how-to-hire-your-first-engineer/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<p>Lots of the same content as his startup school talk.</p>

<p>Here’s a plan you could follow:</p>

<ol>
  <li>
    <p>Make a list of the best engineers you know, whether you think they’re available or not. Go through your Facebook and LinkedIn to jog your memory.</p>
  </li>
  <li>
    <p>Invite them to lunch or dinner with them to talk about your startup.</p>
  </li>
  <li>
    <p>Make the ask – would you consider joining us?.</p>
  </li>
  <li>
    <p>Whatever they answer, ask a follow up question – if you did join us, which engineers would you most want to hire?.</p>
  </li>
  <li>
    <p>Ask for an introduction to those people.</p>
  </li>
  <li>
    <p>Repeat 2 – 5 with each of the introductions.</p>
  </li>
  <li>
    <p>Repeat 1 – 6 ad infinitum, I know public company founders who still do this. Expect to be spending at least a third of your time on this alone.</p>
  </li>
</ol>

<p>To make any other strategy work you need to treat hiring like you did
fundraising and start by refining your message and pitch. Candidates think
differently to investors and you’ll need to tweak the message that worked for
your fundraise e.g. candidates will think less about your market size and more
about your most interesting product challenges.</p>

<p>Once you understand what resonates most about your company with engineers you
can switch gears to working through channels to get that message out to
potential candidates. Then be prepared for a lot of struggle and rejection until
you find the right person. Good luck!</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/09/04/how-to-hire-your-first-engineer/</guid>
                <description>
                    
                    Triplebyte founder with actionable advice on engineering hiring at early-stage startups.
                    
                </description>
                <pubDate>Tue, 04 Sep 2018 00:02:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Analyzing 50k fonts using deep neural networks</title>
                <link>http://tigerthinks.com/2018/09/04/analyzing-50k-fonts-using-deep-neural-networks/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>I started with 512 * 512 bitmaps of all character. For every font you find the
max y and min y of the bounding box, and the same thing for each individual
letter. After some more number juggling I was able to scale all characters
down to 64 * 64.</li>
  <li>Some notes on the model
    <ul>
      <li>4 hidden layers of fully connected layers of width 1024.</li>
      <li>The final layer is a 4096 layer (64 * 64) with sigmoid nonlinearity so that the output is between 0 (white) and 1 (black).</li>
      <li>L1 loss between predictions and target. This works much better than L2 which generates very “gray” images – you can see qualitatively in the pictures above.</li>
      <li>Pretty strong L2 regularization of all parameters.</li>
      <li>Leaky rectified units (alpha=0.01) of nonlinearity on each layer.</li>
      <li>The first layer is 102D – each font is a 40D vector joined with a 62D binary one-hot vector of what is the character.</li>
      <li>Learning rate is 1.0 which is shockingly high – seemed to work well. Decrease by 3x when no improvements on the 10% test set is achieved in any epoch.</li>
      <li>Minibatch size is 512 – seemed like larger minibatches gave faster convergence for some weird reason.</li>
      <li>No dropout, didn’t seem to help. I did add some moderate Gaussian noise (of sigma 0.03) to the font vector and qualitatively it seemed to help a bit.</li>
      <li>Very simple data augmentation by blurring the input randomly with sigma sampled from [0, 1]. My theory was that this would help fitting characters that have thin lines.</li>
    </ul>
  </li>
  <li>In particular, if I had more time, I would definitely explore generative
adversarial models, which seems better at generating pictures. Another few
things should be relatively easy to implement, such as batch normalization and
parametric leaky rectifications. And finally the network architecture itself
could probably benefit from doing deconvolutions instead of fully connected
layers</li>
  <li>Output: 40D embedding of all fonts</li>
  <li>Things to do with model:
    <ul>
      <li>Recreate characters from fonts</li>
      <li>Come up with new fonts</li>
      <li>Map font vectors with PCA or t-SNE</li>
    </ul>
  </li>
</ul>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/09/04/analyzing-50k-fonts-using-deep-neural-networks/</guid>
                <description>
                    
                    Perfect dataset for training fonts, trained model even has 40 latent factors.
                    
                </description>
                <pubDate>Tue, 04 Sep 2018 00:02:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Beyong Zero-Sum Thinking in the Game of Tech...and Life</title>
                <link>http://tigerthinks.com/2018/09/03/beyond-zero-sum-thinking/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/09/03/beyond-zero-sum-thinking/</guid>
                <description>
                    
                    Zero sum thinking in politics and economics is outdated and poisonous.
                    
                </description>
                <pubDate>Mon, 03 Sep 2018 10:44:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Computer Science as a Lost Art</title>
                <link>http://tigerthinks.com/2018/09/02/computer-science-as-a-lost-art/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Conclusion: don’t call yourself a scientist if all you’re doing is pouring
water from bucket to bucket.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/09/02/computer-science-as-a-lost-art/</guid>
                <description>
                    
                    'Curmudgeonly' take on computer science vs. programming
                    
                </description>
                <pubDate>Sun, 02 Sep 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Building an Inclusive Code Review Culture</title>
                <link>http://tigerthinks.com/2018/09/01/building-an-inclusive-code-review-culture/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>More than a couple back and forths and the discussion should be taken offline
and fleshed out in real time. This can be indicative of a PR that was not
properly spec’d or scoped, but regardless of why a PR discussion has
spiraled, it’s important to recognize that it has and solve it appropriately.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/09/01/building-an-inclusive-code-review-culture/</guid>
                <description>
                    
                    Clear communication and good practices keeps code quality high and people's feelings happy.
                    
                </description>
                <pubDate>Sat, 01 Sep 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>How Psychedelics Can Expand Your Consciousness, With Michael Pollan</title>
                <link>http://tigerthinks.com/2018/08/29/psychedelics-expand-consciousness/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Michael Pollan</li>
  <li>Psychidelics are tools</li>
  <li>Lots of studies of psychidelics for prescription. Few years out</li>
  <li>No microdosing studies yet</li>
  <li>Locks on to seratonin receptors in brain and gut</li>
  <li>Default mode network downregulated. theory of mind, sense of consistent self,
self reflection</li>
  <li>Afterwards, lots of new neural connections</li>
  <li>Trials are guided, therapist is with you</li>
  <li>Am I feeling contracted or expanded right now?</li>
  <li>Statistically significant decreases in depression and anxiety when patients
with cancer are given sylocibin. Even after it wears off! 80%</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/08/29/psychedelics-expand-consciousness/</guid>
                <description>
                    
                    Psychedelics are tools. They should be researched and used more.
                    
                </description>
                <pubDate>Wed, 29 Aug 2018 18:21:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>EuroPython 2018: How to Ignore Most Startup Advice and Build a Decent Software Business</title>
                <link>http://tigerthinks.com/2018/08/28/how-to-ignore-most-startup-advice/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Good teams can be surprisingly small. You don’t need to pass the bus test –
excellence requires authorship not redundancy or design by committee. Building
the right stuff matters much more than building lots of stuff. At a smaller
scale, generalists make much more sense than specialists in general, but the
best model is if everybody has some specialisation, but also a common skill
set. This complementary team setup is hard to build in larger teams, and much
easier in smaller teams. Think of it as tree-shaped skills (some trunk skills,
lots of branches, and growth) instead of T-shaped skills.</li>
  <li>You can make good decisions without testing all of your assumptions. Don’t
fall prey to inverse survivorship bias either – just because you didn’t do
something and failed, it doesn’t mean doing that thing would have saved you.
Have a look at autopsy.io, collecting autopsies of failed startups.</li>
  <li>You can’t replace logic with data. Decisive data is the exception, not the
rule. Decisions are mostly based on reason, and you’ll win if you’re mostly
right. Build things you think are good.</li>
  <li>The true value does not lie in your users’ data. Data is not the new oil, wth.
Monetize the money, not the users. Ship value, charge money (novel concept).
Users appreciate cosftware that works. Users are not interchangeable test
subjects, they’re people and they remember things. Profit is the best KPI.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/08/28/how-to-ignore-most-startup-advice/</guid>
                <description>
                    
                    Lifestyle business, a counterpoint to VC-backed businesses.
                    
                </description>
                <pubDate>Tue, 28 Aug 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>#71 - Chris D'Elia</title>
                <link>http://tigerthinks.com/2018/08/27/h3h3-chris-delia/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>The cuda: barracuda. See jewelry, will attack. Listening parties, Coachella.
Don’t be a cuda</li>
  <li>Making fun of you is like giving you a hug. If I can be me around you, I
respect you a ton</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/08/27/h3h3-chris-delia/</guid>
                <description>
                    
                    Don't be a cuda.
                    
                </description>
                <pubDate>Mon, 27 Aug 2018 11:12:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Google AI Chief Jeff Dean's ML System Architecture Blueprint</title>
                <link>http://tigerthinks.com/2018/08/26/jeff-dean-ml-system-architecture-blueprint/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<p>5 components of Jeff Dean’s ML System Architecture Blueprint for the future:</p>

<ul>
  <li>Large model, but sparsely activated</li>
  <li>Single model to solve many tasks</li>
  <li>Dynamically learn and grow pathways through a large model</li>
  <li>Hardware specialized for ML supercomputing</li>
  <li>ML for efficient mapping onto hardware</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/08/26/jeff-dean-ml-system-architecture-blueprint/</guid>
                <description>
                    
                    Lifestyle business, a counterpoint to VC-backed businesses.
                    
                </description>
                <pubDate>Sun, 26 Aug 2018 00:02:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>How my role as CTO has changed as we've grown to 100 engineers</title>
                <link>http://tigerthinks.com/2018/08/26/how-cto-role-change-100-engineers/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>1 engineer: 12-14 hours a day coding, woohoo</li>
  <li>2-10 engineers: 60% coding ,40% hiring. Player-coach</li>
  <li>11-50 engineers: At this point, I believe technical co-founders have a binary
choice: Stay on the technical track and hire a professional manager (usually
given the VP of Engineering title), or give up coding and focus on the
management aspects yourself. It really isn’t possible to do both.</li>
  <li>By the time we reached around 50 engineers, I was spending 60% of my time
being the best manager I possibly could to my direct reports, and training
other engineering managers in the team to do the same. The remaining 40% of my
time was spent recruiting.</li>
  <li><em>My enjoyment now comes less from the things I do myself and more from the
impact that I helped others to have.</em></li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/08/26/how-cto-role-change-100-engineers/</guid>
                <description>
                    
                    From building the product to managing 100 people and everywhere in between. Good roadmap and point of reference for me.
                    
                </description>
                <pubDate>Sun, 26 Aug 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Using Artificial Intelligence to Augment Human Intelligence</title>
                <link>http://tigerthinks.com/2018/08/24/using-ai-to-augment-human-intelligence/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Another good one from Distill.</li>
  <li>Images and figures for Anki</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/08/24/using-ai-to-augment-human-intelligence/</guid>
                <description>
                    
                    AIA &gt; AI or IA. Another great piece from Distill.
                    
                </description>
                <pubDate>Fri, 24 Aug 2018 00:02:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Crafting Beautiful UX with API Requests</title>
                <link>http://tigerthinks.com/2018/08/24/crafting-beautiful-ux-with-api-requests/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ol>
  <li>timeouts with an upper bound and good messaging</li>
  <li>minimum wait time so the experience isn’t too jarring</li>
  <li>retry with an exponential backoff</li>
</ol>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/08/24/crafting-beautiful-ux-with-api-requests/</guid>
                <description>
                    
                    Developer experience matters internally and externally and there are some simple patterns to make it better.
                    
                </description>
                <pubDate>Fri, 24 Aug 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Malcolm Gladwell's 12 Rules for Life</title>
                <link>http://tigerthinks.com/2018/08/23/gladwell-12-rules-for-life/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Pull the goalie</li>
  <li>Disagreeable: make optimal decisions and don’t care what people think</li>
  <li>Disagreeableness is not a matter of temperament, it is a choice</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/08/23/gladwell-12-rules-for-life/</guid>
                <description>
                    
                    Pull the goalie.
                    
                </description>
                <pubDate>Thu, 23 Aug 2018 08:09:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>60: Todd Kashdan | The Bright Truth about Your Dark Side</title>
                <link>http://tigerthinks.com/2018/08/21/the-bright-truth-about-your-dark-side/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>There is positive anger, positive frustration</li>
  <li>If a coach gives an angry halftime speech but is not normally angry, it has an
effect vs. a normal passive one</li>
  <li>Entrepreneurs must balance harsh criticism with high praise and giving credit</li>
  <li>Guilt is about a wrong behavior. Shame is about your character. Criminals who
feel guilt are less likely to recidivide</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/08/21/the-bright-truth-about-your-dark-side/</guid>
                <description>
                    
                    Channelling anger and frustration positively
                    
                </description>
                <pubDate>Tue, 21 Aug 2018 05:02:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Submit Checklist</title>
                <link>http://tigerthinks.com/2018/08/20/submit-checklist/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Good reference for submitting side hustle or Sparo when launching.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/08/20/submit-checklist/</guid>
                <description>
                    
                    List of 100 startup directories to submit startup for publicity.
                    
                </description>
                <pubDate>Mon, 20 Aug 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Java Design Patterns</title>
                <link>http://tigerthinks.com/2018/08/19/java-design-patterns/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Collection of Java Design Patterns and principles. Gradually Ankify the good ones
under the subtopic of software design.</li>
  <li>For each principle: What does it stand for? Describe it. Why should you do it?</li>
  <li>For each pattern: What is it? Visualize the diagram. When should you use it?
What are some examples of it?</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/08/19/java-design-patterns/</guid>
                <description>
                    
                    Design patterns implemented in Java. Really good reference. All designs should be as simple as possible.
                    
                </description>
                <pubDate>Sun, 19 Aug 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Sam Hinkie -- Data, Decisions, and Basketball</title>
                <link>http://tigerthinks.com/2018/08/18/sam-hinkie/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>The Long view</li>
  <li>Innovation: pay attention to other areas and apply to yours</li>
  <li>Advantages: defense is poorly measured and 3 &gt; 2</li>
  <li>Pick your kids’ traits in your partner</li>
  <li>The impact of good decisions compounds. Asymmetrical</li>
  <li>Hinkie loves machine learning</li>
  <li>Favorite author is Robert Caro</li>
  <li>What is the kindest thing anyone has ever done for you?</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/08/18/sam-hinkie/</guid>
                <description>
                    
                    Rare and very well-done interview with one of my heroes
                    
                </description>
                <pubDate>Sat, 18 Aug 2018 14:57:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Nike Says Its $250 Running Shoes Will Make You Run Much Faster. What if That's Actually True?</title>
                <link>http://tigerthinks.com/2018/08/18/nike-250-running-shoes/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Yes! Somehow, there is a 4% improvement while running in VaporFlys. Great
example of a quantitative deep dive into a pretty interesting claim/scenario</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/08/18/nike-250-running-shoes/</guid>
                <description>
                    
                    Quantitative Nike Zoom Vaporfly 4% effects on marathon running performance.
                    
                </description>
                <pubDate>Sat, 18 Aug 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>#405: The Power of Team Captains</title>
                <link>http://tigerthinks.com/2018/08/17/the-power-of-team-captains/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Sam Walker</li>
  <li>Is there something that enables teams to succeed?</li>
  <li>Similarities between great teams?</li>
  <li>Talent was not common thread</li>
  <li>Tactics were not common thread</li>
  <li>Money was not common thread</li>
  <li>Coaching was not common thread</li>
  <li>The captain is the verb in the sentence. Makes the whole thing go</li>
  <li>The power of relentlessness. Only playing at one speed. Effort is contagious</li>
  <li>Captains stretch the rules. They want to find the best edge they can without getting caught</li>
  <li>How do you communicate? Constantly, democratically, intensely</li>
</ul>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/08/17/the-power-of-team-captains/</guid>
                <description>
                    
                    On the importance and misconceptions surrounding team captains in sports, and how the principles can be applied to the rest of life.
                    
                </description>
                <pubDate>Fri, 17 Aug 2018 17:18:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>No Cow Founder On Growing From One-Man-Show To General Mills-backed Company</title>
                <link>http://tigerthinks.com/2018/08/17/no-cow/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Daniel Katz. Reach out! Talk about meeting young entrepreneurs</li>
  <li>Dropped all his classes at Indiana University to execute a juice business plan</li>
  <li>Middle child too!</li>
  <li>Started selling juice at 17</li>
  <li>Didn’t work went back to Cincy where he thought of No Cow cause he was dairy intolerant</li>
  <li>Called suppliers pretending to be a big deal</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/08/17/no-cow/</guid>
                <description>
                    
                    21-year-old entrepreneur in Colorado who overcame a lot of mistakes to build a successful business
                    
                </description>
                <pubDate>Fri, 17 Aug 2018 17:18:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Transfer Learning</title>
                <link>http://tigerthinks.com/2018/08/16/transfer-learning/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Tennis to badminton to racket ball. Same idea as taking an imagenet model and
fine tuning for cats and dogs. See a world where there are a bunch of canned
models and most tasks can be accomplished by simply transferring</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/08/16/transfer-learning/</guid>
                <description>
                    
                    Transfer learning is powerful and underutilized.
                    
                </description>
                <pubDate>Thu, 16 Aug 2018 06:25:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>151: Dave Asprey | Biohacking the Way to a Bulletproof Life</title>
                <link>http://tigerthinks.com/2018/08/15/dave-asprey-biohacking/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Used to be super unhealthy</li>
  <li>Entrepreneurs prone to hashimotos disease because of stress. Autoimmune
disorder</li>
  <li>It’s cheaper to spend a dollar saying your dollar works than making it good</li>
  <li>If you want to get all of your nutrients from food, get all of your toxins
from nature. Impossible these days</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/08/15/dave-asprey-biohacking/</guid>
                <description>
                    
                    Dave Asprey biohacking
                    
                </description>
                <pubDate>Wed, 15 Aug 2018 06:42:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>52: Cal Fussman | How To Ask Big Questions for Big Answers</title>
                <link>http://tigerthinks.com/2018/08/15/how-to-ask-big-questions-for-big-answers/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>All great people got out of their comfort zone. They also got knocked down and
got back up</li>
  <li>Why is your best friend your best friend?</li>
  <li>Curiosity is the best trait. Sad that curiosity gets stifled starting in
kindergarten when we learn that we are meant to answer the teacher’s question</li>
  <li>Stories must include vulnerability. Without kryptonite there is no Superman</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/08/15/how-to-ask-big-questions-for-big-answers/</guid>
                <description>
                    
                    Cal Fussman is a really good writer and interviewer. Good insight into his processes.
                    
                </description>
                <pubDate>Wed, 15 Aug 2018 06:42:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>How to negotiate the long, slow, SaaS Ramp of Death</title>
                <link>http://tigerthinks.com/2018/08/15/how-to-negotiate-saas-ramp-of-death/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>The long, slow SaaS ramp of death is that it just takes a long time to get to minimum critical mass.</li>
  <li>I will go out on a limb and put a general rule out there that says “There’s
just not going to be that one thing, that flips you from the long, slow ramp
of death, to the hockey stick inflection curve”.
    <ul>
      <li>It’s going to be lots and lots of little things. And I would argue that most
of those little things will happen if you continue to view your business
from your customer or user inward, rather than from the metrics you want to
change outward. I hope that makes sense.</li>
    </ul>
  </li>
  <li>But in the end, the thing we’ve learned here was really about quick to wow.
So, we live in a world where our ROI becomes just minuscule, minuscule. So, if
your path isn’t very quick to wow, and very quick to measurable result, you’re
just going to lose people’s attention.</li>
  <li>And, we’ve just kept seeing that when they used our product they’ve got real
revenue, and it kept us up. So, again, lots of great things in that values,
you know, we told the customer story every week. every week, and we still do.
Because what we do matters to the small business. And so, that kept us going,
and our metrics kept us going. Because, while there was no silver bullet, there
was a continuous improvement in the metrics.
All the charts were kind of edging up, right? And all our spreadsheets showed us
it could happen. We’ve got enough of the metrics working together. That thing
could happen.
And so, if your customers are telling you got something, and your metrics are
continuously improving, stay on the long, slow ramp of death. But if either of
those aren’t true, it is probably time to parachute off. [Laughter]</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/08/15/how-to-negotiate-saas-ramp-of-death/</guid>
                <description>
                    
                    Interview covering the lifecycle, pitfalls, and possible solutions of starting and running a SaaS business
                    
                </description>
                <pubDate>Wed, 15 Aug 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>337. How to Build a Smart City</title>
                <link>http://tigerthinks.com/2018/08/11/how-to-build-a-smart-city/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Dan Doctoroff modernizes NYC</li>
  <li>Alphabet and him are building a community in Toronto. Only autonomous
transportation. Much lower cost of building and living.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/08/11/how-to-build-a-smart-city/</guid>
                <description>
                    
                    City-scale growth and management is extremely intricate and difficult.
                    
                </description>
                <pubDate>Sat, 11 Aug 2018 15:35:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>An interview with Patrick Collison</title>
                <link>http://tigerthinks.com/2018/08/10/interview-patrick-collison/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>When it comes to culture, I think the main mistakes that companies make are
being too precious about it, being too apologetic about it, and not treating it
as dynamic and subject to revision.</li>
  <li>You do not want to preserve culture; you want to collectively steer the right
evolution of the culture.</li>
  <li>The vast majority of human organizations that we have experience with, be it
the school, the family, the university, the local community, the church,
whatever, these are not organizations that scale really rapidly. And so the
cues and the lessons and the habits you might learn from them are not
necessarily going to be sufficient for the kind of human organization you’re
building, which is perhaps doubling—or even more—in size, year over year.</li>
  <li>Pieces of remote culture:
    <ul>
      <li>Interview at HQ</li>
      <li>Good videoconferencing setup</li>
      <li>Meeting times friendly to everyone across timezones</li>
      <li>Prioritize internal communications (maybe even hire someone to manage it)</li>
    </ul>
  </li>
  <li>So I spend a lot of my time talking to people and trying to read things about
the greats of the earlier days of the Valley—the Intels and, though of course
not in the Valley, Microsofts, the early days of Google, the years when Steve
Jobs returned to Apple. Because we have full context of what came afterward
and what the outcomes actually were.</li>
  <li>For the contemporaries, here and now, the jury’s still out. My personal opinion
is that some of these companies—by no means all, but some of them—are in the
process of making either major cultural or organizational errors that are going
to substantially impede them from becoming that which is, or was, their
potential. So be careful and deliberate in choosing your role models.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/08/10/interview-patrick-collison/</guid>
                <description>
                    
                    Narrative deep-dive on one of my favorite startups and pair of founders.
                    
                </description>
                <pubDate>Fri, 10 Aug 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>What Tech Stacks are Indie Hackers Using for Their Apps, and Why?</title>
                <link>http://tigerthinks.com/2018/08/08/tech-stacks-indie-hackers/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Quite wide-ranging; no single correct choice, just pick what works for you and
run with it. Tech stack is rarely if ever the determining factor in business
success.</li>
  <li>Good reference to find similar projects when thinking about starting my own
side hustle stuff</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/08/08/tech-stacks-indie-hackers/</guid>
                <description>
                    
                    Descriptions of tech stacks and justifications for them at small startups. Bottom line: build modularly with technology you're familiar with.
                    
                </description>
                <pubDate>Wed, 08 Aug 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Kalman Filters</title>
                <link>http://tigerthinks.com/2018/08/07/kalman-filters/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Track where something is</li>
  <li>Get glimpses: radar, bird flying around between trees</li>
  <li>Based on gaussian distribution</li>
  <li>Model motion as linear with gaussian</li>
  <li>Simple update when you have new observations. Only have sigma and variance. Efficient</li>
  <li>Magic: closed form update on gaussian. Deterministic</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/08/07/kalman-filters/</guid>
                <description>
                    
                    Kalman filters are a simple but powerful technique for determining the most likely current state of an object in motion.
                    
                </description>
                <pubDate>Tue, 07 Aug 2018 11:53:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>51: Shane Snow | How To Work Together Without Falling Apart</title>
                <link>http://tigerthinks.com/2018/08/07/how-to-work-together-without-falling-apart/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Groups sometimes underperform individuals</li>
  <li>Social loafing, etc.</li>
  <li>Stanford prison experiment was just one crazy guy acting bad</li>
  <li>Cognitive breakthroughs (from book smartcuts)</li>
  <li>To change you have to think differently</li>
  <li>Ask yourself questions to connect things</li>
  <li>How would X look at this problem (race car driver, ballerina)</li>
  <li>Force it to be 10x better</li>
  <li>It’s not how well you get along it’s how well you fight</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/08/07/how-to-work-together-without-falling-apart/</guid>
                <description>
                    
                    Snippets of advice on how groups can succeed.
                    
                </description>
                <pubDate>Tue, 07 Aug 2018 08:24:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Ash Fontana -- Investing in Artificial Intelligence</title>
                <link>http://tigerthinks.com/2018/08/04/investing-in-ai/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Invest in predictions</li>
  <li>Unique data compounded ML</li>
  <li>Pre product stage</li>
  <li>How to compete with Google? Pick a good market. Apply vertically</li>
  <li>What to look for: uniqueness, fungibility, dimensionality, perishability
(contact info doesn’t really perish)</li>
  <li>Job: go through every market. Find out what the status quo is. Build a smarter
version.</li>
  <li>The most important thing by Mark something</li>
  <li>Always go where others aren’t</li>
  <li>Kindest thing you can do is let people be what they want to be. Got final exam
2yrs early and got 2 years of self study</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/08/04/investing-in-ai/</guid>
                <description>
                    
                    A top AI investor gives his perspective on the industry and his investment thesis
                    
                </description>
                <pubDate>Sat, 04 Aug 2018 12:35:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>The Song Machine: Inside the Hit Factory</title>
                <link>http://tigerthinks.com/2018/08/04/the-song-machine/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: Modern music, tracing its origins to Swedish beatmakers in the 1980s,
is all made according to the same formulas that will please peoples’ ears after
it’s been drilled into their head over and over.</p>

<h2 id="notessnippets">Notes/Snippets</h2>

<blockquote>
  <p>
    Specialized teams of songwriter-producers employ a method of composition I
    call track-and-hook to make songs that are almost irresistable. Record
    labels have figured out how to orchestrate demand for top artists like katy
    Perry and Rihanna, relying on their close alliance and long history with
    commercial radio. And the public, given the ability to call up any song they
    choose, still wants to listen to what everyone else is playing. (26)
  </p>
</blockquote>

<blockquote>
  <p>
    As Denniz once said, in response to a question about how hard could it
    possibly be to write such simple songs, "it's much more difficult to make it
    simple, especially achieving a simplicity without having it sound incredibly
    trivial" (49) [Tiger: you see this theme of "simplicity is difficult"
    everywhere! Drilled into you in software development.]
  </p>
</blockquote>

<blockquote>
  <p>
    Denniz died  on August 30, 1998 [...] He was buried in Solna; his gravestone
    is shaped like an eighth note--a symbol he had no use for because he never
    learned to read music. (119)
  </p>
</blockquote>

<blockquote>
  <p>
    The music business slowly changed from an art-house business run by men with
    ears into a corporate enterprise of quarterly earnings and timely results.
    (143)
  </p>
</blockquote>

<blockquote>
  <p>
    Guy Zapoleon observed that popular music fads seem to move in a three-part
    cycle. Over time, he formulated a set of laws that, he believes, drives the
    pop cycle. It starts in the middle, with "pure pop" [...] But pure pop eras
    inevitably give way to what Zapoleon calls "the doldrums," when Top 40
    becomes bland and boring, and ratings decline. In response, program
    directors row away from pure pop, toward the more perilous waters Zapoleon
    calls "the extremes," in order to restore excitement to their stations. The
    extremes--alt-rock and hip-hop--attract younger listeners [...] but repel
    older ones, and so program directors begin rowing back toward the pure-pop
    mainstream, and the cycle starts again. (150)
  </p>
</blockquote>

<blockquote>
  <p>
    Henceforth [Lee Soo-Man's] stars would be made, not born, using a
    sophisticated system of artistic development. Lee took Lou Pearlman's idea
    of putting together different personality types in a singing group and made
    a musical Samsung out of it, employing a method of cultural production Lee
    called "cultural technology". (187)
  </p>
</blockquote>

<blockquote>
  <p>
    The eye at the center of this expanding ring of influence is Max Martin.
    (vi)
  </p>
</blockquote>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/08/04/the-song-machine/</guid>
                <description>
                    
                    How modern pop music became the way it is today. Rihanna, Kelly Clarkson, etc. Turns out I'm not actually that interested in the music industry.
                    
                </description>
                <pubDate>Sat, 04 Aug 2018 07:25:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Web Architecture 101</title>
                <link>http://tigerthinks.com/2018/08/02/web-architecture-101/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<p><img src="/images/articles/web-architecture-101-overview.png" alt="web-architecture-101-overview" /></p>
<ul>
  <li>Horizontal scaling means that you scale by adding more machines into your
pool of resources whereas “vertical” scaling means that you scale by adding
more power (e.g., CPU, RAM) to an existing machine.</li>
  <li>Back to load balancers. They’re the magic sauce that makes scaling
horizontally possible. They route incoming requests to one of many application
servers that are typically clones / mirror images of each other and send the
response from the app server back to the client. Any one of them should
process the request the same way so it’s just a matter of distributing the
requests across the set of servers so none of them are overloaded.</li>
  <li>Typical data pipeline: events to the data firehose, data transformation, save
to cloud storage, loaded to data warehouse for analysis</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/08/02/web-architecture-101/</guid>
                <description>
                    
                    Walkthrough of Web Application Architecture
                    
                </description>
                <pubDate>Thu, 02 Aug 2018 17:23:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>335. Does Doing Good Give You License to Be Bad?</title>
                <link>http://tigerthinks.com/2018/08/01/does-doing-good-license-to-be-bad/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>CSR: Corporate Social Responsibility</li>
  <li>Want to study if consumers respond to CSR</li>
  <li>Create a firm. Set up different jobs at different salries and also publicizing
different amounts of CSR
    <ul>
      <li>Can increase applicant pool by the same amount as a 25% increase in salary,
$11 to $15</li>
    </ul>
  </li>
  <li>Moral licensing is using CSR to justify doing bad stuff</li>
  <li>Can even justify when they could have done something bad but they didn’t</li>
  <li>Tax forms: remind people of charitable donations right next to their self
reported income!</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/08/01/does-doing-good-license-to-be-bad/</guid>
                <description>
                    
                    It's inconclusive which way the seesaw of Corporate Social Responsibiliy vs. moral licensing tips.
                    
                </description>
                <pubDate>Wed, 01 Aug 2018 17:23:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Augmenting Long-term Memory</title>
                <link>http://tigerthinks.com/2018/08/01/augmenting-long-term-memory/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>The capacity of memory is extremely large; the bottleneck is retrieval/recall.</li>
  <li><em>On average, it takes me about 8 seconds to review a card. Suppose I was using
conventional flashcards, and reviewing them (say) once a week. If I wanted to
remember something for the next 20 years, I’d need 20 years times 52 weeks per
year times 8 seconds per card. That works out to a total review time of just
over 2 hours for each card.</em></li>
  <li><em>I’ll only need 4 to 7 minutes of total review time over the entire 20 years.
Those estimates allow for occasional failed reviews, resetting the time
interval. That’s a factor of more than 20 in savings over the more than 2
hours required with conventional flashcards.</em></li>
  <li>First, if memorizing a fact seems worth 10 minutes of my time in the future,
then I do it. Second, and superseding the first, if a fact seems
striking then into Anki it goes, regardless of whether it seems worth 10
minutes of my future time or not.</li>
  <li>Anki works much better when used in service to some personal creative project.</li>
  <li>Include sources and citations with all of your Anki cards so that you can
identify misleading information</li>
  <li>Another useful pattern while reading papers is Ankifying figures</li>
  <li>Make most Anki questions and answers as atomic as possible</li>
  <li>Anki isn’t just a tool for memorizing simple facts. It’s a tool for
understanding almost anything.</li>
  <li>Put another way: to really internalize a process, it’s not enough just to
review Anki cards. You need to carry out the process, in context. And you
need to solve real problems with it.</li>
  <li>One fun pattern is to go back to my old, pre-Anki notes on books, and to
Ankify them. This can often be done quickly, and gives me a greater return on
the time I’ve invested in now mostly-forgotten books</li>
  <li>It’s like they’re trying to compose a beautiful sonnet in French, but only
know 200 words of French.
    <ul>
      <li>If people focused more on remembering the basics, and worried less about the
“difficult” high-level issues, they’d find the high-level issues took care
of themselves.</li>
      <li>I now believe memory of the basics is often the single largest barrier to
understanding. If you have a system such as Anki for overcoming that
barrier, then you will find it much, much easier to read into new fields.</li>
    </ul>
  </li>
  <li>Ebbinghaus Forgetting curve and memory curve
<img src="/images/articles/augmenting-long-term-memory-forgetting-curve.png" alt="forgetting-curve" />
<img src="/images/articles/augmenting-long-term-memory-memory-curve.png" alt="memory-curve" /></li>
  <li>“Distributed practice”, meaning practice which is distributed in time, ideally
in a way designed to maximally promote retention.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/08/01/augmenting-long-term-memory/</guid>
                <description>
                    
                    The paper that got me into Anki and spaced repetition. Has 10x'd my studying efficiency and retention.
                    
                </description>
                <pubDate>Wed, 01 Aug 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>On Writing</title>
                <link>http://tigerthinks.com/2018/07/30/on-writing/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: Stephen King talks about his life and how he approaches
writing with candor and spunk.</p>

<h2 id="notes">Notes</h2>

<h3 id="cv">C.V.</h3>

<ul>
  <li>Struggled in childhood
    <ul>
      <li>Single mother raising him and his crazy brother Dave</li>
      <li>Strep throat, measles, lots of health problems</li>
    </ul>
  </li>
  <li>Really loved horror movies
    <ul>
      <li>Began writing by imitating/copying these movies</li>
    </ul>
  </li>
  <li><em>I am, when you stop to think of it, a member of a fairly select
group: the final handful of American novelists who learned to read
and write before they learned to eat a daily helping of video
bullshit. This might not be important. On the other hand, if you’re
just starting out as a writer, you could do worse than strip your
television’s electric plug-write, wrap a spike around it, and then
stick it back into the wall. See what blows, and how far. Just an
idea.</em> (33)</li>
  <li>Advice from John Gould, who ran the weekly newspaper Stephen worked
for:
    <ul>
      <li><strong>When you write a story, you’re telling yourself the story…when
you rewrite, your main job is taking outa ll the things that are not
the story.</strong></li>
      <li><strong>Write with the door closed, rewrite with the door open</strong></li>
    </ul>
  </li>
  <li>Lessons from finishing <em>Carrie</em> (paperback rights sold for 400k)
    <ul>
      <li>Writer’s original perception of character(s) may be as erroneous as
the reader’s</li>
      <li><em><b>Stopping a piece of work just because it’s hard, either emotionally
or imaginatively, is a bad idea.</b> Sometimes you have to go on when
you don’t feel like it, and sometimes you’re doing good work when it
feels like all you’re managing is to shovel shit from a sitting
position.</em> (76)</li>
    </ul>
  </li>
  <li>Roasting drugs (context: King is a recovered addict): <em>The idea that 
creative endeavor and mind-altering substances are entwined is one of the 
great pop-intellectual myths of our time […] Substance-abusing
writers are just substance abusers […] Any claims that the drugs and
alcohol are necessary to dull a finer sensibility are just the usual
self-serving bullshit. I’ve heard alcoholic snowplow drivers make the
same claim, that they drink to still the demons. It doesn’t matter if
you’re James Jones, John Cheever, or a stewbum snoozing in Penn
Station; for an addict, the right to the drink or drug of choice must
be preserved at all costs. Hemingway and Fitzgerald didn’t drink
because they were creative, alienated, or morally weak. They drank
because it’s what alkies are wired up to do. Creative people probably
do run a greater risk of alcoholism and addiction than those in some
other jobs, but so what? We all look pretty much the same when we’re
puking in the gutter.</em> (98)</li>
  <li><em>Now I’m going to tell you as much as I can about the job. As
promised, it won’t take long. It starts with this: put your desk in
the corner, and every time you sit down there to write, remind
yourself why it isn’t in the middle of the room. Life isn’t a support
system for art. It’s the other way around.</em> (100)</li>
</ul>

<h3 id="what-writing-is">What Writing Is</h3>

<ul>
  <li><em>You can approach the act of writing with nervousness, excitement,
hopefulness, or even despair–the sense that you can never completely
put on the page what’s in your mind and heart. You can come to the act
with your fists clenched and your eyes narrowed, ready to kick ass and
take down names. You can come to it because you want a girl to marry
you or because you want to change the world. Come to it any way but
lightly. Let me say it again: <b>you must not come lightly to the
blank page.</b></em></li>
  <li><em>I’m not asking you to come reverently or unquestioningly; I’m not
asking you to be politically correct or cast aside your sense of humor
(please God you have on). This isn’t a popularity contest, it’s not
the moral Olympics, and it’s not church. But it’s <b>writing</b>, damn
it, not washing the car or putting on eyeliner. If you can take it
seriously, we can do business. If you can’t or won’t it’s time for you
to close the book and do something else. Wash the car, maybe.</em> (106)</li>
</ul>

<h3 id="toolbox">Toolbox</h3>

<ul>
  <li>Metaphor of a <strong>toolbox</strong> for writing
    <ul>
      <li><em>Instead of looking at a hard job and getting discouraged, you will
perhaps seize the correct cool and get immediately to work.</em> (112)</li>
    </ul>
  </li>
  <li>Common tools on top.
    <ul>
      <li><strong>Vocabulary: the bread of writing</strong>
        <ul>
          <li><em>The basic rule of vocabulary is use the first word that comes to
your mind, if it is appropriate and colorful.</em> (116)
            <ul>
              <li>Don’t overthink it</li>
              <li>Don’t overdo it</li>
              <li>Don’t use fancy words</li>
            </ul>
          </li>
        </ul>
      </li>
      <li><strong>Grammar</strong>
        <ul>
          <li>Relax, chill, read, you’ll get it.</li>
          <li>Pet peeves
            <ul>
              <li><strong>Avoid the passive tense of verbs, where the subject is just
letting it happen.</strong> (The body was carried…)</li>
              <li><strong>The adverb is not your friend</strong>
                <ul>
                  <li>They’re like dandelions…first you have one, then you have a ton</li>
                  <li><strong>Never use adverbs for dialogue attribution</strong>
                    <ul>
                      <li>Never “she shouted menacingly”. Just use said.</li>
                      <li><em>While to write adverbs is human, to write he said or she said is
divine.</em> (127)</li>
                    </ul>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Next layer of toolbox: elements of style
    <ul>
      <li>Organize good paragraphs. Compose a beat.</li>
      <li>Play around with it a bit</li>
    </ul>
  </li>
</ul>

<h3 id="on-writing">On Writing</h3>

<ul>
  <li><strong>Two theses of this book</strong>:
    <ul>
      <li><strong>Good writing consists of mastering the fundamentals (vocabulary,
grammar, the elements of style) and then filling the third level of
your toolbox with the right instruments</strong></li>
      <li><strong>While it is impossible to make a competent writer out of a bad
writer, and while it is equally impossible to make a great writer
out of a good one, it is possible, with lots of hard work,
dedication, and timely help, to make a good writer out of a merely
competent one.</strong></li>
    </ul>
  </li>
  <li><em>If you want to be a writer, you must do two things above all others:
read a lot and write a lot.</em> (144)
    <ul>
      <li>Get off the screen <em>Reading takes time, and the glass teat takes too
much of it.</em> (146). Great description of screens</li>
      <li><em>I used to tell interviewers that I wrote every day except for
Christmas, the Fourth of July, and my birthday. That was a lie.
[…] I didn’t want to sound like a workaholic dweeb. The truth is
that when I’m writing, I write every day, workaholic dweeb or not.
[…] And when I’m not working, I’m not working at all, although
during these periods of full stop I usually feel at loose ends with
myself and have trouble sleeping. For me, not working is the real
work. When I’m writing, it’s all the playground, and the worst
three hours I ever spent there were still pretty damned good.</em> (153)</li>
    </ul>
  </li>
  <li>Basics: a room. a door. The determination to shut the door. And a
goal. Every day a goal.</li>
  <li><strong>Three parts of stories: narration, description, dialogue</strong>
    <ul>
      <li><strong>NO PLOT</strong>
        <ul>
          <li><em>Plot is, I think, the good writer’s last resort and the dullard’s
first choice. The story which results from it is apt to feel
artificial and labored.</em> (162)</li>
          <li><em>I lean more heavily on intuition, and have been able to do that
because my books tend to be based on situation rather than story.
[…] I want to put a group of characters in some sort of
predicament and then watch them try to work themselves free.</em>
(162)</li>
          <li><em>A strong enough situation renders the whole question of plot
moot, which is fine with me. The most interesting situations can
usually be expressed as a What-If question: What if vampires
invaded a small New England village?</em> (169)</li>
        </ul>
      </li>
      <li>Just be honest about your characters, make one unexpected inversion
in the story, and go</li>
      <li>Light description
        <ul>
          <li><em>Description begins in the writer’s imagination, but should finish
in the reader’s.</em> (173)</li>
          <li><em>If I tell you Carrie White is a high school outcast with a bad
complexion and a fashion-victim wardrobe, I think you can do the
rest, can’t you? I don’t need to give you a pimple-by-pimple,
skirt-by-skirt rundown.</em> (173)</li>
          <li><em>The key to good description begins with clear seeing and ends
with clear writing, the kind of writing that employs fresh images
and simple vocabulary.</em> (177)</li>
        </ul>
      </li>
      <li>Dialogue: there are no one-dimensional characters in real-life, so
don’t just create a generic “whore with a heart of gold”. No
one-dimensional dopes</li>
      <li><strong>Practice is invaluable (and should feel good, really not like
practice at all) and honesty is indispensable</strong></li>
    </ul>
  </li>
  <li>Don’t be silly and try to write for themes and symbolism and stuff.
Waste of time. As you go back and excavate the fossil of your story
more finely, you will see it, and you can pull it out and enhance it.
    <ul>
      <li>In this category: imagery, literary homage, etc.</li>
    </ul>
  </li>
  <li>High-level process
    <ul>
      <li>Write first draft with the door closed. Can take months</li>
      <li>Stick it in a drawer and don’t look at it for months</li>
      <li>Read it again, preferably in one sitting
        <ul>
          <li><em>During that reading, the top part of my mind is concentrating on
story and toolbox concerns: knocking out pronouns with unclear
antecedents, adding clarifying phrases where they seem necessary,
and of course, deleting all the adverbs I can bear to part with.</em>
(213)</li>
        </ul>
      </li>
      <li>Who do you write for? Your <strong>ideal reader</strong>. What would he/she
say/think?</li>
      <li><strong>Formula: 2nd draft = 1st draft - 10%</strong></li>
    </ul>
  </li>
  <li>Back story: <strong>everyone has a history, and most of it isn’t very
interesting.</strong> Stick to the parts that are, and don’t get carried away
with the rest.</li>
</ul>

<h3 id="on-living">On Living</h3>

<ul>
  <li>Tragic accident :( got run over while taking a walk. Took him out of
commission for a looooong time. Changed perspective a lot.</li>
  <li><strong>Writing isn’t about making money, getting famous, getting dates,
getting laid, or making friends. In the end, it’s about enriching the
lives of those who will read your work, and enriching your own life,
as well. It’s about getting up, getting well, and getting over.
Getting happy, okay? Getting happy.</strong></li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/07/30/on-writing/</guid>
                <description>
                    
                    Half memoir, half writing advice from one of the great modern fiction writers.
                    
                </description>
                <pubDate>Mon, 30 Jul 2018 16:26:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>The Only Rule Is It Has To Work</title>
                <link>http://tigerthinks.com/2018/07/30/the-only-rule-is-it-has-to-work/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: Ben and Sam learn that baseball is more than just numbers. Good
real-life, down-to-Earth sports story. Some great characters.</p>

<h2 id="notes">Notes</h2>

<ul>
  <li>Ben and Sam, baseball bloggers and podcasters, become “special
advisors to the general manager” for the Sonoma Stompers, an
independent league baseball team in NorCal.
    <ul>
      <li><em>There were no rules, except for one that our players demanded:
Whatever we tried had to work.</em> (6)</li>
    </ul>
  </li>
  <li>GM: Theo Fightmaster.</li>
  <li>Get major-league level tracking and analytics by calling in favors
from STATS and BATS</li>
  <li>Goal: beat the San Rafael Pacifics for the championship (4 team
league)</li>
  <li>Have to find “spreadsheet guys”</li>
  <li>Clash with Feh, a more “old-fashioned” manager</li>
  <li>Really strong start to the season, win the first half running away</li>
  <li>Get manager Feh fired, new manager Yoshi is more receptive to
analytics</li>
  <li>Sean Conroy, first openly gay pro baseball playeer
    <ul>
      <li>Pitches a complete game shutout on Pride Night</li>
    </ul>
  </li>
  <li>Eventually lose to San Rafael in the championship game :(</li>
</ul>

<h2 id="snippets">Snippets</h2>

<blockquote>
  <p>
    [Theo] wants badly to win [...] but he's not selling a winning club.
    He's selling the small-town experience of being at a ballpark on a
    mild summer night. "The owners's objective," he tells me, "is
    basically this vision of a family of four leaving the game, the kids
    got to high-five the mascot, they got a foul ball, they're walking
    to their car and saying, 'What a fantastic night at the park. By the
    way, who won?'" (15)
  </p>
</blockquote>

<blockquote>
  <p>
    Start a star sticker chart. 10 stars and you get a burrito. Use food
    to your advantage. Stars can be given for anything you want to
    reinforce. Yes, I'm treating them like 4-year-olds. The first rule
    of child psychology is that it applies throughout all of life. They
    will scoff at it and three days later be checking out how many stars
    they have. (73)
  </p>
</blockquote>

<blockquote>
  <p>
    What we think of as chemistry pervades every action [...] He shows a
    hint of disappointment that a postworkout batting practice is just
    soft tosses, not live pitching? Big League. He is all but cut by the
    end of that Opening Night banquet, because you can't have Big
    League in your clubhouse, bro. (90)
  </p>
</blockquote>

<blockquote>
  <p>
    The only thing necessary for the triumph of Feh was for us to do
    nothing, so when I dropped by objection, the matter was essentially
    settled. Walker would make the team as long as someone didn't demand
    the ball even more forcefully before first pitch. Next time someone
    tries to tell you to "put yourself out there" -- join an online
    dating site after a bad breakup, maybe, or interview for a job whose
    requirements you can't quite meet -- remember Matt Walker, the
    patron saint of putting oneself out there. Walker went from total
    stranger to Opening Day starter in the span of ten days, just by
    being around. (116)
  </p>
</blockquote>

<blockquote>
  <p>
    Never try to win an argument. (222) [Tiger: it never goes well.]
  </p>
</blockquote>

<blockquote>
  <p>
    The other guy lives in a big house, too. Not all failure corresponds
    to a lack of effort. Or a lack of desire. Or a lack of preparation.
    Or a lack of skill. We lose, sometimes, because the other guy is
    also really good. (282)
  </p>
</blockquote>

<blockquote>
  <p>
    We haven't lost our belief that data can help people build better
    baseball teams. We've just gained a greater appreciation for how
    hard it can be to collect and communicate. (332)
  </p>
</blockquote>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/07/30/the-only-rule-is-it-has-to-work/</guid>
                <description>
                    
                    Entertaining story of what happened when two stat-heads advised an independent pro baseball team for a summer.
                    
                </description>
                <pubDate>Mon, 30 Jul 2018 16:00:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>The Pragmatic Programmer</title>
                <link>http://tigerthinks.com/2018/07/30/the-pragmatic-programmer/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: Andy Hunt and Dave Thomas have done a lot of programming. This
is what they have to say about it. Some pieces are outdated, others are
timeless, all are certainly worth the read.</p>

<h2 id="notes">Notes</h2>

<h3 id="1-a-pragmatic-philosophy">1: A Pragmatic Philosophy</h3>

<ul>
  <li><em>Tip 1: Care About Your Craft</em></li>
  <li><em>Tip 2: Think! About Your Work</em></li>
  <li><em><b>Kaizen</b> is a Japanese term that captures the concept of
continuously making many small improvements</em> (L239)</li>
  <li>Pragmatic programmers think beyond the immediate problem, always aware
of the bigger picture</li>
  <li><em>One of the cornerstones of the pragmatic philosophy is the idea of
taking responsibility for yourself and your actions in terms of your
career advancement, your project, and your day-to-day work. “The
greatest of all weaknesses is the fear of appearing weak.”</em> (L239)</li>
  <li>Stone Soup and Boiled Frogs: kick off a small part of change yourself.
People find it easier to join an ongoing success.</li>
  <li><em>Great software today is often preferable to perfect software
tomorrow. If you give your users something to play with early, their
feedback will often lead you to a better eventual solution.</em> (L450)
    <ul>
      <li>Stop when you hit great!</li>
    </ul>
  </li>
  <li><em>An investment in knowledge always pays the best interest - Ben
Franklin</em> (L482)
    <ul>
      <li>Unfortunately, in tech, knowledge expires. Gotta keep the tools
sharp.</li>
    </ul>
  </li>
  <li><strong>WISDOM</strong> of understanding audience
    <ul>
      <li>What do you want them to learn?</li>
      <li>what is their Interest in what you have to say?</li>
      <li>how Sophisticated are they?</li>
      <li>how much Detail do they want?</li>
      <li>whom do you want to Own the information?</li>
      <li>how can you Motivate them to listen to you?</li>
    </ul>
  </li>
</ul>

<h3 id="2-a-pragmatic-approach">2: A Pragmatic Approach</h3>

<ul>
  <li><em>Maintenance is not a discrete activity, but a routine part of the
entire development process.</em> (680)
    <ul>
      <li>Don’t bemoan it! You can try to cut down but it will still be there
and it should be.</li>
    </ul>
  </li>
  <li><strong>DRY</strong>: Don’t Repeat Yourself.</li>
  <li>Duplication types:
    <ul>
      <li><strong>Imposed duplication</strong>, where developers feel like they have no
choice</li>
      <li><strong>Inadvertent duplication</strong>, where developers don’t realize they’re
duplicating</li>
      <li><strong>Impatient duplication</strong>, where developers get lazy and duplicate
because it’s easier</li>
      <li><strong>Interdeveloper duplication</strong>, where developers do the same work</li>
    </ul>
  </li>
  <li>Things are <strong>orthogonal</strong> if changes in one do not affect any of the
others, e.g. database code and user interface
    <ul>
      <li>Non-orthogonal systems are more complex to change and control. Make
it so there’s no such thing as a local fix.</li>
      <li><em>Tip 13: Eliminate Effects Between Unrelated Things</em></li>
      <li>Main benefits: <strong>increased productivity</strong> and <strong>reduced risk</strong></li>
    </ul>
  </li>
  <li><em>Don’t rely on the properties of things you can’t control</em> (L885)</li>
  <li>With DRY you’re looking to minimize duplication within a system,
whereas with orthogonality you reduce the interdependency among the
system’s components.</li>
  <li>When in doubt, choose the more <strong>reversible</strong> decision</li>
  <li><strong>Tracer code</strong>: minimum viable deployable application, end to end
    <ul>
      <li><strong>Not</strong> throwaway code (that’s a prototype)</li>
      <li>Benefits:
        <ul>
          <li>Users get to see something working early</li>
          <li>Developers build a structure to work in</li>
          <li>You have something to demonstrate</li>
          <li>You have a better feel for progress (easier to scope)</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Questions to ask when prototyping:
    <ul>
      <li>Are responsibilities of major components well-defined and
appropriate?</li>
      <li>Are the collaborations between major components well-defined?</li>
      <li>Is coupling minimized?</li>
      <li>Can you identify potential duplication?</li>
      <li>Are interface definitions and constraints acceptable?</li>
      <li>Does every module have access to the data it needs during execution?</li>
    </ul>
  </li>
  <li><strong>Domain language</strong>: “ubiquitous language” concept from DDD.
    <ul>
      <li><em>Whether it’s a simple language to configure and control an
application program, or a more complex language to specify rules or
procedures, we think you should consider ways of moving your project
closer to the problem domain.</em> (L1217)</li>
    </ul>
  </li>
  <li><strong>Estimating</strong>
    <ul>
      <li>First question is about context. Do you need high accuracy or just a
ballpark?</li>
      <li>Steps:
        <ul>
          <li>Understand what’s being asked
            <ul>
              <li>Scope scope scope</li>
            </ul>
          </li>
          <li>Build a mental model of the system</li>
          <li>Break the model into components</li>
          <li>Give each parameter a value</li>
          <li>Calculate the answers</li>
        </ul>
      </li>
      <li><strong>I’ll get back to you.</strong></li>
    </ul>
  </li>
</ul>

<h3 id="3-the-basic-tools">3: The Basic Tools</h3>

<ul>
  <li><strong>Plain-text</strong>: universally portable, human readable, will never be
obsolete, not tied to any implementation or parser
    <ul>
      <li><strong>Command shell</strong> is the workbench for manipulating plain text</li>
    </ul>
  </li>
  <li><strong>Editor</strong>: know one. Well.</li>
  <li><strong>Debugging</strong>
    <ul>
      <li>Debugging is problem solving.</li>
      <li><em>Beware of myopia when debugging. Resist the urge to fix just the
symptoms you see: it is more likely that the actual fault may be
several steps removed from what you are observing, and may involve a
number of other related things. Always try to discover the root
cause of a problem, not just this particular appearance of it.</em>
(L1758)</li>
      <li>Start by gathering all relevant data</li>
      <li>Go through all assumptions and verify</li>
      <li>Tracer print statements: “I AM HERE”…</li>
      <li>Rubber duck: just explain the problem out loud</li>
      <li><strong>Test, test, test</strong> when you make the fix</li>
      <li>Checklist:
        <ul>
          <li>Is the reported problem a symptom or the real thing?</li>
          <li>Is the bug in the compiler or in the OS?</li>
          <li>How would you explain the problem to a coworker?</li>
          <li>Are the tests complete?</li>
          <li>Do the conditions that caused this bug exist anywhere else in the
system?</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="4-pragmatic-paranoia">4: Pragmatic Paranoia</h3>

<ul>
  <li>Don’t trust yourself! You make mistakes. Be defensive</li>
  <li>Design by contract: Add contracts to your code (i.e. iContract for
Java). Your code shøuld abide by the contract and do nothing more.
    <ul>
      <li>Meh</li>
    </ul>
  </li>
  <li><strong>Liskov Substitution Principle</strong>: Subclasses must be usable through
the base class interface without the need for the user to know the
difference</li>
  <li>Leave <strong>assertions</strong> in your code to call out non-negotiable contracts</li>
  <li><em>Tip 34: Use Exceptions for Exceptional Problems.</em></li>
  <li><em>Tip 35: Finish What You Start</em>
    <ul>
      <li>Close files, etc.</li>
    </ul>
  </li>
</ul>

<h3 id="5-bend-or-break">5: Bend, or Break</h3>

<ul>
  <li>Limit interaction between modules</li>
  <li><strong>Law of Demeter</strong>: don’t reach into an object to gain access to a
third object’s methods
    <ul>
      <li>More like a “guideline of Demeter”</li>
    </ul>
  </li>
  <li><strong>MVC</strong>: separate model (data), view (interpretation of model),
controller (coordination and translation mechanism)</li>
</ul>

<h3 id="6-while-you-are-coding">6: While You Are Coding</h3>

<ul>
  <li><strong>Program deliberately</strong>
    <ul>
      <li>Don’t “program by coincidence”; you must understand exactly why your
code works</li>
      <li><strong>Rely only on documented behavior</strong>
        <ul>
          <li>If you can’t, <strong>document your assumption well</strong></li>
        </ul>
      </li>
      <li>How?
        <ul>
          <li>Always be aware of what you’re doing</li>
          <li>Understand the domain</li>
          <li>Plan first.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>Programming isn’t construction, it’s gardening</strong>
    <ul>
      <li>Organic, changes, growth</li>
      <li>Fowler’s rules on refactoring:
        <ul>
          <li>Don’t refactor and add functionality at the same time</li>
          <li>Make sure you have good tests before you begin refactoring.
Refactor tests as often as possible. Then you’ll know quickly if
you broke anything</li>
          <li>Take short, deliberate steps. Line by line, method by method.
Check your changes often.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="7-before-the-project">7: Before the Project</h3>

<ul>
  <li><em>Tip 51: Don’t Gather Requirements, Dig For Them</em>
    <ul>
      <li>Requirements are not on the surface. People, especially domain
experts, tend to leave out stuff that feels “basic” to them but is
actually very important to the implementation</li>
      <li>Shadowing is an effective technique</li>
    </ul>
  </li>
  <li><strong>Project glossary</strong> tracks all the commonly used words in the project</li>
  <li><strong>Specification trap</strong>: don’t try to get every single detail. Just get
it to the point where the programmer’s skill can take over.
    <ul>
      <li>Trick: try to describe how to tie their shoes.</li>
    </ul>
  </li>
</ul>

<h3 id="8-pragmatic-projects">8: Pragmatic Projects</h3>

<ul>
  <li><strong>Automate, automate, automate</strong>
    <ul>
      <li>Appoint tool builders on the team to make sure things get automated</li>
      <li><em>People just aren’t as repeatable as computers are.</em> (L4020)</li>
    </ul>
  </li>
  <li>Types of tests to write:
    <ul>
      <li>Unit tests</li>
      <li>Integration tests</li>
      <li>Validation and verification (does it actually work the way the user
wants?)</li>
      <li>Resource exhaustion, errors, recovery
        <ul>
          <li>Memory, disk space, CPU bandwidth, wall-clock time</li>
        </ul>
      </li>
      <li>Performance testing</li>
      <li>Usability testing</li>
    </ul>
  </li>
  <li>Make <strong>well chosen and meaningful</strong> variable names
    <ul>
      <li>Never make misleading names!! These trigger the <strong>Stroop Effect</strong>
and the brain gets super confused</li>
    </ul>
  </li>
  <li>Document concisely but thoroughly</li>
  <li>Small usability wins:
    <ul>
      <li>Tooltip help</li>
    </ul>
  </li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/07/30/the-pragmatic-programmer/</guid>
                <description>
                    
                    Collection of somewhat common sense but well-stated programming advice.
                    
                </description>
                <pubDate>Mon, 30 Jul 2018 15:52:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Read Citations</title>
                <link>http://tigerthinks.com/2018/07/27/read-citations/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Dunning-Kruger: pop-sci treatment is that perceived ability is inversely
correlated with actual ability. Graphs from original paper show this is
blatantly wrong. Potential biases include American culture and sampling of
students from Cornell undergraduates.</li>
  <li>Money and happiness: original studies have a logarithmic relationship. This
became interpreted as flatlining which is wrong.</li>
  <li>Hedonic adaptation: lots of studies. Potentially similar reasons to
misinterpretations of money/happiness.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/07/27/read-citations/</guid>
                <description>
                    
                    Rant/description of how some 'pop-psychology' results have been warped from the original studies. Some is a stretch, some is legitimate.
                    
                </description>
                <pubDate>Fri, 27 Jul 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Machine Learning Engineering in Ten Parts</title>
                <link>http://tigerthinks.com/2018/07/18/mle-in-ten-parts/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<p>In mid-2018, Paper Club welcomed a few new members to learn machine
learning engineering together. This is a more currently practical side
of ML than the fancy deep learning we started the group with, and we’re
all excited to be able to build real-world, interpretable models using
machine learning.</p>

<p>The main source materials are the <a href="http://shop.oreilly.com/product/0636920052289.do">Hands-on ML
book</a> and Andrew Ng’s
Machine Learning <a href="https://www.coursera.org/learn/machine-learning/home/welcome">Coursera
course</a>
with other helpful pieces interspersed.</p>

<h3 id="1-ch-2-hands-on-ml-end-to-end-machine-learning-project-2018-07-18">1: Ch 2, Hands-on ML: End-To-End Machine Learning Project (2018-07-18)</h3>

<p>Colab notebook: https://colab.research.google.com/drive/1aiFLy1fUxW6YpJ7J-mqzYKeHJqZI7Oj-</p>

<p>The steps of a machine learning project:</p>

<ol>
  <li>Look at the big picture</li>
  <li>Get the data</li>
  <li>Discover and visualize the data to gain insights</li>
  <li>Prepare the data for ML algorithms</li>
  <li>Select a model and train it</li>
  <li>Fine-tune your model</li>
  <li>Present your solution</li>
  <li>Launch, monitor, and maintain your system</li>
</ol>

<h4 id="frame-the-problem">Frame the Problem</h4>

<ul>
  <li>Predict house prices</li>
  <li><em>The first question to ask your boss is what exactly is the business
objective; building a model is probably not the end goal. How does the
company expect to use and benefit from this model?</em> (35)
    <ul>
      <li>i.e. Does the company need dollar estimates or will buckets like
low/medium/high work?</li>
    </ul>
  </li>
  <li><em>The next question to ask is what the current solution looks like (if
any). It will often give you a reference performance, as well as
insights on how to solve the problem.</em> (36)
    <ul>
      <li>This might be a manual process</li>
    </ul>
  </li>
</ul>

<h4 id="select-a-performance-measure">Select a Performance Measure</h4>

<ul>
  <li><strong>Loss function</strong>. “How accurate is my model?”</li>
  <li>RMSE (Root Mean Squared Error) \(d_i\) = prediction, \(f_i\) = true label:
    <ul>
      <li>Penalizes values far away from true label a lot more heavily</li>
      <li>Generally used for regression problems</li>
    </ul>

\[\sqrt{\frac{1}{n}\Sigma_{i=1}^{n}{\Big(\frac{d_i -f_i}{\sigma_i}\Big)^2}}\]
  </li>
  <li>
    <p>MAE (Mean Absolute Error) (use for datasets with more outliers)</p>

\[\frac{1}{n}\sum_{i=1}^{n}|d_i - f_i|\]
  </li>
</ul>

<h4 id="get-the-data">Get the Data</h4>

<ul>
  <li>Data loaded to Pandas <strong>DataFrame</strong> (<code class="language-plaintext highlighter-rouge">housing</code> variable)</li>
  <li><code class="language-plaintext highlighter-rouge">housing.head()</code> to inspect first N rows and their attributes</li>
  <li><code class="language-plaintext highlighter-rouge">housing.info()</code> for description of data (type, n-rows, n-non-null
values)</li>
  <li><code class="language-plaintext highlighter-rouge">housing.describe()</code> shows summary of numerical attributes (mean,
stdev, etc.)</li>
  <li><code class="language-plaintext highlighter-rouge">housting.hist()</code> -&gt; histogram of each attribute
    <ul>
      <li>Look for <strong>tail-heavy</strong> attributes; will affect model choice</li>
    </ul>
  </li>
  <li>Create a test set
    <ul>
      <li>Do it blind
        <ul>
          <li><em>Your brain is an amazing pattern detection system, which means
it is highly prone to overfitting; if you look at the test set,
you may stumble upon some seemingly interesting pattern in the
test data that leads you to select a particular kind of model.
When you estimate the generalization error using the test set,
your estimate will be too optimistic and you will launch a system
that will not perform as well as expected. This is called *data
snooping bias*.</em> (47)</li>
        </ul>
      </li>
      <li>JBenn: in practice, you’ll be looking at this. /shrug</li>
      <li><code class="language-plaintext highlighter-rouge">train, test = sklearn.model_selection.train_test_split(housing,
test_size=0.2, random_state=42)</code></li>
      <li><strong>Stratified sampling</strong>: instead of purely random, make sure it
represents the true distribution of an important attribute
        <ul>
          <li>i.e. 51.3% male, 48.7% female</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h4 id="discover-and-visualize-the-data-to-gain-insights">Discover and Visualize the Data to Gain Insights</h4>

<ul>
  <li>Do visualizations, etc. on training set only</li>
  <li><code class="language-plaintext highlighter-rouge">corr_matrix = housing.corr()</code> to get correlations between every
attribute
    <ul>
      <li><code class="language-plaintext highlighter-rouge">corr_matrix['median_house_value'].sort_values(ascending=False)</code></li>
    </ul>
  </li>
  <li>Play around with combined attributes, i.e. <code class="language-plaintext highlighter-rouge">bedrooms_per_room</code></li>
  <li><em>This round of exploration does not have to be absolutely thorough;
the point is to start off on the right foot and quickly gain insights
that will help you get a first reasonably good prototype.</em> (59)</li>
</ul>

<h4 id="prepare-the-data-for-ml-algorithms">Prepare the data for ML algorithms</h4>

<ul>
  <li>Write reusable functions. Why?
    <ul>
      <li>Reproduce on new data in same project</li>
      <li>Build a library to use in future projects</li>
      <li>Use same functions in live systems to ensure consistency</li>
      <li>Try various transformations to see which combination works best</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">Imputer</code> used to fill in null values
    <ul>
      <li>Good idea to use even if no null values in training set, can’t make
any guarantees about test set and live data</li>
    </ul>
  </li>
  <li>Text attributes:
    <ul>
      <li>Encode as an enum</li>
      <li><code class="language-plaintext highlighter-rouge">ocean_proximity</code> holds values like 1H OCEAN, NEAR OCEAN, INLAND,
etc.</li>
      <li><code class="language-plaintext highlighter-rouge">housing_cat_encoded, housing_categories = housing_cat.factorize()</code></li>
      <li><code class="language-plaintext highlighter-rouge">housing_categories</code> maps values to indices, <code class="language-plaintext highlighter-rouge">housing_cat_encoded</code>
has values 0, 1, 2, 3, etc.</li>
      <li><em>One issue with this representation is that ML algorithms will
assume that two nearby values are more similar than two distant
values. Obviously this is not the case. To fix this issue, a common
solution is to create one binary attribute per category. This is
called <b>one-hot encoding</b>.</em> (63)
        <ul>
          <li><code class="language-plaintext highlighter-rouge">housing_cat_1hot =
sklearn.preprocessing.OneHotEncoder().fit_transform(housing_cat_encoded.reshape(-1,
1))</code>
            <ul>
              <li>Need to reshape since fit_transform expects 2D array</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Custom transformer
    <ul>
      <li><em>You want your transformer to work seamlessly with Scikit-Learn
functionalities (such as pipelines), and since Scikit-Learn relies
on duck typing (not inheritance), all you need is to create a class
and implement three methods: <code class="language-plaintext highlighter-rouge">fit()</code> (returning self),
<code class="language-plaintext highlighter-rouge">transform()</code>, and <code class="language-plaintext highlighter-rouge">fit_transform()</code>.</em> (65)
        <ul>
          <li>Add <code class="language-plaintext highlighter-rouge">TransformerMixin</code> and <code class="language-plaintext highlighter-rouge">BaseEstimator</code> as base classes to get
goodies</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>Feature scaling</strong>
    <ul>
      <li>All features should be on the same scale. With no feature scaling,
room totals range from 6 to 39,320, while median income only rated
from 0 to 15. This throws things off</li>
      <li><strong>Min-max scaling</strong>
        <ul>
          <li>Scale to 0-1. Bad if there are outliers.</li>
          <li><code class="language-plaintext highlighter-rouge">MinMaxScaler</code></li>
        </ul>
      </li>
      <li><strong>Standardization</strong>
        <ul>
          <li>Subtract the mean from all values, divide by variance so that
resulting distribution has zero variance</li>
          <li>No specific range, which can negatively affect some models</li>
          <li>Less affected by outliers</li>
          <li><code class="language-plaintext highlighter-rouge">StandardScaler</code></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">Pipeline</code> is a great abstraction. You can use it to set off sequences
of transformations
    <ul>
      <li>Exposes same methods as final estimator</li>
    </ul>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">num_pipeline</span> <span class="o">=</span> <span class="n">Pipeline</span><span class="p">([</span>
    <span class="p">(</span><span class="s">'imputer'</span><span class="p">,</span> <span class="n">Imputer</span><span class="p">(</span><span class="n">strategy</span><span class="o">=</span><span class="s">'median'</span><span class="p">)),</span>
    <span class="p">(</span><span class="s">'attribs_adder'</span><span class="p">,</span> <span class="n">CombinedAttributesAdder</span><span class="p">()),</span>
    <span class="p">(</span><span class="s">'std_scaler'</span><span class="p">,</span> <span class="n">StandardScaler</span><span class="p">()),</span>
  <span class="p">])</span>

<span class="n">housing_num_tr</span> <span class="o">=</span> <span class="n">num_pipeline</span><span class="p">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">housing_num</span><span class="p">)</span>
</code></pre></div></div>

<h4 id="select-and-train-a-model">Select and Train a Model</h4>

<ul>
  <li>Start with linear regression to establish baseline</li>
  <li>Decision tree (example code):</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sklearn.tree</span> <span class="kn">import</span> <span class="n">DecisionTreeRegressor</span>

<span class="n">tree_reg</span> <span class="o">=</span> <span class="n">DecisionTreeRegressor</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">)</span>
<span class="n">tree_reg</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">housing_prepared</span><span class="p">,</span> <span class="n">housing_labels</span><span class="p">)</span>

<span class="n">housing_predictions</span> <span class="o">=</span> <span class="n">tree_reg</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">housing_prepared</span><span class="p">)</span>
<span class="n">tree_mse</span> <span class="o">=</span> <span class="n">mean_squared_error</span><span class="p">(</span><span class="n">housing_labels</span><span class="p">,</span> <span class="n">housing_predictions</span><span class="p">)</span>
<span class="n">tree_rmse</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">tree_mse</span><span class="p">)</span>
<span class="n">tree_rmse</span>
</code></pre></div></div>

<ul>
  <li><em>The main ways to fix underfitting are to select a more powerful
model, to feed the training algorithm with better features, or to
reduce the constraints on the model.</em> (70)</li>
  <li>Better evaluation using <strong>K-fold cross-validation</strong>
    <ul>
      <li><em>randomly splits the training set into 10 distinct subsets called
folds, then it trains and evaluates the Decision Tree model 10
times, picking a different fold for evaluation every time and
training on the other 9 folds. The result is an array containing the
10 evaluation scores.</em> (71)</li>
    </ul>
  </li>
</ul>

<h4 id="fine-tune-your-model">Fine-tune Your Model</h4>

<ul>
  <li>JBenn: <strong>Model selection and data cleanliness are 95% of performance.
Hyperparameter tuning is only the last 5%</strong></li>
  <li>Can use <code class="language-plaintext highlighter-rouge">GridSearchCV</code> (you specify the hyperparameter space to
search) or <code class="language-plaintext highlighter-rouge">RandomizedSearchCV</code> (for large search spaces)</li>
  <li>Once model is fine-tuned, it’s ready for showtime</li>
</ul>

<h4 id="launch-monitor-and-maintain-your-system">Launch, Monitor, and Maintain Your System</h4>

<ul>
  <li>Considerations:
    <ul>
      <li>Monitoring</li>
      <li>Sample predictions and verify (most of the time with human help)</li>
      <li>Pipeline to retrieve fresh data</li>
    </ul>
  </li>
  <li>Deploy with SciKit <code class="language-plaintext highlighter-rouge">joblib</code></li>
  <li>Can deploy separate data prep pipeline and actual prediction pipeline</li>
</ul>

<h3 id="2-ch-3-hands-on-ml-classification">2: Ch 3, Hands-on ML: Classification</h3>

<p><a href="https://colab.research.google.com/drive/1CCvLsfbkK6KT9Rgs-kd4Abv-eX6esmIe">Notebook</a></p>

<h4 id="mnist">MNIST</h4>

<h4 id="training-a-binary-classifier">Training a Binary Classifier</h4>

<ul>
  <li>Two classes
    <ul>
      <li><code class="language-plaintext highlighter-rouge">y_train_5 = (y_train == 5)</code>: neat shorthand. Results in array like
[0, 0, 0, 0, 1, 0, 0] where 0 indicates “not a 5”, 1 indicates “yes
a 5”</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">SGDClassifier</code> good starting point. Fast and scalable since it treats
each example independently</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sgd_clf</span> <span class="o">=</span> <span class="n">SGDClassifier</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">)</span>
<span class="n">sgd_clf</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train_5</span><span class="p">)</span>

<span class="n">sgd_clf</span><span class="p">.</span><span class="n">predict</span><span class="p">([</span><span class="n">x</span><span class="p">])</span> <span class="c1"># =&gt; True/False
</span></code></pre></div></div>

<h4 id="performance-measures">Performance Measures</h4>

<ul>
  <li>Evaluating classifier is more difficult than evaluating regressor
    <ul>
      <li>:question: why? Intuitively, discrete is simpler than continuous</li>
    </ul>
  </li>
  <li><strong>Cross-validation</strong> (introduced Ch. 2): split training set into N
subsets, train on N - 1, use last set for evaluation. Rotate so that
every subset is the “evaluation set” once
    <ul>
      <li><code class="language-plaintext highlighter-rouge">sklearn.model_selection.cross_val_score(sgd_classifier, X_train,
y_train_5, cv=3, scoring='accuracy'</code>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">cv</code>: number of folds</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>Confusion matrix</strong>: count # times instances of class A are
classified as class B, plot in an MxM table where M = number of
classes</li>
  <li><strong>Precision</strong>:
\(\frac{tp}{tp + fp}\)
    <ul>
      <li>“What are the chances of my True guess being correct?”</li>
    </ul>
  </li>
  <li><strong>Recall</strong>:
\(\frac{tp}{tp + fn}\)
    <ul>
      <li>“What are the chances of me guessing True for an actual True?”</li>
    </ul>
  </li>
  <li><strong>F1 score</strong> to combine precision and recall;
\(2 x \frac{precision x recall}{precision + recall}\) <strong>OR</strong>
\(\frac{tp}{tp + \frac{fn + fp}{2}}\)
    <ul>
      <li>Favors classifiers with close precision and recall. This may not be
what you want, e.g. for finding shoplifters some false positives are
okay but false negatives are not</li>
      <li><code class="language-plaintext highlighter-rouge">sklearn.metrics.f1_score(y_train_5, y_train_pred)</code>
<img src="/images/courses/mle-in-ten-parts-precision-recall.png" alt="precision-recall" /></li>
    </ul>
  </li>
  <li><strong>Precision/recall tradeoff</strong>: increasing one decreases the other.
Intuition: if you guess more trues, your recall is likely to be higher
since you’re making fewer negative guesses overall, but your precision
will suffer because some of your “extra” true guesses will be
incorrect
    <ul>
      <li>Higher decision threshold -&gt; higher precision, lower recall</li>
    </ul>
  </li>
  <li><strong>ROC Curve</strong>: receiver operating characteristic: plots <strong>sensitivity
(recall) vs. 1 - specificity (true negative rate)</strong>
    <ul>
      <li>:question: origin of name ROC? Intuition for it?</li>
      <li>Metric: <strong>ROC AUC</strong> (ROC area under curve). Random: 0.5. Goal: 1.
<img src="/images/courses/mle-in-ten-parts-roc.png" alt="roc" /></li>
    </ul>
  </li>
</ul>

<h4 id="multiclass-classification">Multiclass Classification</h4>

<ul>
  <li>Some models (Random Forest) can directly do multiclass</li>
  <li>Otherwise, you can do multi-class with a bunch of binary classifiers
    <ul>
      <li><strong>One-versus-all</strong>: one classifier per class. Prediction = class
whose classifier outputs highest score</li>
      <li><strong>One-versus-one</strong>: one classifier for every pair of digits (1 vs.
2, 1 vs. 3, etc.). Prediction = class whose classifier wins the most
of these pairs.</li>
      <li>Choose OvA most of the time, way fewer models. Choose OvO only if
your model (e.g. SVM) scales poorly</li>
    </ul>
  </li>
  <li>:question: “Scaling inputs increases accuracy” –&gt; aren’t all inputs
0-255 already?</li>
</ul>

<h4 id="error-analysis">Error Analysis</h4>

<ul>
  <li>Good to print out examples of TP, FP, TN, FN in order to visualize
what types of errors model is making
    <ul>
      <li><code class="language-plaintext highlighter-rouge">true_positives = X_train[(y_train == a) &amp; (y_train_pred == a)]</code></li>
      <li><code class="language-plaintext highlighter-rouge">false_positives = X_train[(y_train == a) &amp; (y_train_pred == b)]</code></li>
      <li><code class="language-plaintext highlighter-rouge">true_negatives = X_train[(y_train == b) &amp; (y_train_pred == b)]</code></li>
      <li><code class="language-plaintext highlighter-rouge">false_negatives = X_train[(y_train == b) &amp; (y_train_pred == a)]</code></li>
    </ul>
  </li>
</ul>

<h4 id="multilabel-classification">Multilabel Classification</h4>

<ul>
  <li>Model trained on three faces: Alice, Bob, Charlie
    <ul>
      <li>If Alice and Charlie in a picture, model should output [1, 0, 1]</li>
      <li>Can use <code class="language-plaintext highlighter-rouge">KNeighborsClassifier</code></li>
      <li>Evaluation: measure F1 for each label and compute average score</li>
    </ul>
  </li>
</ul>

<h4 id="multioutput-classification">Multioutput Classification</h4>

<ul>
  <li>Example: add noise to MNIST images. Use noisy images as X, clean
images as Y. Prediction is the “cleaned” image.</li>
</ul>

<h3 id="3-ch-4-hands-on-ml-training-models">3: Ch 4, Hands-on ML: Training Models</h3>

<p><a href="https://drive.google.com/file/d/1o3hgXYDVM3gmcPFhdinWbW8nkAEGi2oz/view?usp=sharing">Colab Notebook</a></p>

<h4 id="linear-regression">Linear Regression</h4>

<ul>
  <li>Prediction: weighted sum of input features + <strong>bias</strong> (<strong>intercept term</strong>)
    <ul>
      <li>\(\theta\): parameters</li>
      <li>\(n\): number of features</li>
      <li>\(x\): inputs</li>
      <li>\(\hat{y}\): prediction</li>
      <li>\(h_\theta(x)\): (vectorized) hypothesis function, using model parameters.</li>
      <li>\(\theta^T\): transpose of theta</li>
    </ul>
  </li>
  <li>
    <p>Loss function: MSE</p>

\[MSE(X, h_\theta) = {\frac{1}{m}\Sigma_{i=1}^{m}{\Big(\theta^T \cdotp x^{(i)} - y^{(i)}\Big)^2}}\]

    <ul>
      <li>How far away are predictions from actuals?</li>
      <li>Penalize big error more than small error</li>
    </ul>
  </li>
</ul>

<h5 id="the-normal-equation">The Normal Equation</h5>

<ul>
  <li><strong>Closed-form solution</strong> to linear regression
    <ul>
      <li>Not used a ton, no need to memorize</li>
    </ul>
  </li>
</ul>

<h5 id="computation-complexity">Computation Complexity</h5>

<ul>
  <li>Normal equation doesn’t scale well. Computational complexity of inverting matrix is
\(O(n^{2.4})\) to \(O(n^3)\)</li>
</ul>

<h4 id="gradient-descent">Gradient Descent</h4>

<ul>
  <li><em>The general idea of Gradient Descent is to tweak parameters
iteratively in order to minimize a cost function.</em> (111)</li>
  <li>Start with a random value (<strong>random initialization</strong>) then take steps
down the valley until you hit a minimum
<img src="/images/courses/mle-in-ten-parts-gradient-descent.png" alt="gradient-descent" /></li>
  <li><strong>Learning rate</strong>: size of each step</li>
  <li>MSE is <strong>convex</strong> (bowl-shaped) and <strong>continuous</strong> (no abrupt slope
changes)
    <ul>
      <li>This guarantees that GD will approach global minimum</li>
    </ul>
  </li>
  <li>Make sure to <strong>scale inputs</strong>. Makes it easier for GD to find minimum
across all dimensions more quickly</li>
</ul>

<h5 id="batch-gradient-descent">Batch Gradient Descent</h5>

<ul>
  <li>Compute <strong>partial derivative</strong> of cost function with regards to each
parameter \(\theta_j\)
    <ul>
      <li>Keep all other parameters constant
        <ul>
          <li>Parameter 1: “What is the slope of the mountain under my feet if I
face East?” Parameter 2: “North?”</li>
        </ul>
      </li>
      <li><strong>Batch</strong> GD: compute gradient vector over the entire training set</li>
    </ul>
  </li>
  <li>Once you have gradient vector (highest uphill direction), just go the
opposite direction to go downhill
    <ul>
      <li>Multiplied by <strong>learning rate</strong> \(\eta\)</li>
    </ul>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">eta</span> <span class="o">=</span> <span class="mf">0.1</span>
<span class="n">n_iterations</span> <span class="o">=</span> <span class="mi">1000</span>
<span class="n">m</span> <span class="o">=</span> <span class="mi">100</span>
<span class="n">theta</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>

<span class="k">for</span> <span class="n">iteration</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n_iterations</span><span class="p">):</span>
  <span class="n">gradients</span> <span class="o">=</span> <span class="mi">2</span><span class="o">/</span><span class="n">m</span> <span class="o">*</span> <span class="n">X_b</span><span class="p">.</span><span class="n">T</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">X_b</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">theta</span><span class="p">)</span> <span class="o">-</span> <span class="n">y</span><span class="p">)</span>
  <span class="n">theta</span> <span class="o">=</span> <span class="n">theta</span> <span class="o">-</span> <span class="n">eta</span> <span class="o">*</span> <span class="n">gradients</span>
</code></pre></div></div>

<ul>
  <li>Set a high number of iterations, and stop the algorithm when gradient
vector becomes very small
    <ul>
      <li>When <strong>norm</strong> (magnitude) becomes smaller than <strong>tolerance \(\epsilon\)</strong></li>
      <li>This indicates GD has reached minimum</li>
    </ul>
  </li>
  <li><strong>Convergence rate</strong> of GD is approx. \(O(1/\epsilon)\), so it slows
down as you lower the tolerance</li>
</ul>

<h5 id="stochastic-gradient-descent">Stochastic Gradient Descent</h5>

<ul>
  <li><strong>One random training example at a time</strong> to adjust parameters
    <ul>
      <li>Pro:
        <ul>
          <li>Converges and scales much faster</li>
          <li>Adds element of randomness, to escape local minima</li>
        </ul>
      </li>
      <li>Cons:
        <ul>
          <li>Less stable cost function, will not find the exact optimal solution
            <ul>
              <li>Add <strong>simulated annealing</strong> (gradually reduce learning rate) to
help with this</li>
              <li><strong>Learning schedule</strong> determines learning rate at each
iteration. SK-Learn has defaults</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>:question: why does shuffling training set and going instance by
instance converge more slowly than picking random instances with the
possibility of duplicates? Seems like they should be the same.</li>
  <li>:question: What does <code class="language-plaintext highlighter-rouge">y.ravel()</code> do?
    <ul>
      <li>Flattens array to 1D</li>
    </ul>
  </li>
</ul>

<h5 id="mini-batch-gradient-descent">Mini-batch Gradient Descent</h5>

<ul>
  <li>Middle ground between BGD and SGD. Splits training set into small sets
and updates parameters after processing each mini batch.
<img src="/images/courses/mle-in-ten-parts-gradient-descent-paths.png" alt="gradient-descent-paths" /></li>
</ul>

<h4 id="polynomial-regression">Polynomial Regression</h4>

<ul>
  <li>Basically the same as linear regression, add more parameters using
<code class="language-plaintext highlighter-rouge">sklearn.preprocessing.PolynomialFeatures(degree=2, include_bias=False).fit_transform(X)</code></li>
</ul>

<h4 id="learning-curves">Learning Curves</h4>

<ul>
  <li>How to decide # of parameters?
    <ul>
      <li><em>If a model performs well on the training data but generalizes
poorly according to the cross-validation metrics, then your model is
overfitting. If it performs poorly on both, then it is
underfitting.</em> (125)</li>
      <li><strong>Learning curve</strong>: plot of model performance on training set and
validation set as function of training set size or iteration #
<img src="/images/courses/mle-in-ten-parts-learning-curve.png" alt="learning-curve" /></li>
      <li>Underfitting curve: both curves reach a plateau at larger training
set size, close to each other and with fairly high error</li>
      <li>Overfitting curve: training set error is much lower than validation
set. Large gap between curves</li>
    </ul>
  </li>
  <li><strong>Bias/variance tradeoff</strong>: generalization error can be expressed as
sum of several components
    <ul>
      <li><strong>Bias</strong>: wrong assumptions, such as assuming data is linear when
it’s actually quadratic. High bias -&gt; underfitting</li>
      <li><strong>Variance</strong>: model is too sensitive to small variations in training
set, e.g. with too many parameters. High variance -&gt; overfitting</li>
      <li><strong>Irreducible error</strong>: noisiness of data, unavoidable. Can be
reduced by cleaning up data</li>
      <li><strong>Increased model complexity -&gt; increased variance, reduced bias.</strong></li>
    </ul>
  </li>
</ul>

<h4 id="regularized-linear-models">Regularized Linear Models</h4>

<ul>
  <li>Constraining model weights makes it harder for model to overfit data</li>
</ul>

<h5 id="ridge-regression">Ridge Regression</h5>

<ul>
  <li>Add a <strong>regularization term</strong> to the cost function based on the sum of
squares of model parameters (L2 norm)</li>
  <li>Regularization term: \(\alpha\frac{1}{2}\Sigma_{i=1}^{m}\theta_i^2\)</li>
  <li>Hyperparameter \(\alpha\) controls how much to regularize. 0 = no
regularization. High = all weights converge to 0.
<img src="/images/courses/mle-in-ten-parts-ridge-regression.png" alt="ridge-regression" /></li>
</ul>

<h5 id="lasso-regression">Lasso Regression</h5>

<ul>
  <li><strong>Least Absolute Shrinkage and Selection Operator Regression</strong> (:flushed:)</li>
  <li>Uses L1 norm instead of L2 norm</li>
  <li>Regularization term: \(\alpha\Sigma_{i=1}^{n}\|\theta_i\|\)</li>
  <li>Completely eliminates weights of least important features</li>
  <li>Can behave erratically. Use Elastic Net instead.</li>
</ul>

<h5 id="elastic-net">Elastic Net</h5>

<ul>
  <li>Combine Ridge and Lasso with mix ratio \(r\)
    <ul>
      <li>When r = 0, it’s Ridge</li>
      <li>When r = 1, it’s Lasso</li>
    </ul>
  </li>
  <li>Always use some regularization
    <ul>
      <li>Ridge is a good default, but Elastic Net is better if you think only
a few features are useful.
        <ul>
          <li>Just make it a hyperparameter! :)</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h5 id="early-stopping">Early Stopping</h5>

<ul>
  <li>Just stop training as soon as validation error reaches a minimum
<img src="/images/courses/mle-in-ten-parts-early-stopping.png" alt="early-stopping" /></li>
</ul>

<h4 id="logistic-regression">Logistic Regression</h4>

<ul>
  <li>Aka <strong>Logit Regression</strong>
    <ul>
      <li>The logit function is the inverse of the sigmoidal “logistic”
function or logistic transform used in mathematics, especially in
statistics. When the function’s variable represents a probability p,
the logit function gives the log-odds, or the logarithm of the odds
p/(1 − p).</li>
      <li>Effectively, pushes probability towards 0 or 1
<img src="/images/courses/mle-in-ten-parts-logit.png" alt="logit" /></li>
    </ul>
  </li>
</ul>

<h5 id="estimating-probabilities">Estimating Probabilities</h5>

<ul>
  <li>Estimated probability function:</li>
</ul>

\[\hat{p} = h_\theta(x) = \sigma(\theta^T \cdotp x)\]

<ul>
  <li>Sigmoid function: \(\sigma(t) = \frac{1}{1 + exp( - t)}\)</li>
</ul>

<h5 id="training-and-cost-function">Training and Cost Function</h5>

<ul>
  <li><em>The objective of training is to set the parameter vector \(\theta\)
so that the model estimates high probabilities for positive instances
(y = 1) and low probabilities for negative instances (y = 0).</em> (137)
    <ul>
      <li>Cost function uses <strong>log loss</strong>
        <ul>
          <li>Intuition: use -log(prediction) if the actual value is 1.
-log(prediction) will grow very large as prediction approaches 0,
penalizing a “wrong” guess of 0 when the actual is 1. Same logic
applies for using -log(1 - prediction) if actual value is 0.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

\[J(\theta) = - \frac{1}{m}\Sigma_{i=1}^{m}[y^{(i)}log(\hat{p}^{(i)}) + (1 - y^{(i)})log(1 - \hat{p}^{(i)})]\]

<ul>
  <li>Convex (bowl-shaped) so gradient descent will find the minimum</li>
</ul>

<h5 id="decision-boundaries">Decision Boundaries</h5>

<ul>
  <li>Thresholds where logistic regression will make different predictions:
<img src="/images/courses/mle-in-ten-parts-decision-boundary.png" alt="decision-boundary" /></li>
</ul>

<h5 id="softmax-regression">Softmax Regression</h5>

<ul>
  <li>Generalized version of logistic regression to support multiple classes
    <ul>
      <li><em>When given an instance x, the Softmax Regression model first
computes a score \(s_k(x)\) for each class \(k\), then estimates the
probability of each class by applying the softmax function to the
scores.</em> (141)
        <ul>
          <li>Softmax sums all of them to one</li>
          <li>Picks the highest probability after softmax</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Goal: model should estimate a high probability for the target class
and low probability for the other classes.
    <ul>
      <li>Cost function: <strong>cross entropy</strong>
        <ul>
          <li>When only two classes, it’s the same as log loss</li>
          <li>
\[J(\Theta) = - \frac{1}{m}\Sigma_{i=1}^{m}\Sigma_{k=1}^{K}y_k^{(i)}log\Big(\hat{p}_k^{(i)}\Big)\]
            <ul>
              <li>\(k\): classes</li>
              <li>\(y_k^{(i)}\) = 1 if target class for ith instance is k,
otherwise = 0</li>
            </ul>
          </li>
          <li>Measure how well a set of estimated class probabilities match
target classes</li>
          <li>:question: are cost function and loss function the same?
            <ul>
              <li>Nope, even though they are used loosely: https://stats.stackexchange.com/a/179027</li>
              <li>A loss function is a part of a cost function which is a type of
an objective function.</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h4 id="exercises">Exercises</h4>

<ul>
  <li>Assigned: #5, #11</li>
</ul>

<h5 id="exercise-5">Exercise 5</h5>

<ul>
  <li>Suppose you use Batch GD and you plot the validation error at
every epoch. If you notice that the validation error consistently goes
up, what is likely going on? How can you fix this?</li>
</ul>

<p>You want to plot the training error alongside the validation error to
get a complete picture of your learning curve. If your training error is
going down while your validation error is going up, it’s likely that
your model error is overfitting. If your training error is bouncing
around, it’s possible that you’ve chosen a suboptimal learning rate and
it’s causing your model to have a difficult time generalizing.</p>

<h5 id="exercise-11">Exercise 11</h5>

<ul>
  <li>Suppose you want to classify pictures as outdoor/indoor and
daytime/nighttime. Should you implement two Logistic Regression
classifiers or one Softmax Regression classifier?</li>
</ul>

<p>You should implement two Logistic Regression classifiers. Softmax
Regression classifiers are able to perform multi-class classification,
not the multi-output classification this problem calls for.</p>

<ul>
  <li>~From here on out, I took notes exclusively through Anki~, sorry!</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/07/18/mle-in-ten-parts/</guid>
                <description>
                    
                    Machine Learning Engineering in Ten Parts, with Paper Club
                    
                </description>
                <pubDate>Wed, 18 Jul 2018 00:00:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>China’s Social Credit System: A Step Towards Dystopia? Part Six: Looking Ahead</title>
                <link>http://tigerthinks.com/2018/07/03/social-credit-system-part-six-looking-ahead/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="medium"><a href="https://medium.com/@regit/chinas-social-credit-system-a-step-towards-dystopia-part-six-looking-ahead-264d352792fa">Medium</a></h2>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/07/03/social-credit-system-part-six-looking-ahead/</guid>
                <description>
                    
                    What's next for the SCS?
                    
                </description>
                <pubDate>Tue, 03 Jul 2018 00:07:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>China’s Social Credit System: A Step Towards Dystopia? Part Five: Barriers</title>
                <link>http://tigerthinks.com/2018/07/03/social-credit-system-part-five-barriers/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="medium"><a href="https://medium.com/@regit/chinas-social-credit-system-a-step-towards-dystopia-part-five-barriers-8d6ced5c65c7">Medium</a></h2>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/07/03/social-credit-system-part-five-barriers/</guid>
                <description>
                    
                    Obstacles in place to the further implementation of the SCS.
                    
                </description>
                <pubDate>Tue, 03 Jul 2018 00:05:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>China’s Social Credit System: A Step Towards Dystopia? Part Four: Joint Punishment</title>
                <link>http://tigerthinks.com/2018/07/03/social-credit-system-part-four-joint-punishment/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="medium"><a href="https://medium.com/@regit/chinas-social-credit-system-a-step-towards-dystopia-part-four-joint-punishment-35b594e659ea">Medium</a></h2>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/07/03/social-credit-system-part-four-joint-punishment/</guid>
                <description>
                    
                    2016 plan to enforce and discipline within the social credit system.
                    
                </description>
                <pubDate>Tue, 03 Jul 2018 00:04:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>China’s Social Credit System: A Step Towards Dystopia? Part Three: 2014 Social Credit Plan</title>
                <link>http://tigerthinks.com/2018/07/03/social-credit-system-part-three-2014-plan/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="medium"><a href="https://medium.com/@regit/chinas-social-credit-system-a-step-towards-dystopia-part-three-2014-social-credit-plan-5985c281039">Medium</a></h2>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/07/03/social-credit-system-part-three-2014-plan/</guid>
                <description>
                    
                    The culmination of decades of iteration, the 2014 Social Credit Plan
                    
                </description>
                <pubDate>Tue, 03 Jul 2018 00:03:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>China’s Social Credit System: A Step Towards Dystopia? Part Two: Historical Context</title>
                <link>http://tigerthinks.com/2018/07/03/social-credit-system-part-two-historical-context/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="medium"><a href="https://medium.com/@regit/chinas-social-credit-system-a-step-towards-dystopia-part-two-historical-context-8f72f35fc0ef">Medium</a></h2>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/07/03/social-credit-system-part-two-historical-context/</guid>
                <description>
                    
                    Historical context behind the SCS
                    
                </description>
                <pubDate>Tue, 03 Jul 2018 00:02:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>China’s Social Credit System: A Step Towards Dystopia? Part One: Introduction</title>
                <link>http://tigerthinks.com/2018/07/03/social-credit-system-part-one-introduction/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="medium"><a href="https://medium.com/@regit/chinas-social-credit-system-a-step-towards-dystopia-part-one-introduction-9348fa747c91">Medium</a></h2>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/07/03/social-credit-system-part-one-introduction/</guid>
                <description>
                    
                    Introduction to Social Credit System blog post series
                    
                </description>
                <pubDate>Tue, 03 Jul 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Understanding Pyro’s Model and Guide: A Love Story</title>
                <link>http://tigerthinks.com/2018/06/20/understanding-pyro-model-guide-a-love-story/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="medium"><a href="https://medium.com/paper-club/understanding-pyros-model-and-guide-a-love-story-7f3aa0603886">Medium</a></h2>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/20/understanding-pyro-model-guide-a-love-story/</guid>
                <description>
                    
                    Introduction to basic Pyro concepts
                    
                </description>
                <pubDate>Wed, 20 Jun 2018 00:00:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>How To Set Up Google Colab/Colaboratory For Building Pyro Models</title>
                <link>http://tigerthinks.com/2018/06/18/set-up-google-colab-colaboratory-pyro/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="medium"><a href="https://medium.com/paper-club/how-to-set-up-google-colab-colaboratory-for-building-pyro-models-8e51129e772a">Medium</a></h2>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/18/set-up-google-colab-colaboratory-pyro/</guid>
                <description>
                    
                    Setting up Colab to run Pyro models
                    
                </description>
                <pubDate>Mon, 18 Jun 2018 00:00:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Reality Driven Development</title>
                <link>http://tigerthinks.com/2018/06/17/reality-driven-development/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li><em>Software is a special snowflake in the project management world […]
It is an unsolved problem that nobody has managed to get correct
because understanding the psychology of how software developers work
plays a much more significant role.</em></li>
  <li><em><strong>Waterfall</strong> thrives in environments where everything can be planned up
front. Construction is a good example, where you can have architects
draw up plans for a building complete with resources needed. The cost
of resources, time to acquire them, aorder of assembly, time to
construct each phase, licensed professionals and necessary equipment
can be predicted with a reasonable degree of accuracy.</em></li>
  <li><em>The goal of <strong>Scrum</strong> is to isolate chunks of work into sprints.
Usually a sprint is a 2 or 3 week time period. The development team
will meet, look over the backlog of work to be done, estimate how long
those tasks will take to complete and then “commit” to what will be
done.</em></li>
  <li><strong>Goodhart’s Law</strong>: “When a measure becomes a target, it ceases to be
a good measure.”…you affect the outcome by paying too much attention
to it. i.e. cutting corners because the “target” is a 2 week sprint</li>
  <li><strong>Kanban</strong>: continuous software delivery
    <ul>
      <li>Visualize what you do <strong>today</strong></li>
      <li>Limit the amount of WIP</li>
      <li>Enhance <strong>flow</strong>: just pull off the next highest thing from the
backlog</li>
    </ul>
  </li>
  <li><em><strong>Kanban combined with about 2 hours per week of pairing gives you a
very productive and workable solution for an accountable, productive
software development process that allows your developers to maximize
their focus and still swiftly adapt to the needs of the company.</strong></em></li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/17/reality-driven-development/</guid>
                <description>
                    
                    Kanban + light pairing will give you a flexible, reality driven approach to achieving the real goal that's driving your business: delivering as much value as possible as fast as possible.
                    
                </description>
                <pubDate>Sun, 17 Jun 2018 19:30:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>The Bill Gates Line</title>
                <link>http://tigerthinks.com/2018/06/17/the-bill-gates-line/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li><em>This isn’t a platform. A <strong>platform is when the economic  value of
everybody that uses it, exceeds the value of the company that creates
it.</strong></em>
    <ul>
      <li><em>This is ultimately the most important distinction between platforms
and aggregators: platforms are powerful because they facilitate a
relationship between 3rd-party suppliers and end users; aggregators,
on the other hand, intermediate and control it.</em></li>
      <li><em>The best strategies entail business models that avoid Google and
Facebook completely: look no further than Amazon, which last month
stopped buying Google Shopping ads, something the company can afford
to do given that half of shoppers start their product searches on
Amazon.</em></li>
    </ul>
  </li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/17/the-bill-gates-line/</guid>
                <description>
                    
                    The distinction between platforms and aggregators is important! Platforms are a much better model.
                    
                </description>
                <pubDate>Sun, 17 Jun 2018 19:28:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>How to Kick Ass, With Mel Robbins</title>
                <link>http://tigerthinks.com/2018/06/17/how-to-kick-ass-with-mel-robbins/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li><strong>5 second rule</strong>: when you hesitate, count backwards from 5, and you only
have 5 seconds to take action.</li>
  <li>Draw attention from basal ganglia to prefrontal cortex</li>
  <li><strong>When you’re nervous tell yourself you’re excited</strong>. Same body chemical
response but mind interpretation is different–no cortisol to the
prefrontal cortex</li>
  <li>Relationships are about connection or power. Only works if both parties
are in it for connection</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/17/how-to-kick-ass-with-mel-robbins/</guid>
                <description>
                    
                    Life hacks and advice from author Mel Robbins.
                    
                </description>
                <pubDate>Sun, 17 Jun 2018 19:07:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Annie Duke | How to Make Decisions Like a Poker Champ</title>
                <link>http://tigerthinks.com/2018/06/17/annie-duke-how-to-make-decisions-poker/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>What is life? <strong>Decision making quality</strong> and <strong>luck</strong></li>
  <li><strong>Motivated reasoning</strong>: reasoning toward conclusion instead of truth.
This is bad and it’s a trap we often fall into.</li>
  <li>Being smarter is bad because you think you can combat your own biases
    <ul>
      <li>Can try and form accountability groups to keep each other
accountable</li>
    </ul>
  </li>
  <li><strong>Temporal discounting</strong>: “if this happened a year ago how would I feel
about it?”</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/17/annie-duke-how-to-make-decisions-poker/</guid>
                <description>
                    
                    Annie Duke (have heard her on other podcasts and have her book on my reading list) discusses the relative roles of decision quality and luck in producing life's outcomes.
                    
                </description>
                <pubDate>Sun, 17 Jun 2018 19:04:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Feedback Friday | How to Charge What You're Worth</title>
                <link>http://tigerthinks.com/2018/06/17/how-to-charge-what-youre-worth/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Visit <strong>Advanced Human Dynamics</strong> for scripts and templates on reaching out to
folks</li>
  <li><strong>Dig the well before you’re thirsty</strong></li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/17/how-to-charge-what-youre-worth/</guid>
                <description>
                    
                    Not much to see, just one resource and one nugget.
                    
                </description>
                <pubDate>Sun, 17 Jun 2018 19:02:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Game Theory</title>
                <link>http://tigerthinks.com/2018/06/17/game-theory/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li><strong>Game theory</strong>: The study of equilibria based solutions
    <ul>
      <li>Where neither party wants to leave their strategy</li>
    </ul>
  </li>
  <li>Issues:
    <ul>
      <li>Assuming common knowledge is bad. Chess everyone has full state,
most real-life scenarios all parties don’t</li>
    </ul>
  </li>
  <li>Your <strong>discount factor</strong> is the cost to you of a prolonged game. I.e. how
much does it hurt you the longer it takes your house to sell</li>
</ul>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/17/game-theory/</guid>
                <description>
                    
                    Game theory is the study of equilibria-based solutions.
                    
                </description>
                <pubDate>Sun, 17 Jun 2018 19:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Stripe: Patrick and John Collison</title>
                <link>http://tigerthinks.com/2018/06/17/stripe-patrick-and-john-collison/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>23 and 21 when they started stripe</li>
  <li>Grew up on farm in rural Ireland</li>
  <li>Took 2 years to launch</li>
  <li>Perfect response to the “you are so young”: <strong>“less so every day”</strong></li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/17/stripe-patrick-and-john-collison/</guid>
                <description>
                    
                    Patrick (29) and John (27) Collison are inspirations.
                    
                </description>
                <pubDate>Sun, 17 Jun 2018 19:00:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>School</title>
                <link>http://tigerthinks.com/2018/06/17/school/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Guest: T.K. Coleman</li>
  <li>Education begins with the results you the learner want to create</li>
  <li>When you choose not to go to college you get a ton of objections that
your peers don’t get
    <ul>
      <li>“What are you doing? What kind of entrepreneurship?”</li>
      <li>College is cop out justification for anything</li>
    </ul>
  </li>
  <li>“Just because it’s paid for” is the worst reasoning. Consider
opportunity cost always</li>
  <li>Set reasonable expectations so you don’t disappoint people</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/17/school/</guid>
                <description>
                    
                    Relatable and thought-provoking conversation about the true value of college today.
                    
                </description>
                <pubDate>Sun, 17 Jun 2018 18:57:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Aubrey Marcus Wants To Help You Be The Best You</title>
                <link>http://tigerthinks.com/2018/06/17/aubrey-marcus-best-you/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Onnit is the company. Own the Day is the book
    <ul>
      <li>Mother worked with Pat Riley’s teams, got him into personal wellness
space</li>
      <li>Podcast circulation was best way to get publicity initially</li>
    </ul>
  </li>
  <li>Cold shower 2 minutes. Release <strong>norepinephrine</strong></li>
  <li>Don’t be afraid of fat</li>
  <li>Intermittent fasting if you’re not working out a ton</li>
  <li>Psychidelics have had great healing stuff. <strong>Silocybin</strong> active ingredient.
    <ul>
      <li>Check out MAPS research.</li>
    </ul>
  </li>
  <li>6 deep breaths helps change mental state. Do it once every few hours</li>
</ul>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/17/aubrey-marcus-best-you/</guid>
                <description>
                    
                    CEO of a company that makes brain- and body-enhancing supplements. Chats about his company and his personal life.
                    
                </description>
                <pubDate>Sun, 17 Jun 2018 18:56:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>306 - Breaking Bad News</title>
                <link>http://tigerthinks.com/2018/06/17/breaking-bad-news/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Rush medical school in Chicago</li>
  <li>Bad news: drastic negative change in future of patient</li>
  <li>Students evaluated on how they break bad news</li>
  <li>Rob Buckman trains as doctor after being a comedian
    <ul>
      <li>He got sick and it really helped when doctor empathized with him.  Got
an autoimmune disease.</li>
      <li>Then he started to get better and wanted to fix doctor patient relations</li>
    </ul>
  </li>
  <li>Bad news: <strong>SPIKES</strong>
    <ul>
      <li>Setting: make it calming</li>
      <li>Perception: “how are you currently feeling about this situation?”</li>
      <li>Invitation: “at what level do you want to know?</li>
      <li>Knowledge: “what would you like to know?”</li>
      <li>Emotions: “how does this make you feel?”</li>
      <li>Strategy and summary: come up with action items, invite questions,
make sure they know what happens next</li>
    </ul>
  </li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/17/breaking-bad-news/</guid>
                <description>
                    
                    SPIKES system for breaking bad news: Setting Perception Invitiation Knowledge Emotions Strategy
                    
                </description>
                <pubDate>Sun, 17 Jun 2018 18:55:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>5 Psychology Terms You're Probably Misusing</title>
                <link>http://tigerthinks.com/2018/06/17/five-psychology-terms-youre-probably-misusing/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li><strong>Bystander apathy</strong>: more people see something, less likely someone gets
help
    <ul>
      <li>Started with Katie Genevese murder. 38 bystanders no one called police</li>
      <li>Diffusion of responsibility and judging other people’s reactions
–&gt; bystander apathy</li>
    </ul>
  </li>
  <li>Your brain <strong>isn’t hardwired</strong>, it’s more like an etch a sketch. Can be
shaken up!</li>
  <li><strong>Statistically reliable</strong> is misleading. Not replicable or reliable. 1 in
20! Ew. P hacking</li>
  <li><strong>Personality types</strong> are bad. It’s a big spectrum</li>
  <li><strong>Steep learning curve</strong> means it’s easy!! A gentle curve would mean
it’s difficult…</li>
</ul>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/17/five-psychology-terms-youre-probably-misusing/</guid>
                <description>
                    
                    Bystander apathy, hardwired brain, statistically reliable, personality type, and steep learning curve are all commonly misused.
                    
                </description>
                <pubDate>Sun, 17 Jun 2018 18:53:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Ryan Michler | Why Man Is His Own Worst Enemy</title>
                <link>http://tigerthinks.com/2018/06/17/ryan-michler-why-man-is-his-own-worst-enemy/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Guest: hRyan Michler. Book: Sovereignty</li>
  <li><strong>After action review</strong>
    <ul>
      <li>What did I accomplish?</li>
      <li>What did I not accomplish?</li>
      <li>What did I do well?</li>
      <li>What did I not do so well?</li>
      <li>What can I do better moving forward?</li>
    </ul>
  </li>
  <li>Four parts of <strong>battle plan</strong>:
    <ul>
      <li>Calibration. Get right with yourself mentality</li>
      <li>Connection. Your relationships</li>
      <li>Condition. Your physical health</li>
      <li>Contribution. Provide value.</li>
    </ul>
  </li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/17/ryan-michler-why-man-is-his-own-worst-enemy/</guid>
                <description>
                    
                    Title misleading. Just a chat about processes that help you maintain sanity
                    
                </description>
                <pubDate>Sun, 17 Jun 2018 18:48:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>#491 - Weekly Recap: When To Leave a Good Job</title>
                <link>http://tigerthinks.com/2018/06/17/weekly-recap-when-to-leave-a-good-job/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<p>Leave right before it becomes a bad job</p>
<ul>
  <li>#490: nomadic designer:
    <ul>
      <li>Pack Hacker</li>
      <li>Intentional Travelers</li>
      <li>Professional Hobo</li>
    </ul>
  </li>
  <li>#499: English Teacher
    <ul>
      <li>Reach out to Alex founder of phrase it about dyslexia project</li>
    </ul>
  </li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/17/weekly-recap-when-to-leave-a-good-job/</guid>
                <description>
                    
                    Easy: leave right before it becomes a bad job.
                    
                </description>
                <pubDate>Sun, 17 Jun 2018 18:45:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>#402: Why Honor Matters</title>
                <link>http://tigerthinks.com/2018/06/17/why-honor-matters/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li><strong>Horizontal honor</strong> you get simply by being part of a group. Equally
distributed. Eg judge or military member</li>
  <li><strong>Vertical honor</strong> you get by juggling for position within group. Eg comic’s
comic who makes comedians laugh</li>
  <li>Oops missed the punchline here</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/17/why-honor-matters/</guid>
                <description>
                    
                    What is honor? It still has a place as a part of civilization.
                    
                </description>
                <pubDate>Sun, 17 Jun 2018 18:25:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Nepotism: When Hiring the Best Just Won't Do</title>
                <link>http://tigerthinks.com/2018/06/17/nepotism/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Try to get children and relatives experience in the industry elsewhere
before hiring them. Otherwise can create a lot of resentment</li>
  <li><strong>First generation starts, second carries on, third ruins</strong>
    <ul>
      <li>Same as immigrants!</li>
    </ul>
  </li>
  <li><strong>Relatedness x benefit &gt; cost</strong> for nepotism to
work</li>
  <li>Root nepos comes from Catholic priests having sons (but they’re not
allowed to have sex) and disguising them as nephews and moving them up
the ranks</li>
  <li>Opposite of meritocracy. Always a pendulum and balance
    <ul>
      <li>If it swings too far one way it inevitably comes back.</li>
    </ul>
  </li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/17/nepotism/</guid>
                <description>
                    
                    Nepotism is the practice of hiring family members who might not be qualified for the job. It has a long and checkered history.
                    
                </description>
                <pubDate>Sun, 17 Jun 2018 18:22:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Systems and Software for Machine Learning at Scale with Jeff Dean - TWiML Talk #121</title>
                <link>http://tigerthinks.com/2018/06/17/jeff-dean/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Background:
    <ul>
      <li>Moved around a ton. 11 schools as a kid</li>
      <li>Undergrad research on neural networks. Not enough compute</li>
      <li>Joined Google in 1999</li>
      <li>Worked on MapReduce. Reliably at scale</li>
    </ul>
  </li>
  <li>Beginning of resurrection of neural networks around 2008</li>
  <li>
    <p>Next 5 years (from 2018): automated machine learning. E.g. maximize
throughput through intersections in cities. Should be universally
available to all cities, not just those with deep learning specialists</p>

    <p>–</p>
  </li>
  <li><strong>Differential privacy</strong> is a mathematical definition for the privacy loss
that results to individuals when their private information is used in
the creation of a data product.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/17/jeff-dean/</guid>
                <description>
                    
                    Good interview with one of the AI Gods.
                    
                </description>
                <pubDate>Sun, 17 Jun 2018 16:56:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>The Psychology of Money</title>
                <link>http://tigerthinks.com/2018/06/17/the-psychology-of-money/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li><em>Investing is not the study of finance. <strong>It’s the study of how people
behave with money.</strong> And behavior is hard to teach, even to really
smart people. You can’t sum up behavior with formulas to memorize or
spreadsheet models to follow. Behavior is inborn, varies by person, is
hard to measure, changes over time, and people are prone to deny its
existence, especially when describing themselves.</em></li>
  <li><em>1. <strong>Earned success and deserved failure fallacy</strong>: a tendency to
underestimate the role of luck and risk, and a failure to recognize
that luck and risk are different sides of the same coin.</em>
    <ul>
      <li>I want you to be successful, and I want you to earn it. But realize
that not all success is due to hard work, and not all poverty is due
to laziness. Keep this in mind when judging people, including yourself.</li>
    </ul>
  </li>
  <li><em>2. <strong>Cost avoidance syndrome</strong>: A failure to identify the true costs
of a situation, with too much emphasis on financial costs while
ignoring the emotional price that must be paid to win a reward.</em>
    <ul>
      <li>e.g. Discount Factor in game theory</li>
      <li>Scott Adams: <em>One of the best pieces of advice I’ve ever heard goes
something like this: If you want success, figure out the price, then
pay it. It sounds trivial and obvious, but if you unpack the idea it
has extraordinary power.</em></li>
    </ul>
  </li>
  <li><em>3. <strong>Rich man in the car paradox</strong></em>
    <ul>
      <li>The person with the nice car is <strong>less rich</strong> for having bought it!
        <ul>
          <li><strong>Wealth is what you don’t see.</strong></li>
        </ul>
      </li>
      <li>Don’t conflate the possession with the person</li>
    </ul>
  </li>
  <li><em>4. A tendency to adjust to current circumstances in a way that makes
forecasting your future desires and actions difficult, resulting in
the inability to capture long-term compounding rewards that come from
current decisions.</em>
    <ul>
      <li>First rule of compounding: <strong>Never interrupt it unnecessarily</strong>.</li>
      <li>Balance is a good policy when there is so much change happening</li>
    </ul>
  </li>
  <li><em>5. <strong>Anchored-to-your-own-history bias</strong>: your personal experiences
make up maybe 0.00000000000001% of what’s happened in the world but
maybe 80% of how you think the world works.</em>
    <ul>
      <li>YES YES YES</li>
      <li>If you grew up in the 50s and 60s, you have a completely different
impression of the stock market than if you were born in 1970. But
the overall trend has been the same!!</li>
      <li>This will make the behavior of other people make much more sense. If
you can control for it there are lots of opportunities for you.</li>
    </ul>
  </li>
  <li><em>**6. Historians are Prophets fallacy: Not seeing the irony that
history is the study of surprises and changes while using it as a
guide to the future. An overreliance on past data as a signal to
future conditions in a field where innovation and change is the
lifeblood of progress.</em>
    <ul>
      <li>Don’t over-admire people who have been there, done that when it
comes to money. Things will change from when they had their success.</li>
    </ul>
  </li>
  <li><em>7. The seduction of pessimism in a world where optimism is the most
reasonable stance.</em>
    <ul>
      <li>“If it bleeds it leads” leads to overall sadness</li>
      <li>Far more reasons to be optimistic!</li>
    </ul>
  </li>
  <li><em>Linear thinking is so much more intuitive than exponential thinking.
[…] If I ask you to calculate 8 + 8… + 8 in your head, it’s 72. If
I ask you to calculate 8<strong>9, your head explodes (it’s 134,217,728).
**COMPOUND INTEREST IS FANATASTIC</strong>.</em></li>
  <li><em>**Real contrarianism is when your views are so uncomfortable and
belittled that they cause you to second guess whether they’re right.
Very few people can do that. But of course that’s the case. Most
people can’t be contrarian, by definition. Embrace with both hands
that, statistically, you are one of those people.</em></li>
  <li><strong>Boredom</strong>: <em>The purpose of investing is to maximize returns, not
minimize boredom. Boring is perfectly fine. Boring is good. If you
want to frame this as a strategy, remind yourself: <strong>opportunity
lives where others aren’t, and others tend to stay away from what’s
boring.</strong></em></li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/17/the-psychology-of-money/</guid>
                <description>
                    
                    Really really good blog post about fallacies people commit with money and in life
                    
                </description>
                <pubDate>Sun, 17 Jun 2018 16:25:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>The Gambler Who Cracked the Horse-Racing Code</title>
                <link>http://tigerthinks.com/2018/06/17/the-gambler-who-cracked-the-horse-racing-code/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>The GOAT himself: <strong>Bill Benter</strong></li>
  <li><em>When they won, there were satisfied smiles only. They were
professionals; cheering and hooting were for rubes.</em></li>
  <li><em>a statistical phenomenon called <strong>gambler’s ruin</strong>. It holds that if
a player with limited funds keeps betting against an opponent with
unlimited funds (that is, a casino), he will eventually go broke, even
if the game is fair. All lucky streaks come to an end, and losing runs
are fatal.</em></li>
  <li><em>In pursuit of mathematical perfection, he became convinced that
horses raced differently according to temperature, and when he learned
that British meteorologists kept an archive of Hong Kong weather data
in southwest England, he traveled there by plane and rail. A bemused
archivist led him to a dusty library basement, where Benter copied
years of figures into his notebook. When he got back to Hong Kong, he
entered the data into his computers–and found it had no effect
whatsoever on race outcomes. Such was the scientific process.</em></li>
  <li>Wagered $1.6M on the Triple Trio. Won it (of course), left prize money
to charity.</li>
  <li>Multiple hundreds of millions of dollars in lifetime winnings</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/17/the-gambler-who-cracked-the-horse-racing-code/</guid>
                <description>
                    
                    Incredible story about the sharks of horse betting
                    
                </description>
                <pubDate>Sun, 17 Jun 2018 16:11:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>AMA with John Doerr</title>
                <link>http://tigerthinks.com/2018/06/17/john-doerr-pitching/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<p><em>Usually the hardest thing is to get really great people to help you
grow the business. So I recommend that entrepreneurs–from the time they
get up in the morning to when they can’t make any further progress-I
recommend that they spend all of their time recruiting, interviewing,
and trying to build diverse teams.</em></p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/17/john-doerr-pitching/</guid>
                <description>
                    
                    The most important thing in building a company is its people.
                    
                </description>
                <pubDate>Sun, 17 Jun 2018 16:08:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Domain-Driven Design</title>
                <link>http://tigerthinks.com/2018/06/13/domain-driven-design/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: One of the best software books I’ve ever read. Puts into words
a lot of the best advice I’ve received about building software.</p>

<h2 id="notes">Notes</h2>

<p>Note: Part IV, Strategic Design, was much less useful to me than the
rest of the book.</p>

<h3 id="foreword-martin-fowler">Foreword (Martin Fowler)</h3>

<ul>
  <li><em>The greatest value of a domain model is that it provides a
<strong>ubiquitous language</strong> that ties domain experts and technologists
together.</em></li>
</ul>

<h3 id="preface">Preface</h3>

<ul>
  <li>Premise:
    <ul>
      <li>For most software projects, the primary focus should be on the domain
and domain logic</li>
      <li>Complex domain designs should be based on a model</li>
    </ul>
  </li>
  <li>Prereqs:
    <ul>
      <li>Development is iterative</li>
      <li>Developers and domain experts have a close relationship</li>
    </ul>
  </li>
</ul>

<h2 id="part-i-putting-the-domain-model-to-work">Part I: Putting the Domain Model to Work</h2>

<ul>
  <li>A <strong>model</strong>:
    <ul>
      <li>Is a selective simplification</li>
      <li>Consciously structured form of knowledge</li>
      <li>Focuses information on a problem</li>
    </ul>
  </li>
</ul>

<h3 id="ch-1-crunching-knowledge">Ch 1: Crunching Knowledge</h3>

<ul>
  <li><strong>Conversations</strong>
    <ul>
      <li><em>It is the creativity of brainstorming and massive experimentation,
leveraged through a model-based language and disciplined by the
feedback loop through implementation, that makes it possible to find
a knowledge-rich model and distill it. This kind of <strong>knowledge
crunching</strong> turns the knowledge of the team into valuable models.</em>
(12)</li>
    </ul>
  </li>
  <li>Techincal success requires <strong>serious learning about the specific
domain</strong></li>
  <li>Be <strong>specific</strong>: <em>Domain experts are usually not aware of how copmlex
their mental processes are as, in the course of their work, they
navigate all these rules, reconcile contradictions, and fill in gaps
with common sense. Software can’t do this.</em> (16)</li>
</ul>

<h3 id="ch-2-communication-and-the-use-of-language">Ch 2: Communication and the Use of Language</h3>

<ul>
  <li>Issue: <em>across this linguistic divide, the domain experts vaguely
describe what they want. Developers, struggling to understand a domain
new to them, vaguely understand.</em> (24)
    <ul>
      <li><em>A project faces serious problems when its language is fractured.
Domain experts use their jargon while technical team members have
their own language tuned for dicussing the domain in terms of their
design.</em> (24)</li>
    </ul>
  </li>
  <li>Solution: <strong>ubiquitous language</strong>
    <ul>
      <li><em>Use the model as the backbone of a language. Commit the team to
exercising that language relentlessly in all communication within
the team and in the code. Use the same language in diagrams,
writing, and especially speech.</em> (26)</li>
    </ul>
  </li>
  <li>Speech is the lossiest form of communication. Thus, if you have a
model you can explain in conversation, it’s probably good.
    <ul>
      <li>“If we give the routing service an origin, destination, and arrival
time, it can look up the stops the cargo will have to make, and,
well…stick them in the database” –&gt; vague, technical</li>
      <li>“The origin, destination, and so on…it all feeds into the routing
service, and we get back an itinerary that has everything we need in
it.” –&gt; more complete, but verbose</li>
      <li><strong>A routing service finds an itinerary that satistfies a route
specification</strong> –&gt; bingo</li>
    </ul>
  </li>
  <li><em>If sophisticated domain experts don’t understand the model, there is
something wrong with the model</em> (32)</li>
  <li><em>It takes fastidiousness to write code that doesn’t just do the right
thing but also says the right thing.</em> (40)</li>
  <li>Written design docs:
    <ul>
      <li>Should complement code and speech, not replace them</li>
      <li>Should work for a living and stay current
        <ul>
          <li>If can’t stay current, get rid of it</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="ch-3-binding-model-and-implementation">Ch 3: Binding Model and Implementation</h3>

<ul>
  <li><em>Domain-driven design calls for a model that doesn’t just aid early
analysis but is the very foundation of the deisgn […] tightly
relating the code to an underlying model gives the code meaning and
makes the model relevant.</em> (46)
    <ul>
      <li><em>If the design, or some central part of it, does not map to the
domain model, that model is of little value, and the correctness of
the softwarte is suspect.</em> (48)</li>
    </ul>
  </li>
  <li>How to bind model and implementation: <em>Design a portion of the
software system to reflect the domain model in a very literal way, so
that the mapping is obvious. Revisit the model and modify it to be
implemented more naturally in software, even as you seek to make it
reflect deeper insight into the domain. Demand a single model that
serves both purposes well, in addition to supporting a robust
<strong>ubiquitous language</strong>.</em> (49)</li>
  <li>Silent side affects are generally unacceptable.</li>
</ul>

<h2 id="part-ii-the-building-blocks-of-a-model-driven-design">Part II: The Building Blocks of a Model-Driven Design</h2>

<p><img src="/images/books/domain-driven-design-model-driven-design.png" alt="model-driven-design" /></p>

<h3 id="ch-4-isolating-the-domain">Ch 4: Isolating the Domain</h3>

<ul>
  <li><em>Concentrate all the code related to the domain model in one layer and
isolate it from the user interface, application, and infrastructure
code. The domain objects, free of the responsibility of displaying
themselves, storing themselves, managing application tasks, and so
forth, can be focused on expressing the domain model. This allows a
model to evolve to be rich enough and clear enough to capture
essential business knowledge and put it to work.</em> (70)
    <ul>
      <li>Nice. The service layer</li>
    </ul>
  </li>
</ul>

<h3 id="ch-5-a-model-expressed-in-software">Ch 5: A Model Expressed in Software</h3>

<ul>
  <li>Three patterns of model eelements express model:
    <ul>
      <li><strong>Entity</strong> represents something with continuity and identity,
tracked through different states
        <ul>
          <li><strong>Defined primarily by its identity</strong></li>
          <li>YES: Person, city, car, lottery ticket</li>
          <li>NO: color, etc.</li>
          <li><em>The model must define what it means to be the same thing.</em> (92)</li>
          <li><em>The most basic responsibility of entities is to establish
continuity so that behavior can be clear and predictable. They do
this best if they are kept spare. Rather than focusing on the
attributes or even the behavior, strip the entity object’s
definition down to the most intrinsic characteristics,
particularly those that identify it or are commonly used to find
or match it. Add only behavior that is essential to the concept
and attributes that are required by that behavior. Beyond that,
look to remove behavior and attributes into other objects
associated with the core enty. Some of these will be entities.
Some will be value objects.</em> (93)</li>
        </ul>
      </li>
      <li><strong>Value object</strong> is basically anything that does not fit the above
        <ul>
          <li><em>Tracking the identity of entities is essential, but attaching
identity to other objects can hurt system performance, add
analytical work, and muddle the model by making all objects look
the same.</em> (97)</li>
          <li><em>An object that represents a descriptive aspect of the domain with
no conceptual identity is called a value object. Value objects are
instantiated to represent elements of the design that we only care
about for what they are, not who or which they are</em> (97)</li>
          <li>Color or Route</li>
          <li><strong>Make it immutable</strong></li>
        </ul>
      </li>
      <li><strong>Service</strong> is something that is done for a client on request
        <ul>
          <li><em>When a significant process or transformation in the domain is not
a natural responsibility of an entity or value object, add an
operation to the model as a standalone interface declared as a
service. Define the interface in terms of the language of the
model and make sure the operation name is part of the ubiquitous
language. Make the service stateless.</em> (105)</li>
          <li>Three good characteristics
            <ul>
              <li>Operation relates to concept that doesn’t fit in entity or value
object</li>
              <li>Interface defined in terms of other elements in domain model</li>
              <li>Operation is stateless</li>
            </ul>
          </li>
          <li>Best at “medium” granularity. Varies project o project</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Implementing every real-life association complicates implementation
and maintenance. Some strategies:
    <ul>
      <li>Impose a traversal direction</li>
      <li>Add a qualifier to reduce multiplicity (scope down associations)</li>
      <li>Eliminate nonessential associations</li>
    </ul>
  </li>
  <li><strong>Modules</strong> are also a part of the model. Package code together to
organize objects.
    <ul>
      <li><strong>Low coupling</strong>: force users to think about as few things as
possible at a time</li>
      <li><strong>High cohesion</strong>: force users to think about related topics at the
same time</li>
      <li>Don’t be too heavy-handed with module and package distinctions</li>
    </ul>
  </li>
  <li><em>The most effective tool for holding the parts together is a robust
ubiquitous language that underlies the whole heterogeneous model.</em>
(121)</li>
</ul>

<h3 id="ch-6-the-life-cycle-of-a-domain-object">Ch 6: The Life Cycle of a Domain Object</h3>

<ul>
  <li>Managing object life cycle: must <strong>maintain integrity</strong> and <strong>manage
complexity</strong></li>
  <li><strong>Aggregates</strong>
    <ul>
      <li><em>a cluster of associated objects that we treat as a unit for the
purpose of data changes. Each aggregate has a <strong>root</strong> and a <strong>boundary</strong>.
The boundary defines what is inside the aggregate. The root is a
single, specific entity contained in the aggregate. The root is the
only member of the aggregate that outside objects are allowed to
hold references to, although objects within the boundary may hold
references to each other.</em> (126)</li>
    </ul>
  </li>
  <li><strong>Factories</strong>
    <ul>
      <li>Cars aren’t assembled and driven at the same time. Similarly,
complex objects should be assembled separate from where they’re
used</li>
      <li>A program whose <strong>responsibility is the creation of other objects</strong></li>
      <li>Each creation method is atomic and enforces invariants of the entity
or aggregate being created</li>
      <li>If not super complex, can still use a constructor, but still a
very useful pattern to have available</li>
    </ul>
  </li>
  <li><strong>Repositories</strong>
    <ul>
      <li><strong>Reconstitution</strong>: Creation of an instance from stored data</li>
      <li>Why? <em>Domain logic moves into queries and client code, and the
entities and value objects become mere data containers. The sheer
technical complexity of applying most database access infrastructure
quickly swamps the client code, which leads developers to dumb down
the domain layer, which makes the model irrelevant.</em> (149)</li>
      <li><em>A repository represents all objects of a certain type as a
conceptual set. It acts like a collection, except with more
elaborate querying capability. Objects of the appropriate type are
added and removed, and the machinery behind the repository inserts
them or deletes them from the database.</em> (151)</li>
      <li>Present simple interface to clients</li>
      <li>Decouple application and domain design from persistence</li>
      <li>Communicate design decisions about object access</li>
      <li>Allow easy mocking</li>
    </ul>
  </li>
  <li><strong>Avoid find or create</strong>. Distinction between new and existing object
is important. Distinguishing between entities and value objects seems
to get you most of the value.</li>
</ul>

<h3 id="ch-7-using-the-language-an-extended-example">Ch 7: Using the Language: An Extended Example</h3>

<p><img src="/images/books/domain-driven-design-shipping-modules.png" alt="shipping-modules" />
<img src="/images/books/domain-driven-design-shipping-applications.png" alt="shipping-applications" /></p>

<h2 id="part-iii-refactoring-toward-deeper-insight">Part III: Refactoring Toward Deeper Insight</h2>

<ul>
  <li>Developing useful models:
    <ul>
      <li>Sophisticated domain models are <strong>achievable</strong> and <strong>worth the
time</strong></li>
      <li>Domain models are developed through an iterative process of
refactoring</li>
      <li>Domain models may call for sophisticated design skills</li>
    </ul>
  </li>
  <li><strong>Refactoring</strong>: the redesign of software in ways that do not change
its functionality
    <ul>
      <li>Instead of big up-front design, make a continuous series of small
changes leaving existing functionality unchanged while making design
more flexible and easier to understand</li>
      <li><em>The goal is that not only can a developer understand what the code
dos; he or she can also understand why it does what it does and can
relate that to the ongoing communication with the domain experts.</em>
(188)</li>
    </ul>
  </li>
</ul>

<h3 id="ch-8-breakthrough">Ch 8: Breakthrough</h3>

<p><img src="/images/books/domain-driven-design-fixed-shares.png" alt="fixed-shares" />
<img src="/images/books/domain-driven-design-share-pie.png" alt="share-pie" />
<img src="/images/books/domain-driven-design-constraints.png" alt="constraints" /></p>

<h3 id="ch-9-making-implicit-concepts-explicit">Ch 9: Making Implicit Concepts Explicit</h3>

<ul>
  <li>Steps:
    <ul>
      <li>Recognize a concept that has been hinted at in discussion or
implicitly in the design</li>
      <li>Represent it explicitly in the model with one or more objects or
relationships</li>
    </ul>
  </li>
  <li>
    <p>Before and after introducing <strong>Itinerary</strong> object:</p>

    <p><img src="/images/books/domain-driven-design-before-itinerary.png" alt="before-itinerary" />
<img src="/images/books/domain-driven-design-after-itinerary.png" alt="after-itinerary" /></p>
  </li>
</ul>

<h3 id="ch-10-supple-design">Ch 10: Supple Design</h3>

<ul>
  <li><em>To have a project accelerate as development proceeds–rather than get
weighed down by its own legacy–demands a design that is a pleasure to
work with, inviting to change. A supple design.</em> (244)</li>
</ul>

<p><img src="/images/books/domain-driven-design-supple-design.png" alt="supple-design" /></p>

<ul>
  <li><strong>Intention-revealing interfaces</strong>:
    <ul>
      <li><em>In domain-driven design, we want to think about meaningful domain
logic. Code that produces the effect of a rule without explicitly
stating the rule forces us to think of step-by-step software
procedures.</em> (245)</li>
      <li><em>If the interface doesn’t tell the client developer what he needs to
know in order to use the object effectively, he will have to dig into
the internals to understand the details anyway. A reader of the
client code will have to do the same. Then most of the value of the
encapsulation is lost.</em> (246)</li>
      <li>Therefore: <em><strong>Name classes and operations to describe their effect
and purpose</strong>, without reference to to the means by which they do
what they promise. This relieves the client developer of the need to
understand the internals. These names should conform to the
ubiquitous language so that team members can quickly infer their
meaning.</em> (247)</li>
    </ul>
  </li>
  <li><strong>Side-effect-free functions</strong>:
    <ul>
      <li><strong>Queries</strong> obtain information from the system, e.g. retrieving
variable data or performing a calculation
        <ul>
          <li>These should cause <strong>no side effects</strong></li>
        </ul>
      </li>
      <li><strong>Commands</strong> affect some change to the system</li>
      <li><em>Place as much of the logic of the program as possible into
functions, operations that return results with no observable side
effects. Strictly segregate commands into very sipmle operations
that do not return domain information.</em> (250)
        <ul>
          <li>Example: extracting <code class="language-plaintext highlighter-rouge">Pigment Color</code> class from <code class="language-plaintext highlighter-rouge">Paint</code> that
handles all of the mixing logic</li>
        </ul>
      </li>
      <li><em>The necessity of tracing concrete execution defeats abstraction.</em>
(255)</li>
    </ul>
  </li>
  <li><strong>Contours</strong>:
    <ul>
      <li><em>Find the conceptually meaningful unit of functionality, and the
resulting design will be both flexible and understandable. For
example, if an “addition” of two objects has a coherent meaning in
the domain, then implement methods at that level. Don’t break the
add() method into two steps.</em> (261)</li>
      <li>Make as many <strong>conceptually independent</strong> classes as possible</li>
    </ul>
  </li>
  <li><strong>Closure of operations</strong>:
    <ul>
      <li><em>Where it fits, define an operation who return type is the same as
the type of its argument(s). […] Such an operation is closed under
the set of instances of that type. A closed operation provides a
high-level interface without introducing any dependency on other
concepts.</em> (268)</li>
    </ul>
  </li>
  <li>Goal (e.g. with Share Pie refactor): <em>producing code that begins to
read like a conceptual definition of the business transaction, rather
than a calculation.</em> (290)</li>
</ul>

<h3 id="ch-11-applying-analysis-patterns">Ch 11: Applying Analysis Patterns</h3>

<ul>
  <li><strong>Analysis patterns</strong> are groups of concepts that represent a common
construction in business modeling.</li>
  <li>Double-entry accounting pattern:
<img src="/images/books/domain-driven-design-analysis-patterns.png" alt="analysis-patterns" /></li>
  <li>Reapplying organized knowledge. Kind of out of scope without reading
Fowler’s book?
    <ul>
      <li><em>Analysis patterns focus on the most critical and difficult
decisions and illuminate alternatives and choices. They anticipate
downstream consequences that are expensive if you have to discover
them for yourself.</em> (306)</li>
    </ul>
  </li>
</ul>

<h3 id="ch-12-relating-design-patterns-to-the-model">Ch 12: Relating Design Patterns to the Model</h3>

<ul>
  <li>Two levels:
    <ul>
      <li>Technical design patterns in code</li>
      <li>Conceptual patterns in model</li>
    </ul>
  </li>
  <li><strong>Strategy/Policy</strong> pattern
    <ul>
      <li><em>Factor the varying parts of a process into a separate “strategy”
object in the model. Factor apart a rule and the behavior it
governs. Implement the rule or substitutable process following the
Strategy design pattern. Multiple versions of the strategy object
represent different ways the process can be done.</em> (311)</li>
      <li>Ex: route-finding can be “default strategy” or “leg magnitude
policy” (fastest) or “cost strategy” (cheapest)</li>
    </ul>
  </li>
</ul>

<h3 id="ch-13-refactoring-toward-deeper-insight">Ch 13: Refactoring Toward Deeper Insight</h3>

<ul>
  <li><strong>Three main points</strong>:
    <ul>
      <li>Live in the domain</li>
      <li>Keep looking at things a different way</li>
      <li>Maintain an unbroken dialog with domain experts</li>
    </ul>
  </li>
</ul>

<h2 id="part-iv-strategic-design">Part IV: Strategic Design</h2>

<h3 id="ch-14-maintaining-model-integrity">Ch 14: Maintaining Model Integrity</h3>

<ul>
  <li><em>The most fundamental requirement of a model is that it be internally
consistent; that its terms always have the same meaning, and that it
contain no contradictory rules. The internal consistency of a model,
such that each term is unambiguous and no rules contradict, is called
<strong>unification</strong>.</em> (332)
    <ul>
      <li><em>Through a combination of proactive decisions about what should be
unified and pragmatic recognition of what is not unified, we can
create a clear, shared picture of the situation.</em> (333)</li>
    </ul>
  </li>
  <li><strong>Bounded Contexts</strong> is the specific place in the domain where a
model applies
    <ul>
      <li>Look out for <strong>duplicate concepts</strong> (same thing expressed in two
different ways) and <strong>false cognates</strong> (sound the same but are
not the same)</li>
    </ul>
  </li>
  <li>Best processes for <strong>continuous integration</strong>:
    <ul>
      <li>Reproducible merge/build technique</li>
      <li>Automated testing</li>
      <li>Rules setting an upper limit on the lifetime of unmerged changes</li>
      <li>Constant exercise of ubiquitous language in discussion of the model
and application</li>
    </ul>
  </li>
  <li>
    <p><em>A <strong>context map</strong> is in the overlap between project management and
software design. The natural course of events is for the boundaries to
follow the contours of team organization. People who work closely will
naturally share a model context.</em> (344)</p>

    <p><img src="/images/books/domain-driven-design-bounded-context.png" alt="bounded-context" /></p>
  </li>
  <li><strong>Shared kernel</strong> is where multiple teams share ownership over the
core domain</li>
  <li><strong>Anticorruption layer</strong>: <em>Create an isolating layer to provide
clients with functionality in terms of their own domain model. The
layer talks to the other system through its existing interface,
requiring little or no modification to the other system. Internally,
the layer translates in both directions as necessary between the two
models.</em> (365)
    <ul>
      <li><em>A <strong>Facade</strong> is an alternative interface for a subsystem that
simplifies access for the client and makes the subsystem easier to
use. […] The <strong>facade</strong> belongs in the bounded context of the
other system. It just presents a friendlier face specialized for
your needs.</em> (366)</li>
      <li><em>An <strong>Adapter</strong> is a wrapper that allows a client to use a different
protocol than that understood by the implementer of the behavior.
When a client sends a message to an adapter, it is converted to a
semantically equivalent message and sent on to the “adaptee”.</em> (366)</li>
    </ul>
  </li>
  <li>Balancing boundaries
    <ul>
      <li>Larger bounded contexts:
        <ul>
          <li>Flow between user tasks is smoother</li>
          <li>Easier to understand one model than two plus mappings</li>
          <li>Translation overhead</li>
          <li>Shared language fosters clear team communication</li>
        </ul>
      </li>
      <li>Smaller bounded contexts
        <ul>
          <li>Less coordination required between teams</li>
          <li>Don’t need to stretch as far for abstractions</li>
          <li>Can cater to special needs or narrower domains</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><em>There is a range of strategies for unifying or integrating models. In
general terms, you will trade off the benefits of seamless integration
of functionality against the additional effort of coordination and
communication. You trade more independent action against smoother
communication. More ambitious unification requries control over the
design of the subsystems involved.</em> (387)</li>
</ul>

<p><img src="/images/books/domain-driven-design-context-relationship-patterns.png" alt="context-relationship-patterns" /></p>

<h3 id="ch-15-distillation">Ch 15: Distillation</h3>

<ul>
  <li><em><strong>Distillation</strong> is the process of separating the components of a
mixture to extract the essence in a form that makes it more valuable
and useful. A model is a distillation of knowledge.</em> (397)
    <ul>
      <li><em>The effort is motivated by the desire to extract that one
particularly valuable part, the part that distinguishes out software
and makes it worth building: the <strong>Core Domain</strong>.</em> (397)</li>
    </ul>
  </li>
</ul>

<p><img src="/images/books/domain-driven-design-distillation.png" alt="distillation" /></p>

<ul>
  <li><em>Boil the model down. Find the <strong>core domain</strong> and provide a means of
easily distinguishing it from the mass of supporting model and code.
Bring the most valuable and specialized concepts into sharp relief.
Make the core small. Apply top talent to the core domain, and recruit
accordingly. Spend the effort in the core to find a deep model and
develop a supple design–sufficient to fulfill the vision of the
system. Justify investment in any other part by how it supports the
distilled core.</em> (401)</li>
  <li><em>When the field already has a highly formalized and rigorous model,
use it. Acccounting and physics are two examples that come to mind.</em>
(408)</li>
  <li><strong>Domain vision statement</strong>
    <ul>
      <li><em>Write a short description (about one page) of the Core Domain and
the value it will bring, the “value proposition”. Ignore those
aspects that do not distinguish this domain model from others. Show
how the domain model serves and balances diverse interests. Keep it
narrow. Write this statement early and revise it as you gain new
insight.</em> (415)</li>
      <li>Corollary: the <strong>Distillation document</strong>
        <ul>
          <li><em>Write a very brief document (three to seven sparse pages) that
describes the core domain and the primary interactions among core
elements.</em> (417)</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><img src="/images/books/domain-driven-design-domain-vision-statement.png" alt="domain-vision-statement" /></p>

<h3 id="ch-16-large-scale-structure">Ch 16: Large-Scale Structure</h3>

<ul>
  <li><em>A <strong>large-scale structure</strong> is a language that lets you discuss and
understand the system in broad strokes. A set of high-level concepts
or rules, or both, establishes a pattern of design for an entire
system. This organizing principle can guide design as well as aid
understanding. It helps coordinate independent work because there is a
shared concept of the big picture: how the roles of various parts
shape the whole.</em> (442)
    <ul>
      <li><em>Devise a pattern of rules or roles and relationships that will span
the entire system and that allows some understanding of each part’s
place in the whole–even without detailed knowledge of the part’s
responsibility.</em> (442)</li>
    </ul>
  </li>
</ul>

<p><img src="/images/books/domain-driven-design-large-scale-structure.png" alt="large-scale-structure" /></p>

<ul>
  <li><strong>Evolving order (my favorite)</strong>
    <ul>
      <li><em>An up-front imposition of a large-scale structure is likely to be
costly. As development proceeds, you will almost certainly find a
more suitable structure, and you may even find that the prescribed
structure is prohibiting you from taking a design route that would
greatly clarify or simplify the application.</em> (444)</li>
      <li><em>Let this conceptual large-scale structure <strong>evolve</strong> with the
application, possibly changing to a completely different type of
structure along the way. Don’t overconstrain the detailed design and
model decisions that must be made with detailed knowledge.</em> (444)</li>
    </ul>
  </li>
  <li><strong>Responsibility layers</strong>
    <ul>
      <li><em>Layers are partitions of a system in which the members of each
partition are aware of and are able to use the services of the layer
“below”, but unaware of and independent of the layers “above”.</em>
(450)</li>
    </ul>
  </li>
</ul>

<p><img src="/images/books/domain-driven-design-responsibility-layers.png" alt="responsibility-layers" /></p>

<ul>
  <li>Espousing <strong>minimalism</strong> in refactoring towards a fitting structure
    <ul>
      <li><em>One key to keeping the cost down is to keep the structure simple
and lightweight. Don’t attempt to be comprehensive. Just address the
most serious concerns and leave the rest to be handled on a
case-by-case basis. Early on, it can be helpful to choose a loose
structure, such as a system metaphor or a couple of responsibility
layers.</em> (481)</li>
    </ul>
  </li>
</ul>

<h3 id="ch-17-bringing-the-strategy-together">Ch 17: Bringing the Strategy Together</h3>

<p><img src="/images/books/domain-driven-design-part-four.png" alt="part-four" /></p>

<ul>
  <li><strong>Assessment first</strong> of a project
    <ul>
      <li>Draw a context map. Is it consistent?</li>
      <li>Attend to use of language. Is it using a ubiquitious language?</li>
      <li>Understand what is important. Is the core domain identified? Is
there a domain vision statement? Can you write one?</li>
      <li>Does the technology work for or against a model-driven design?</li>
      <li>Do the developers have the necessary technical skills?</li>
      <li>Are the developers knowledgeable about the domain?</li>
    </ul>
  </li>
  <li><strong>Six essentials for strategis design decision making</strong>
    <ul>
      <li>Decisions must reach the entire team</li>
      <li>The decision process must absorb feedback</li>
      <li>The plan must allow for evolution</li>
      <li>Architecture teams must not siphon off all the best and the
brightest</li>
      <li>Strategic design requires minimalism and humility</li>
      <li>Objects are specialists; Developers are generalists</li>
    </ul>
  </li>
  <li><em>The success of a design is not necessarily marked by its stasis. Take
a system people depend on, make it opaque, and it will live forever as
untouchable legacy. A deep model allows clear vision that can yield
new insight, while a supple design facilitates ongoing change. The
model they came up with was deeper, better aligned with the real
concerns of the users. Their design solved real problems. It is the
nature of software to change, and this program has continued to evolve
in the hands of the team that owns it.</em> (502)</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/13/domain-driven-design/</guid>
                <description>
                    
                    Software should be optimized for the domain it is performing in, or else it will turn into an unmaintainable nightmare for both developers and domain experts.
                    
                </description>
                <pubDate>Wed, 13 Jun 2018 19:51:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Predictably Irrational: The Hidden Forces That Shape Our Decisions</title>
                <link>http://tigerthinks.com/2018/06/12/predictably-irrational/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: The human mind sucks. A lot. And it sucks the same way very
awesome. Try to get ahead of that suckiness and (just maybe) take
advantage of it.</p>

<h2 id="notes">Notes</h2>

<h3 id="ch-0-introduction">Ch 0: Introduction</h3>

<ul>
  <li>The contents of this book should help you re-think what makes people
go and which systemic mistakes they make</li>
  <li><strong>Behavioral economics</strong> constrasts standard economic theory. Standard
economic theory assumes people behave rationally, which is just not
true. So behavioral economics takes their systemic irrational
behaviors and attempts to apply them to the market</li>
</ul>

<h3 id="ch-1-the-truth-about-relativity">Ch 1: The Truth about Relativity</h3>

<ul>
  <li><em>Humans rarely choose things in absolute terms. We don’t have an
internal value meter that tells us how much things are worth. Rather,
we focus on the relative advantage of one thing over another similar
thing, and estimate value accordingly</em> (1)
    <ul>
      <li><em>Most people don’t know what they want unless they see it in
context</em> (3). Example: TV sizes. Hard to compare unless given a
range of sizes and prices.</li>
    </ul>
  </li>
  <li><em>We not only tend to compare things with one another but also tend to
focus on comparing things that are easily comparable–and avoid
comparing things that cannot be compared easily.</em> (7). Introducing
“<strong>decoy</strong> Brad Pitt” (slightly uglier Brad Pitt) makes real Brad Pitt
look much more attractive. People try to find small differences and
use those as points of comparison even though they might be
meaningless in the grand scheme of things
    <ul>
      <li>The Economist: when $125 for online subscription and <em>also</em> $125 for
online PLUS print subscription, it makes you ignore the print only
subscription and just compare those two</li>
    </ul>
  </li>
  <li><em>The more we have, the more we want. And the only cure is to break the
cycle of <strong>relativity</strong>.</em> (20)</li>
</ul>

<h3 id="ch-2-the-fallacy-of-supply-and-demand">Ch 2: The Fallacy of Supply and Demand</h3>

<ul>
  <li><em>As Mark Twain once noted about Tom Sawyer, “Tom had discovered a
great law of human action, namely, that in order to make a man covet a
thing, it is only necessary to make the thing difficult to attain.</em>
(26)</li>
  <li><em>The basic idea of <strong>arbitrary coherence</strong> is this: although initial
prices are “arbitrary”, once those prices are established in our minds
they will shape not only present prices but also future prices (this
makes them “coherent”).</em> (27)
    <ul>
      <li>Example: people think about last two digits of social security
number. This anchors them, and is very close to what they
subsequently say they would pay for a certain bottle of wine.</li>
    </ul>
  </li>
  <li><em>Our <strong>first decisions</strong> resonate over a long sequence of decisions. First
impressions are important, whether they involve remembering that our
first DVD player cost much more than such players cost today (and
realizing that, in comparison, the current prices are a steal) or
remembering that gas was once a dollar a gallon, which makes every
trip to the gas station a painful experience.</em> (38)</li>
  <li><em>So you stand behind these people. Another person walks by. He sees
three people standing in line and thinks, “This must be a fantastic
restaurant,” and joins the line. Others join. We call this type of
behavior <strong>herding</strong>.</em> (38)</li>
  <li>Break anchoring by <strong>creating a totally different, non-comparable
experience</strong>. E.g. Starbucks did everything it could to distance
itself in consumers’ minds from Dunkin’ Donuts.</li>
  <li><em>The sensitivity we show to price changes might in fact be largely a
result of our memory for the prices we have paid in the past and our
desire for coherence with our past decisions–not at all a reflection
of our true preferences or our level of demand.</em> (48)</li>
  <li>Even knowing all this stuff isn’t enough to keep you safe! <em>In our
attempts to make sure that we end up with decisions that seem
well-reasoned and thoughtful, we commonly undergo a lot of unnecessary
mental gymnastics and justifications, particularly when the choices
are large and significant.</em> (52)</li>
</ul>

<h3 id="ch-3-the-cost-of-zero-cost">Ch 3: The Cost of Zero Cost</h3>

<ul>
  <li><em>Most transactions have an upside and a downside, but <strong>when something
is FREE! we forget the downside.</strong> FREE! gives us such an emotional
charge that we perceive what is being offered as immensely more
valuable than it really is. Why? I think it’s because humans are
intrinsivally afraid of loss. The real allure of FREE! is tied to this
fear. There’s no visible possibility of loss when we choose a FREE!
item (it’s free). But suppose we choose the item that’s not free.
Uh-oh, now there’s a risk of having made a poor decision–the
possibility of a loss. And so, given the choice, we go for what is
free.</em> (60)</li>
  <li>Examples include people choosing free options that are markedly worse
than even 1c or 5c options. E.g. Hershey’s kiss free and truffle 5c.
Truffle is economically a much much better deal.</li>
  <li>Free should be taken advantage of more in business, society, and
politics by savvy folks.</li>
</ul>

<h3 id="ch-4-the-cost-of-social-norms">Ch 4: The Cost of Social Norms</h3>

<ul>
  <li><em>When we keep <strong>social norms</strong> and <strong>market norms</strong> on their separate
paths, life hums along pretty well.</em> (76)</li>
  <li><strong>Social norms exist outside of money.</strong>
    <ul>
      <li><em>When money was mentioned, the lawyers used market norms and found
the offer lacking, relative to their market salary. When no money
was mentioned they used social norms and were willing to volunteer
their time. Why didn’t they just accept the $30, thinking of
themselves as volunteers who received $30? Because once market norms
enter our considerations, the social norms depart.</em> (78)</li>
      <li><em>The conclusion: no one is offended by a small gift, because even
small gifts keep us in the social exchange world and away from
market norms.</em> (80)
        <ul>
          <li><em>Offering people a gift, even a small one, is sufficient to get
them to help; but mention what the gift cost you, and you will
see the back of them faster than you can say market norms.</em> (81)</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Must be very very careful around the edges. Decide which side you want
to play on and stick with it.
    <ul>
      <li><em>When a social norm collides with a market norm, the social norm
goes away for a long time. In other words, social relationships are
not easy to reestablish.</em> (85)</li>
    </ul>
  </li>
  <li>Can take advantage of social norms being cheap and effective
    <ul>
      <li><em>Money, as it turns out, is very often the most expensive way to
motivate people. Social norms are not only cheaper, but often more
effective as well.</em> (93)</li>
      <li><em>The point is that while gifts are financially inefficient, they are
an important social lubricant. They help us make friends and create
long-term relationships that can sustain us through the ups and
downs of life. Sometimes, it turns out, a waste of money can be
worth a lot.</em> (97)</li>
    </ul>
  </li>
</ul>

<h3 id="ch-5-the-power-of-a-free-cookie">Ch 5: The Power of a Free Cookie</h3>

<ul>
  <li><em>When <strong>price is not a part of the exchange</strong>, we become less selfish
maximizers and start caring more about the welfare of others.</em> (109)
    <ul>
      <li>Experiment: free starburst vs. 1 cent starburst. Free starburst had
a 50% decrease in total demand</li>
      <li><em>Not mentioning prices ushers in social norms, and with these social
norms, we start caring more about others.</em> (112)</li>
    </ul>
  </li>
</ul>

<h3 id="ch-6-the-influence-of-arousal">Ch 6: The Influence of Arousal</h3>

<ul>
  <li>Experiment: ask Berkeley students to answer a set of questions like “would you
have sex with a married woman?”. Ask first to “imagine they are
aroused” and then asked same questions when they are actually aroused.
    <ul>
      <li><em>We all <strong>systematically underpredict the degree to which arousal
completely negates our superego</strong>, and the way emotions can take
control of our behavior.</em> (129)</li>
      <li>Honestly, best strategy to avoid making mistakes is to try not to
get into these situations in the first place (lol who would do that
tho)</li>
      <li>Applies to all other intense emotions as well (anger, etc.)</li>
    </ul>
  </li>
  <li>Obvious issue: completely ignores women. How much should that affect
perception of results?</li>
</ul>

<h3 id="ch-7-the-problem-of-procrastination-and-self-control">Ch 7: The Problem of Procrastination and Self-Control</h3>

<ul>
  <li><strong>Procrastination</strong>: giving up on long-term goals for immediate
gratification
    <ul>
      <li>Three classes:
        <ul>
          <li>No deadlines had worst grades</li>
          <li>“Set your own deadline” had middle grades</li>
          <li>Strict deadline had best grades</li>
        </ul>
      </li>
      <li>But don’t necessarily want to be dictatorial</li>
      <li><strong>Commitment in advance helps to prevent procrastination and help
with self-control</strong>
        <ul>
          <li>Especially if you publicize it</li>
        </ul>
      </li>
      <li>Can also combat by simplification, reducing cognitive overhead to
perform tasks
        <ul>
          <li>Ford had 18,000 different parts that need maintenance at different
intervals. Honda has same number of parts, but buckets them all
into 3 service periods, which is much easier for owners to
remember. Honda got way more cars in for service</li>
          <li><em>Simplification is one mark of real genius</em> (151)</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>Immediate gratification</strong>
    <ul>
      <li><em><strong>Variable schedule of reinforcement</strong> also works wonders for
motivating people. It is the magic that underlies gambling and
playing the lottery. How much fun would it be to play a slot machine
if you knew in advance that you would always lose nine times before
winning once, and that this sequence would continue for as long as
you played? It would probably be no fun at all!</em> (159)</li>
    </ul>
  </li>
  <li><strong>Self-control and discipline</strong>
    <ul>
      <li><em>In order to overcome many types of human fallibility, I believe
it’s useful to look for tricks that match immediate, powerful, and
positive reinforcements with the not-so-pleasant steps we have to
take toward our long-term objectivs. For me, beginning a
movie–before I felt any side effects–helped me to sustain the
unpleasantness of the treatment.</em> (164)</li>
    </ul>
  </li>
</ul>

<h3 id="ch-8-the-high-price-of-ownership">Ch 8: The High Price of Ownership</h3>

<ul>
  <li><strong>Ownership bias</strong></li>
  <li>Three irrational quirks
    <ul>
      <li>We fall in love with that we already have</li>
      <li>We focus on what we may lose, rather than what we may gain</li>
      <li>We assume other people will see the tranasaction from the same
perspective we do</li>
    </ul>
  </li>
  <li><em>Once we change our possessions we have a very hard time going back
down. As I noted earlier, ownership simply changes our perspective.
Suddenly, moving backward to our pre-ownership state is a loss, one
that we cannot abide. And so, while moving up in life, we indulge
ourselves with the fantasy that we can always ratchet ourselves back
if need be; but in reality, we can’t. Downgrading to a smaller home,
for instance, is experienced as a loss, it is psychologically painful,
and we are willing to make all kinds of sacrifices in order to avoid
such losses– even if, in this case, the monthly mortgage sinks the
ship.</em> (177)
    <ul>
      <li><strong>Very applicable to you Tiger!</strong></li>
    </ul>
  </li>
</ul>

<h3 id="ch-9-keeping-doors-open">Ch 9: Keeping Doors Open</h3>

<ul>
  <li><em>Xiang Yu explained to his troops that without the pots and the ships,
they had no other choice but to fight their way to victory or perish</em>
(183)
    <ul>
      <li>Spoiler alert: they did</li>
    </ul>
  </li>
  <li><em>We have an irrational compulsion to keep doors open. It’s just the
way we’re wired. But that doesn’t mean we shouldn’t try to close
them.</em> (194)
    <ul>
      <li>Experiment: multi-armed bandit experiment with three arms.</li>
      <li>When all three options were available all the time, students made
optimal choices and just spammed the highest-return bandit</li>
      <li>But when doors had the chance of closing, they impulsively fought to
keep doors open even though it’s a suboptimal strategy</li>
    </ul>
  </li>
  <li><strong>Deciding between two similar things</strong> is super difficult
    <ul>
      <li><em>What my friend failed to do when focusing on the similarities and
minor differences between two things was to take into account the
consequences of not deciding.</em> (195)</li>
      <li>We don’t take these consequences into account because we just can’t
close doors</li>
    </ul>
  </li>
</ul>

<h3 id="ch-10-the-effect-of-expectations">Ch 10: The Effect of Expectations</h3>

<ul>
  <li><em>When we believe beforehand that something will be good, therefore, it
generally will be good–and when we think it wil be bad, it will be
bad.</em> (204)
    <ul>
      <li>Example: two opposing teams’ fans are watching the same play, one
fan clearly sees a foul, the other clearly sees a clean play</li>
      <li><em>We can add small things that sound exotic and fashionable to our
cooking. These ingredients might not make the dish any better in a
blind taste test; but by changing our expectations, they can
effectively influence the taste when we have this pre-knowledge.</em>
(208)</li>
      <li>Coke vs. Pepsi: Pepsi wins in blind taste test, but when people are
informed which is which Coke wins because of superior branding and
marketing</li>
      <li>This creates conflicts
        <ul>
          <li><em>Conflicts generally require a neutral third party–who has not
been tainted with our expectatinos–to set down the rules and
regulations. Of course, accepting the word of a third party is not
easy and not always possible; but when it is possible, it can
yield substantial benefits. And for that reason alone, we must
continue to try.</em> (216)</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><em>We don’t really understand the role expectations play in the way we
experience and evaluate art, literature, drama, architecture, food,
wine–anything, really.</em> (220)
    <ul>
      <li>Famous violinist “sounds better” in a concert hall because that’s
what we’re expecting. If they were just bussing on the street we
wouldn’t really notice.</li>
    </ul>
  </li>
</ul>

<h3 id="ch-11-the-power-of-price">Ch 11: The Power of Price</h3>

<ul>
  <li><em><strong>Placebo</strong> comes from the Latin for “I shall please.” The term was used
in the fourteenth century to refer to sham mourners who were hired to
wail and sob for the deceased at funerals.</em> (228)</li>
  <li><em>In general, two mechanisms shape the expectations that make placebos
work. One is <strong>belief</strong>–our confidence or faith in the drug, the
procedure, or the caregiver. Sometimes just the fact that a doctor or
nurse is paying attention to us and reassuring us not only makes us
feel better but also triggers our internal healing processes. Even a
doctor’s enthusiasm for a particular treatment or procedure may
predispose us toward a positive outcome.</em> (230)</li>
  <li><em>The second mechanism is <strong>conditioning</strong>. Like Pavlov’s famous dogs, the
body builds up expectancy after repeated experiences and releases
various chemicals to prepare us for the future. Suppose you’ve ordered
pizza night after night. When the deliveryman presses the doorbell,
your digestive juices start flowing even before you can smell the pie.
Or suppose that you are snuggled up on the couch with your loved one.
As you’re sitting there staring into a crackling fire, the prospect of
sex releases endorphins, preparing you for what is to come next, and
sending your sense of well-being into the stratosphere.</em> (230)
    <ul>
      <li>Experiment: dummy pain numbing drug “Veladone”. <em>Indeed, that’s what
most of our participants found. Almost all of them reported less
pain when they experienced the electrical shocks under the influence
of Veladone. Very interesting–considering that Veladone was just a
capsule of vitamin C.</em> (234)</li>
    </ul>
  </li>
  <li>Price also influences the placebo effect. A $2.50/dose every patient
felt better. At $0.10/dose only half did.</li>
</ul>

<h3 id="ch-12-the-cycle-of-distrust">Ch 12: The Cycle of Distrust</h3>

<ul>
  <li><strong>The Public Goods Game</strong> (e.g. fishing)
    <ul>
      <li>Example: four people get $10 each. Whatever they put into the pot is
doubled and then split evenly; if everyone puts in $10, everyone
gets $20 back. But selfish strategy is to not put any money in
yourself and just reap the rewards. But if everyone does this
everyone loses.</li>
      <li><em>When we all cooperate, trust is high and the total value to society
is maximal. But distrust is infectious. When we see people defect by
lying in their advertisements, proposing scams, etc. we start acting
similarly; trust deteriorates, and everybody loses, including the
individuals who initially gained from their selfish act.</em> (256)</li>
    </ul>
  </li>
  <li><em>Most people and companies miss or ignore the fact that trust is an
important public resource and that losing it can have long-term
negative consequences for everyone involved.</em> (256)</li>
  <li>You slip into bad habits of lying slowly over time</li>
  <li>The Boy Who Cried Wolf: <em>The second, more important moral–one that we
are just beginning to understand–is that trust, once eroded, is very
hard to restore.</em> (264)</li>
</ul>

<h3 id="ch-13-the-context-of-our-character-part-i">Ch 13: The Context of Our Character, Part I</h3>

<ul>
  <li>Annual losses:
    <ul>
      <li>$525 million from robbery</li>
      <li><strong>$600 billion</strong> from employee theft and fraud</li>
      <li><strong>$24 billion</strong> bogus property insurance losses</li>
      <li><strong>$350 billion</strong> in unpaid taxes</li>
    </ul>
  </li>
  <li>Experiment: if given answers, will students cheat on test? Get 10
cents for each correct answer on a test of 50 questions
    <ul>
      <li>Control (no answer key): 32.6</li>
      <li>Self-check: 36</li>
      <li>Self-check + shred originals: 36</li>
      <li>Self-check + shred originals + take money yourself instead of being
given: 36</li>
      <li><strong>Yes, we cheat. But we do not take risk into account very well</strong></li>
    </ul>
  </li>
  <li><em>We care about honesty and we want to be honest. The problem is that
our internal honesty monitory is only active when we contemplate big
transgressions, like grabbing an entire box of pens from the
conference hall. For the little transgressions, like taking a single
pen or two pens, we don’t even consider how these actions would
reflect on our honesty and so our superego stays asleep.</em> (276)</li>
  <li>External controls don’t work…see Congress trying to police things.
Always a loophole.</li>
  <li>Students try to remember 10 Commandments before taking the same test
as before: <em>It was not the Commandments themselves that encouraged
honesty, but the mere contemplation of a <strong>moral benchmark</strong> of some
kind.</em> (281)</li>
  <li><em>So we learned that people cheat when they have a chance to do so, but
they don’t cheat as much as they could. Moreover, once they begin
thinking about honesty–whether by recalling the Ten Commandments or
by signing a simple statement–they stop cheating completely. In other
words, when we are removed from any benchmarks of ethical thought, we
tend to stray into dishonesty. Buf if we are reminded of morality at
the moment we are tempted, then wwe are much more likely to be
honest.</em> (286)</li>
</ul>

<h3 id="ch-14-the-context-of-our-character-part-ii">Ch 14: The Context of Our Character, Part II</h3>

<ul>
  <li>Market/social norms again: <strong>people think less about stealing when it
is indirect</strong>
    <ul>
      <li><em>When we look at the world around us, much of the dishonesty we see
involves cheating that is one step removed from cash. Companies
cheat with their accounting practices; executives cheat by using
backdated stock options; lobbyists cheat by underwriting parties for
politicians; drug companies cheat by sending doctors and their wives
off on posh vacations. To be sure, these people don’t cheat with
cold cash. And that’s my point: cheating is a lot easier when it’s a
step removed from money.</em> (295)</li>
    </ul>
  </li>
  <li>Same experiment as Ch 13 with the test that students could cheat on.
But now, instead of directly getting cash, they get tokens, which they
go to a different table to exchange for cash
    <ul>
      <li><strong>More than double the amount of cheating</strong></li>
    </ul>
  </li>
  <li>This experiment was on MIT students. <em>The scary thought is that if we
did the experiments with nonmonetary currencies that were not as
immediately convertible into money as tokens, or with individuals who
cared less about their honesty, or with behavior that was not so
publicly observable, we would most likely have found even higher
levels of dishonesty.</em> (303)</li>
</ul>

<h3 id="ch-15-beer-and-free-lunches">Ch 15: Beer and Free Lunches</h3>

<ul>
  <li>See if order in which people place orders at a restaurant affects
their eventual happiness with the food
    <ul>
      <li><em>Overall, those who made their choices out loud, in the standard way
that food is ordered at restaurants, were not as happy with their
selections as those who made their choices privately, without taking
others’ opinions into consideration.</em> (309)
        <ul>
          <li>Except the first person to place the order–he/she was equally as
happy as the asynchronous order-placers</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><em>Standard economics assumes that we are rational–that we know all the
pertinent information about our decisions, that we can calculate the
value of the different options we face, and that we are cognitively
unhindered in weighing the ramifications of each potential choice
[…] the fact that we make mistakes also means that there are ways to
improve our decisions–and therefore that there are opportunities for
“free lunches”.</em> (314)</li>
</ul>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/12/predictably-irrational/</guid>
                <description>
                    
                    How the human mind fails the people it is supposed to support
                    
                </description>
                <pubDate>Tue, 12 Jun 2018 18:44:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>The Curious Incident of the Dog in the Night-Time</title>
                <link>http://tigerthinks.com/2018/06/10/the-curious-incident-of-the-dog-in-the-night-time/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: Good-not-great story, a little bit gimmicky, maybe I related to him even a little bit with some of the obsessive thinking?</p>

<h2 id="snippets">Snippets</h2>

<ul>
  <li>Everything is super literal, since that’s how Christopher perceives
the world.</li>
</ul>

<blockquote>
  <p>
    Prime numbers are what is left when you have taken all the patterns
    away. I think prime numbers are like life. They are very logical but
    you could never work out the rules, even if you spent all your time
    thinking about them. (12)
  </p>
</blockquote>

<blockquote>
  <p>
    I think people believe in heaven because they don't like the idea of
    dying, because they want to carry on living and they don't like the
    idea that other people will move into their house and put their
    things into the rubbish. (33)
  </p>
</blockquote>

<blockquote>
  <p>
    This shows that intuition can sometimes get things wrong. And
    intuition is what people use in life to make decisions. But logic
    can help you work out the right answer. (65)
  </p>
</blockquote>

<blockquote>
  <p>
    Feelings are just a picture on the screen in your head of what is
    going to happen tomorrow or next year, or what might have happened
    instead of what did happen, and if it is a happy picture they smile
    and if it is a sad picture they cry. (119)
  </p>
</blockquote>

<blockquote>
  <p>
    And there is life on Earth because of an accident. But it is a very
    special kind of accident. And for this accident to happen in this
    special way, there have to be <b>3 conditions. And these are 1) Things
    have to make copies of themselves (this is called Replication), 2)
    They have to make small mistakes when they do this (this is called
    Mutation), 3) These mistakes have to be the same in their copies
    (this is called Heritability)</b> (164)
  </p>
</blockquote>

<h2 id="summary">Summary</h2>

<ul>
  <li>Christopher is autistic/Asperger’s and the story is told from his
point of view. This takes a large toll on everyone around him, most
dramatically his immediate family</li>
  <li>Christopher is sad to find out that his neighbor’s dog Wellington has
been killed. He is determined to investigate. His neighbor’s name is
Ms. Shears.</li>
  <li>Christopher’s Dad is the one who killed Wellington. He has also been
lying about the death of Christopher’s mother. These are both related
to the fact that the neighbor’s husband had an affair with
Christopher’s mother and they both ran away</li>
  <li>Christopher is scared because he thinks his Dad is also capable of
killing him, so he runs away to be with his Mother in London.</li>
  <li>The book ends on uncertain terms when Christopher’s mom chooses him
over Mr. Shears, but doesn’t end up with Christopher’s dad either, so
Christopher and his Mom move in to a spot together and he continues to
attend his special school.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/10/the-curious-incident-of-the-dog-in-the-night-time/</guid>
                <description>
                    
                    Christopher is a child who lives with some degree of autism which makes his thoughts and life quite different. He sets out to solve the mystery of who murdered his neighbor's dog.
                    
                </description>
                <pubDate>Sun, 10 Jun 2018 16:58:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Who is MiningLamp? Why was it able to win Tencent's high-value investment?</title>
                <link>http://tigerthinks.com/2018/06/09/who-is-mininglamp/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>1 billion RMB investment from Tencent in MiningLamp last year</li>
  <li>Why? Three 3’s
    <ul>
      <li>First group: AI in the cloud
        <ul>
          <li>Big data keeps getting bigger everywhere</li>
          <li>Value of data has increased</li>
          <li>Smart sensors are improving scale and dimension of data. All
thanks to improvements and centralization in computing!</li>
        </ul>
      </li>
      <li>Second group: dimensions in which AI can be applied
        <ul>
          <li>Fields with massive amounts of data</li>
          <li>Obviously inelastic demand (demand will not change even if price
rises. Demand is very high).</li>
          <li>Current solutions are flawed</li>
        </ul>
      </li>
      <li>Third group: challenges
        <ul>
          <li>Volume of data is large and difficult to handle, data silos create
bottlenecks</li>
          <li>Development of AI is still in infancy. Limit to value creation</li>
          <li>Perception of businesses and governments towards AI must change
and grow warmer</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>MiningLamp released <strong>Xiaming</strong>, a police AI.
    <ul>
      <li>Analyze crime maps and identify suspects and probabilities.
Comparable ability to an experienced police officer.</li>
      <li><strong>Cognitive AI</strong> vs. “perception AI”. It “thinks” and makes
decisions instead of just perceiving the world. Bias towards
neocortex (thinking, imagination, NLP, symbol processing)
        <ul>
          <li>Together, perception + cognition = human intelligence</li>
          <li>Three steps for development and adoption:
            <ul>
              <li>Bring data online</li>
              <li>Implement online analysis and mining based on data</li>
              <li>Closed-loop solution with a steady flow of customer value</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>“Still a long way to go”</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/09/who-is-mininglamp/</guid>
                <description>
                    
                    MiningLamp has gotten significant attention and investment for its police-assisting AI.
                    
                </description>
                <pubDate>Sat, 09 Jun 2018 16:15:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Evolution, Accelerated</title>
                <link>http://tigerthinks.com/2018/06/06/evolution-accelerated/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>CRISPR: <strong>Gene editing</strong>
    <ul>
      <li>Pioneer: Jennifer Doudna</li>
      <li><strong>Clustered Regularly Interspaced Short Palindromic Repeats</strong></li>
    </ul>
  </li>
  <li>Genetic vaccination card. Cells store DNA of viruses from past to help
if it reappears in future</li>
  <li>CAS9 programmable protein. Works like scissors</li>
  <li>CRISPR on animals: China mosquitoes. Micro pigs</li>
  <li>Very scary. Must be cautious</li>
  <li><strong>Somatic changes</strong>: tissue changes in fully developed person. Not
heritable</li>
  <li><strong>Germ line changes</strong>: changes to eggs, embryos, sperm. Passed on.</li>
</ul>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/06/evolution-accelerated/</guid>
                <description>
                    
                    CRISPR/CAS9 gene editing is equal parts exciting and terrifying.
                    
                </description>
                <pubDate>Wed, 06 Jun 2018 07:29:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Tire Agent: What Is a Startup Actually Worth?</title>
                <link>http://tigerthinks.com/2018/06/06/tire-agent/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<p>Summary says it all. Dude comes in asking for a $10M cap but he just
raised $3M two weeks before. This causes him all kinds of problems.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/06/tire-agent/</guid>
                <description>
                    
                    Raise money at a valuation you can go up from. When you're raising money, your competition is other startups competing for VC attention.
                    
                </description>
                <pubDate>Wed, 06 Jun 2018 07:27:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Winograd Schema Challenge</title>
                <link>http://tigerthinks.com/2018/06/06/winograd-schema-challenge/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li><strong>Turing test focuses too much on deception</strong></li>
  <li>Questions constructed that are tricky to guess and very clear: the
trophy wouldn’t fit in the suitcase because it was too small. What is
too small?</li>
  <li>Change small to big and it becomes a different answer</li>
  <li>More objective than Turing test with this type of format and scoring</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/06/winograd-schema-challenge/</guid>
                <description>
                    
                    The Winograd Schema Challenge aims to address the flaws in the Turing Test to determine if an AI is &quot;human level&quot;.
                    
                </description>
                <pubDate>Wed, 06 Jun 2018 07:21:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>#484 - Weekly Recap: How to Go from $1,000 to $5,000/Month</title>
                <link>http://tigerthinks.com/2018/06/06/weekly-recap-1k-to-5k/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<p>Summary says it all.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/06/weekly-recap-1k-to-5k/</guid>
                <description>
                    
                    How to increase profit? Either sell to more customers or sell more to existing customers.
                    
                </description>
                <pubDate>Wed, 06 Jun 2018 07:20:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>#387: Think Like a Poker Player to Make Better Decisions</title>
                <link>http://tigerthinks.com/2018/06/06/think-like-a-poker-player/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Guest: Annie Duke. Former pro poker player, into cog sci, now speaks
at companies about decisionmaking</li>
  <li>Life is poker not chess</li>
  <li><strong>Think of your opinions as decisions and decisions as bets</strong></li>
  <li>Try to <strong>analyze decisions outside of outcomes</strong></li>
  <li>Leaders need to express uncertainty. They should also speak last in
meeting.</li>
  <li>Reason towards decision accuracy instead of correctness</li>
</ul>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/06/think-like-a-poker-player/</guid>
                <description>
                    
                    Trust The Process. Poker-sourced advice is pretty similar to DFS.
                    
                </description>
                <pubDate>Wed, 06 Jun 2018 06:59:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>#20 Never Underestimate Your First Idea w/ Twitter/Medium's Ev Williams</title>
                <link>http://tigerthinks.com/2018/06/06/never-underestimate-your-first-idea/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li><strong>Grit</strong>: stick to things. Keep asking why why why till you get to top
level goal</li>
  <li>Fail early</li>
  <li>Please <strong>ask</strong> for feedback. No feedback is bad feedback</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/06/never-underestimate-your-first-idea/</guid>
                <description>
                    
                    You can spend your entire career iterating on one idea, like Ev Williams has going from Blogger to Twitter to Medium.
                    
                </description>
                <pubDate>Wed, 06 Jun 2018 06:46:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Reinforcement Learning</title>
                <link>http://tigerthinks.com/2018/06/06/reinforcement-learning/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>You don’t know the rules, only get a reward signal. Want to maximize
reward</li>
  <li><strong>State</strong>: recent history, etc</li>
  <li><strong>Actions</strong>: things you can do</li>
  <li><strong>Transition function</strong>: based on state. Determines scoring</li>
  <li><strong>Minimax</strong>: minimize opponent maximize self</li>
  <li>Don’t start with reinforcement learning. If human can’t determine
good features machine won’t be able to</li>
</ul>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/06/reinforcement-learning/</guid>
                <description>
                    
                    Reinforcement learning is a type of unsupervised state-action-transition-reward training mainly used to learn games right now.
                    
                </description>
                <pubDate>Wed, 06 Jun 2018 06:42:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>The Most Ambitious Thing Humans Have Ever Attempted</title>
                <link>http://tigerthinks.com/2018/06/06/the-most-ambitious-thing-humans-have-ever-attempted/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Guest: Atul Gawander. Surgeon, author.</li>
  <li>What does restaurant do better than hospital? Quality control, cost
control, innovation in service
    <ul>
      <li>Also massively less complex</li>
    </ul>
  </li>
  <li>Universal healthcare is a massive ambitious project. Average of 8</li>
  <li>procedures. Everyone is born. <strong>60k maladies 6k drugs</strong>
    <ul>
      <li>“Most ambitious ever” seems like a misnomer but w/e</li>
    </ul>
  </li>
  <li>Bad feedback loop for surgeons. Little to no follow up</li>
  <li><strong>Heroism is emphasized too much.</strong> Incrementalism and prevention are as
important but pay etc doesn’t reflect that because they aren’t as
“visible”</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/06/the-most-ambitious-thing-humans-have-ever-attempted/</guid>
                <description>
                    
                    Truly global healthcare is &quot;the most ambitious thing humans have ever attempted&quot;, but there are reasons for optimism.
                    
                </description>
                <pubDate>Wed, 06 Jun 2018 06:31:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Suze Orman: From Waitress to Personal Finance Wizard</title>
                <link>http://tigerthinks.com/2018/06/06/suze-orman-from-waitress-to-personal-finance-wizard/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Super outspoken woman</li>
  <li>Started at Buttercup Cafe in Berkeley as a waitress. Loved it</li>
  <li>A “financial advisor” lost the 50k she got from friends to
start a business because he made bad investments</li>
  <li>She learned about finance and markets when she figured out why her money
was going bad in the market</li>
  <li>Then became a sick stock trader by – how else – hustling her tail
off</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/06/suze-orman-from-waitress-to-personal-finance-wizard/</guid>
                <description>
                    
                    Suze Orman is another example of stubbornness and hustle helping someone break into an industry.
                    
                </description>
                <pubDate>Wed, 06 Jun 2018 06:27:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Will Storr | Avoiding Self-Obsession in the Age of the Selfie</title>
                <link>http://tigerthinks.com/2018/06/06/will-storr-avoiding-self-obsession/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li><strong>Neoliberalism</strong>: freedom! Response to competition from 80s</li>
  <li>People create fictional narrative of themselves by comparing themselves
to others. This is wrong!</li>
  <li>Decades ago, stars were called stars because they were miles away, unattainable!
You’re not meant to compare!</li>
  <li>Spectrums of traits: <strong>introversion, openness to experience,
agreeableness, conscientiousness, neuroticism</strong>. Newcastle personality
test</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/06/will-storr-avoiding-self-obsession/</guid>
                <description>
                    
                    Don't compare yourself with other people. Evaluate against your own inner barometer.
                    
                </description>
                <pubDate>Wed, 06 Jun 2018 06:26:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>FUBU: Daymond John</title>
                <link>http://tigerthinks.com/2018/06/06/fubu-daymond-john/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Started as a waiter at red lobster after high school. Friends would
come home with college degrees and he questioned his own decisions.</li>
  <li>Wanted a brand that loved the people who loved hip hop. Other brands
didn’t want inner city kids wearing their stuff</li>
  <li>Started by making his own hats and selling on street corner. Kept
growing and growing from there</li>
  <li>In ‘92 finally got serious. Quit red lobster</li>
  <li>Give free 4xl 5xl shirts to big dudes like bodyguards. Lots of exposure</li>
  <li>300k in orders from clothes show. Snuck in with no booth. Mom took out
loan on house to complete orders</li>
  <li>How You Built That: Len Testa Disneyland optimization app</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/06/fubu-daymond-john/</guid>
                <description>
                    
                    Daymond John put it all on the line and had to hustle incredibly hard to build the brand FUBU and finally justify not going to college like his peers.
                    
                </description>
                <pubDate>Wed, 06 Jun 2018 06:19:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Duana Welch | The Science of Jealousy and How to Manage It</title>
                <link>http://tigerthinks.com/2018/06/06/duana-welch-the-science-of-jealousy/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>How to handle if partner is talking to other people in social setting:
don’t butt in but don’t totally ignore. Just check in every now and then.
Mouth “you okay?”</li>
  <li>Jealousy is like a smoke detector! Good to have around cause it can
signal</li>
  <li><strong>Paternal assurance</strong> is why guys care about sex. Human women don’t have
external signs of ovulation. So they are concerned with raising their
own kids
    <ul>
      <li>Err this seems pseudoscience-y</li>
    </ul>
  </li>
  <li>Fix behavior: notice then redirect toward reality. Do this as often as
possible.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/06/duana-welch-the-science-of-jealousy/</guid>
                <description>
                    
                    Jealousy is rooted deeply into our psychology but there are ways to carve out the bad parts and leave the good.
                    
                </description>
                <pubDate>Wed, 06 Jun 2018 06:17:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>#391: Micronutrients, Genetics, and Preventing Age-Related Diseases</title>
                <link>http://tigerthinks.com/2018/06/06/micronutrients-genetics-preventing-age-related-diseases/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Guest: Dr Rhonda Patrick</li>
  <li>Vitamins and minerals we need
    <ul>
      <li><strong>Recommended daily allowance is bare minimum</strong></li>
      <li>Magnesium prevents cancer mutations</li>
      <li>Folate for cell reproduction. Leafy greens</li>
    </ul>
  </li>
  <li>Nutrogenomics: your ancestors’ diet can dictate how your body responds
to stuff
    <ul>
      <li>Can test online</li>
    </ul>
  </li>
  <li>Intermittent fasting is really good. Forces damaged cells to commit
apoptosis. Like taking out laundry</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/06/micronutrients-genetics-preventing-age-related-diseases/</guid>
                <description>
                    
                    Micronutrients are essential for health. Magnesium, folate, etc. Also goes into intermittent fasting.
                    
                </description>
                <pubDate>Wed, 06 Jun 2018 06:16:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Improv'ing Leadership</title>
                <link>http://tigerthinks.com/2018/06/06/improv-ing-leadership/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Dick Costolo, former CEO of Twitter. Did standup with Steve Carrell
before getting back into tech.</li>
  <li>Leaders:
    <ul>
      <li>Listen</li>
      <li>Don’t prevent mistakes. Fix mistakes when they happen</li>
      <li>Admit mistakes of their own</li>
    </ul>
  </li>
</ul>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/06/improv-ing-leadership/</guid>
                <description>
                    
                    How a background in improv and comedy prepared Dick Costolo to be a CEO in Silicon Valley
                    
                </description>
                <pubDate>Wed, 06 Jun 2018 06:15:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Reproducibility and the Philosophy of Data with Clare Gollnick - TWiML Talk #121</title>
                <link>http://tigerthinks.com/2018/06/06/reproducibility/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Guest: Clare Gollnick has neuro background</li>
  <li><strong>P hacking</strong>: reanalyzing data to try and find an explanation. Icky</li>
  <li>All data is from the past. Assumption that it’s predictive is faulty</li>
  <li>Better model is “I looked at it differently” instead of “I tried a ton
of stuff and one happened to work”</li>
</ul>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/06/reproducibility/</guid>
                <description>
                    
                    Studies are not reproducible and it's not a good look for the industry. Solution: do real research, don't just throw stuff at a wall and see what sticks.
                    
                </description>
                <pubDate>Wed, 06 Jun 2018 05:57:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>#388: Why Group Culture Is So Important to Success</title>
                <link>http://tigerthinks.com/2018/06/05/group-culture-success/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Guest: Daniel Coyle</li>
  <li>What leaders need to provide: <strong>vision, purpose, connection</strong></li>
  <li><strong>Deep fun &gt; shallow fun</strong>. This is why people in great cultures are
working hard and why people return to great cultures</li>
  <li>Good culture: spurs, seal team 6</li>
  <li>Bad culture: missile minute men
    <ul>
      <li>Fear, lack of future</li>
    </ul>
  </li>
  <li><strong>Allen curve</strong>: personal interaction boosts creativity and happiness</li>
  <li>Questions to ask during 1-on-1:
    <ul>
      <li>What should we keep doing</li>
      <li>What should we stop doing</li>
      <li>Tell me something I don’t know</li>
    </ul>
  </li>
  <li><strong>Vulnerability loops</strong> are essential for good communication
    <ul>
      <li>Leaders should say “I screwed that up”</li>
    </ul>
  </li>
  <li>Critic cannot suggest the change. <strong>Owner should maintain ownership</strong></li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/05/group-culture-success/</guid>
                <description>
                    
                    Leaders create strong cultures by providing vision, purpose, and connection, freeing members to engage in &quot;deep fun&quot;
                    
                </description>
                <pubDate>Tue, 05 Jun 2018 20:30:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>#22 How to find your big idea</title>
                <link>http://tigerthinks.com/2018/06/03/how-to-find-your-big-idea/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Look, look, look, then act</li>
  <li>Everyone needs somewhere good to think. Can be a familiar place or a
foreign place</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/03/how-to-find-your-big-idea/</guid>
                <description>
                    
                    Look, look, look, then act.
                    
                </description>
                <pubDate>Sun, 03 Jun 2018 20:49:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>#384: What It Really Means to Be Self-Reliant</title>
                <link>http://tigerthinks.com/2018/06/03/what-it-really-means-to-be-self-reliant/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Kyle Eschenroeder</li>
  <li>Ralph Waldo Emerson self reliance essay</li>
  <li>Self reliance: <strong>Maintaining sovereignty over oneself in a connected
civilized world. You decisions are your own</strong></li>
  <li><strong>Inner scorecard</strong> is important way to balance your opinion vs judgments of
others</li>
  <li>Peter Thiel: <strong>you are not a lottery ticket</strong>. Your skill, your network, etc. can
greatly increase your chances vs. “statistics”</li>
</ul>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/03/what-it-really-means-to-be-self-reliant/</guid>
                <description>
                    
                    Self-reliance is maintaining sovereignty over oneself in a connected civilized world.
                    
                </description>
                <pubDate>Sun, 03 Jun 2018 19:59:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Here's Why All Your Projects Are Always Late--And What to Do About It</title>
                <link>http://tigerthinks.com/2018/06/03/why-all-your-projects-are-always-late/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>2nd avenue subway is a grotesque example</li>
  <li><strong>Planning fallacy</strong> (Kahneman Tversky): people underestimate amount of time
a project will take even while knowing other data points</li>
  <li><strong>Optimism bias</strong> is positive! Leads to happiness. Just need to be aware of
it
    <ul>
      <li>Leads to imagining scenario where things go right and dismissing
scenario where things go wrong</li>
    </ul>
  </li>
  <li><strong>Coordination neglect</strong>: underestimating overhead of coordination when
adding ppl to group</li>
  <li>Procrastination stems from <strong>poor impulse control</strong></li>
  <li>Avoid state of continuous partial attention</li>
  <li>Use <strong>reference class forecasting</strong>: ignore your project. Look at similar
projects.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/03/why-all-your-projects-are-always-late/</guid>
                <description>
                    
                    Projects, especially big ones, are always late. This is due to optimism bias, coordination neglect, the planning fallacy, and (in the case of government) planners not being around for consequences.
                    
                </description>
                <pubDate>Sun, 03 Jun 2018 19:45:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Optimal decision-making with POMDPs</title>
                <link>http://tigerthinks.com/2018/06/03/optimal-decisionmaking-with-pomdps/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>MDP has states actions transition functions and reward functions</li>
  <li>Partially observable stuff is where you can’t see every part of state.
    <ul>
      <li>Chess is fully observable, battleship is not</li>
    </ul>
  </li>
  <li>Update beliefs based on results of actions still, but be more cautious
cause you don’t have the whole picture</li>
  <li>Train with Bellman equation. Curse of dimensionality</li>
</ul>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/03/optimal-decisionmaking-with-pomdps/</guid>
                <description>
                    
                    POMDPs are Markov decision processes that have to deal with a partially obervable game.
                    
                </description>
                <pubDate>Sun, 03 Jun 2018 18:27:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Does Early Education Come Way Too Late?</title>
                <link>http://tigerthinks.com/2018/06/03/does-early-education-come-way-too-late/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Economist John List (also involved in Uber study!)</li>
  <li>Chicago experimental pre school for state of the art techniques for
cognitive and non cognitive skills
    <ul>
      <li>Give parents homework too. Incentivize them with money.</li>
      <li>Tons of hoops to jump through!</li>
    </ul>
  </li>
  <li>30 million fewer words for kids in poverty than affluent kids by age 3.
    <ul>
      <li>Also differing quality - affirmation vs. prohibition, word and sentence
complexity</li>
    </ul>
  </li>
  <li>Non cognitive skills are massive predictors of school success: attention
span, focus, confidence, etc.</li>
  <li>Tune in, talk more, take turns for better child development. 3 Ts</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/03/does-early-education-come-way-too-late/</guid>
                <description>
                    
                    Parenting is so high-pressure. Seems like you can create a big gap if you're not super diligent even in the first two to three years!
                    
                </description>
                <pubDate>Sun, 03 Jun 2018 18:06:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>#382: The Secrets of Greater Endurance</title>
                <link>http://tigerthinks.com/2018/06/03/the-secrets-of-greater-endurance/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Endurance determinants: VO2 max (how much oxygen you can breathe in, max
aerobic quantity). “Human machine” model</li>
  <li><strong>We aren’t buckets we are balloons</strong></li>
  <li>Central governance. Brain stops muscles so you stay alive</li>
  <li>Important concept: <strong>rate of perceived effort</strong>. i.e. if it’s an 8 on
your set than maybe you can do 2 more reps</li>
  <li>Lots of conflicting research on keto/paleo, hydration. Hard to say at
this point</li>
  <li>Can train <strong>response inhibition</strong> to increase indurance. Basically,
tell brain to shut the fuck up.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/03/the-secrets-of-greater-endurance/</guid>
                <description>
                    
                    Endurance is much much more elastic than you might think. It's also trainable!
                    
                </description>
                <pubDate>Sun, 03 Jun 2018 17:59:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>#19 How To Price Your Product to Scale</title>
                <link>http://tigerthinks.com/2018/06/03/how-to-price-your-product-to-scale/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Figure out unit economics first unless you are in winner take all market</li>
  <li>Don’t hyperfocus on UI when struggling. Design can’t fix fundamental
flaw</li>
  <li>Every entrepreneur needs a <strong>theory of human behavior</strong> that your product is
based on. i.e. Zuckerburg: people want to connect with the people
around them.</li>
  <li>People get <strong>anchored</strong> to your first price. They’ll get piseed if you
change it.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/03/how-to-price-your-product-to-scale/</guid>
                <description>
                    
                    Advice on struggling startups, pivots, and pricing products.
                    
                </description>
                <pubDate>Sun, 03 Jun 2018 17:57:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>#380: How to Be Braver</title>
                <link>http://tigerthinks.com/2018/06/03/how-to-be-braver/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li><strong>Bravery is an attitude</strong> not a physical activity
    <ul>
      <li>Acting in the face of fear not the absence of fear</li>
    </ul>
  </li>
  <li>Culture types:
    <ul>
      <li>Culture of dignity: Western, individual is unit of measurement</li>
      <li>Culture of honor: on stage, personal and family reputation</li>
      <li>Culture of face: Chinese. Avoid personal embarrassment. Honor is about
family reputation, culture of face is more individual</li>
    </ul>
  </li>
  <li>How to be braver: <strong>reduce fear and increase willingness to act</strong></li>
  <li>Lucky charm? Works for a lot of people!</li>
  <li>Watch out for self handicapping. Harming your chances in order to
give yourself a built in excuse</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/03/how-to-be-braver/</guid>
                <description>
                    
                    What bravery really is and how to apply it.
                    
                </description>
                <pubDate>Sun, 03 Jun 2018 17:51:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>#376: When to Copmete, When to Cooperate, and How to Succeed at Both</title>
                <link>http://tigerthinks.com/2018/06/03/compete-cooperate/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Adam Galinsky</li>
  <li><strong>Be superhuman not humansuper</strong>. Reveal vulnerability only after power</li>
  <li><strong>Absolute power corrupts absolutely</strong>. Offset with accountability. Checks
and balances</li>
  <li><strong>Don’t say “we need to talk”</strong>. Always provide a reason.</li>
  <li>Hierarchy is necessary for coordination.</li>
  <li><strong>Let lower power people speak up in meetings</strong>. Once boss speaks everyone
agrees</li>
  <li>No interruptions or criticisms in idea generation phase</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/03/compete-cooperate/</guid>
                <description>
                    
                    Assortment of advice and knowledge on human power dynamics
                    
                </description>
                <pubDate>Sun, 03 Jun 2018 17:47:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>What Can Uber Teach Us About the Gender Pay Gap?</title>
                <link>http://tigerthinks.com/2018/06/03/uber-gender-pay-gap/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Uber and Stanford study on ride share data
    <ul>
      <li>Jonathan Hall, Rebecca Diamond, John List</li>
    </ul>
  </li>
  <li>Chicago city deep dive on data</li>
  <li>15-30% people employed in gig economy today!</li>
  <li>1/3 female
    <ul>
      <li>“Female demand for temporal flexibility”</li>
    </ul>
  </li>
  <li>Men make 7% more on average
    <ul>
      <li><strong>When and where</strong>: 20% of gap</li>
      <li><strong>Experience</strong> 30% of gap</li>
      <li><strong>Speed</strong> 50% of gap</li>
    </ul>
  </li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/03/uber-gender-pay-gap/</guid>
                <description>
                    
                    The Gender Pay Gap for Uber drivers is 20% explained by when and where drivers drive, 30% explained by experience, and 50% explained by driver speed.
                    
                </description>
                <pubDate>Sun, 03 Jun 2018 17:36:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>#377: 12 Rules for Life with Jordan Peterson</title>
                <link>http://tigerthinks.com/2018/06/03/12-rules-for-life/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Intrinsic meaning in life: balancing security and expanding boundaries
at the same time. Unerring guide to proper action in the world</li>
  <li>Hierarchy is natural. Consider the lobster. Social relationships are
hierarchical.</li>
  <li>Have good posture.</li>
  <li><strong>Hanlon’s Razor</strong>: never attribute to malice that which is adequately
explained by stupidity.</li>
  <li>Sacrifice is awesome. Give up something in the present for the benefit
of the future</li>
  <li>The real world: people want to help</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/03/12-rules-for-life/</guid>
                <description>
                    
                    Jordan Peterson speaks more on his worldview and new book.
                    
                </description>
                <pubDate>Sun, 03 Jun 2018 17:27:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>#1070 - Jordan Peterson</title>
                <link>http://tigerthinks.com/2018/06/03/jordan-peterson/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Equality of outcome sucks
    <ul>
      <li>If you have freedom equality of outcome is not possible</li>
      <li>Inequality/concentration of resources is natural. Sports, nature,
population</li>
      <li>How much tyranny do you need to impose to create equality of outcome?</li>
    </ul>
  </li>
  <li>There are differences between men and women! Four decades has been
accepted as fact</li>
  <li>Liberals start companies conservatives run companies. Need each other.
    <ul>
      <li>Conservatives will maximize efficiency</li>
    </ul>
  </li>
  <li><strong>Better to be a warrior in a garden than a gardener in a war</strong></li>
  <li>Don’t feel good about who you are, feel good about who you could be.
Participation trophies are bad.</li>
  <li>Outline your heaven and hell. This will motivate you</li>
  <li>People want optimal challenge, not complete relaxation</li>
  <li>How much better would the world be if everyone stopped making it worse</li>
  <li>Toxic tribalism leads to bloodshed</li>
  <li>Very very self critical. 15 years to write his book maps of
meaning. Rewrote each sentence 15x!</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/03/jordan-peterson/</guid>
                <description>
                    
                    Jordan Peterson, champion of many people against 'neo-liberal' ideas, is quite persuasive and an engaging speaker.
                    
                </description>
                <pubDate>Sun, 03 Jun 2018 16:57:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Show Your Work!</title>
                <link>http://tigerthinks.com/2018/06/03/show-your-work/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: If you build it, they will not come. They need to see it
somehow. Show as many people as possible what you’re working on. In the
modern world, this is more important and easier to do than ever. You
will reap the benefits.</p>

<h2 id="notes">Notes</h2>

<ul>
  <li>It’s not enough to be good. in order to be found, you have to <b>be
findable</b>. I think there’s an easy way of putting your work out there
and making it discoverable while you’re focused on getting really good
at what you do. (L21)</li>
</ul>

<h3 id="1-you-dont-have-to-be-a-genius">1. You Don’t Have to Be a Genius</h3>

<ul>
  <li>Greatness doesn’t happen in isolation. Always collaboration</li>
  <li><strong>Scenius</strong>: great group of creative individuals form an “ecology of
talent” from whence springs inspiration. (L50)</li>
  <li><strong>Be an amateur</strong>.
    <ul>
      <li>Even if you’re good, take this attitude to continue your growth.</li>
      <li><em>The fellow pupil can help more than the master because he knows
less. The difficulty we want him to explain is one he has recently
met. The expert met it so long ago he has forgotten.”</em> (L67)</li>
    </ul>
  </li>
</ul>

<h3 id="2-think-process-not-product">2. Think Process, Not Product</h3>

<ul>
  <li><strong>Document everything you do</strong>
    <ul>
      <li>Keep track of everything, both for retention and for traceability.</li>
    </ul>
  </li>
</ul>

<h3 id="3-share-something-small-every-day">3. Share Something Small Every Day</h3>

<ul>
  <li>Daily update. Even just try and think of one thing you learned.
    <ul>
      <li>[Tiger: start journaling again? Yeah when it’s set up on blog]</li>
    </ul>
  </li>
  <li><strong>Flow to stock</strong>
    <ul>
      <li>Robin Sloan: “Flow is the feed […] stock is the durable stuff.
It’s the content you produce that’s as interesting in two months (or
two years) as it is today. It’s what spreads slowly but surely,
building fans over time. The magic formula is to <strong>maintain your flow
while working on your stock in the background.</strong>” (L266)</li>
      <li>Blog is good for this</li>
    </ul>
  </li>
</ul>

<h3 id="4-open-up-your-cabinet-of-curiosities">4. Open Up Your Cabinet of Curiosities</h3>

<ul>
  <li><em>I don’t believe in guilty pleasures. If you fucking like something,
like it.</em> - Dave Grohl</li>
  <li>Go where you want. You’ll be able to find value there.</li>
</ul>

<h3 id="5-tell-good-stories">5. Tell Good Stories</h3>

<ul>
  <li><strong>If you want to be more effective when sharing yourself and your
work, you need to become a better storyteller.</strong> (L391)</li>
  <li>Plot formula from John Gardner:
    <ul>
      <li>Character wants something</li>
      <li>Character goes for it despite opposition (perhaps including his own
doubts)</li>
      <li>Character arrives at a win, lose, or draw</li>
      <li>This formula applies to many many things in life.</li>
    </ul>
  </li>
</ul>

<h3 id="6-teach-what-you-know">6. Teach What You Know</h3>

<ul>
  <li>Don’t worry about thieves. That’s just stupid.</li>
  <li>When you share your knowledge and your work with others. you receive
an education in return when people tell you all the things that are
related that you should get into.</li>
</ul>

<h3 id="7-dont-turn-into-human-spam">7. Don’t Turn Into Human Spam</h3>

<ul>
  <li><strong>The Vampire Test</strong>: if after hanging out with someone or doing
something, you feel worn out and depleted, that thing is a vampire. If
you feel full of energy, it is not a vampire. (L560)
    <ul>
      <li>Make sure to distinguish depleted and fulfilled from depleted and
discouraged</li>
    </ul>
  </li>
  <li>Meet up in real life!</li>
</ul>

<h3 id="8-learn-to-take-a-punch">8. Learn to Take a Punch</h3>

<ul>
  <li>Relax and breathe</li>
  <li>Strengthen your neck. Get punched a lot. You’ll get used to it and see
it isn’t so bad.</li>
  <li>Roll with the punches. You can’t control everyone’s reaction to your
shit.</li>
  <li>Protect your vulnerable areas (but try not to have too many)</li>
</ul>

<h3 id="9-sell-out">9. Sell Out.</h3>

<ul>
  <li>Bruh. Money still makes the world go round.</li>
  <li>Don’t be jealous when the people you like do well–celebrate their
victory as if it’s your own. (661)</li>
  <li>Be as generous as you can, but selfish enough to get your work done.
(L724)</li>
</ul>

<h3 id="10-stick-around">10. Stick Around</h3>

<ul>
  <li>It’s a game of attrition. Survivors win.</li>
  <li><strong>Chain-smoking</strong>: instead of taking a break in between projects,
waiting for feedback, and worrying about what’s next, use the end of
one project to light up the next one. Just do the work that’s in front
of you, and when it’s finished, ask yourself what you missed, what you
could’ve done better, or what you couldn’t get to, and jump right into
the next project. (L768)</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/03/show-your-work/</guid>
                <description>
                    
                    If you want people to see your work you have to put it in places where they can find it.
                    
                </description>
                <pubDate>Sun, 03 Jun 2018 16:21:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>The Wisdom of No Escape</title>
                <link>http://tigerthinks.com/2018/06/03/the-wisdom-of-no-escape/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: Hard to think of central theme. Titular talk was one of the
weaker ones, it basically described that when you are backed into a
corner you can find out who you really are by opening up and letting
things happen. Lots of stuff about self-acceptance.</p>

<h2 id="notes">Notes</h2>

<ul>
  <li>Final talk: The Four Reminders
    <ul>
      <li>The first reminder is our precious birth and how much of a damn
miracle it is</li>
      <li>The second reminder is impermanence. The essence of life is
fleeting.</li>
      <li>The third reminder is karma. Every action has a result. We sow the
seeds and we reap the fruit.</li>
      <li>The fourth reminder is the futility of continuing to spin around on
samsara. Don’t fall into the trap of doing the same thing over and
over and over again.</li>
      <li>Together, these reminders can help us wake up when shit isn’t going
perfectly.</li>
    </ul>
  </li>
</ul>

<h2 id="snippets">Snippets</h2>

<blockquote>
  <p>
    Being satisfied with what we already have is a magical golden key to
    being alive in a full, unrestricted, and inspured way. (6)
  </p>
</blockquote>

<blockquote>
  <p>
    You were very god. You were very good right from the beginning, but
    I knew if I told you that you were good, you would stop trying. (10)
  </p>
</blockquote>

<blockquote>
  <p>
    Thereare three qualities that we can nurture, cultivate, and bring
    out. We already possess these, but they can be ripened: <b>precision,
    gentleness, and the ability to let go.</b> (13)
  </p>
</blockquote>

<blockquote>
  <p>
    Being with the out-breath cultivates the <b>precision</b> of your
    mind, and when you label (say "thinking" to yourself), that too
    brings out the precision of your mind. (15)
  </p>
</blockquote>

<blockquote>
  <p>
    This is probably one of the most amazing tools that you could be
    given, the ability to just <b>let things go</b>, not to be caught up
    in the grip of your own angry thoughts or passionate thoughts or
    worried thoughts or depressed thoughts.
  </p>
</blockquote>

<blockquote>
  <p>
    Resentment, bitterness, and holding a grudge prevent us from seeing
    and hearing and tasting and delighting. (25)
  </p>
</blockquote>

<blockquote>
  <p>
    There isn't any hell or heaven except for how we relate to our
    world. Hell is just resistance to life. [...] Life's work is to wake
    up, to <b>let the things that enter into the circle wake you up rather
    than put you to sleep.</b> (29)
  </p>
</blockquote>

<blockquote>
  <p>
    <b>As soon as you begin to believe in something, then you can no
    longer see anything else. The truth you believe in and cling to
    makes you unavailable to hear anything new.</b> (32)
  </p>
</blockquote>

<blockquote>
  <p>
    The first noble truth says simply that it's part of being human to
    feel discomfort. [...] The second noble truth says that this
    resistance is the fundamental operating mechanism of what we call
    ego, that resisting life causes suffering. [...] The third noble
    truth says that the cessation of suffering is letting go of holding
    on to ourselves. [...] I'm talking about resisting, not grasping,
    not getting caught in hope and in fear, in good and in bad, but
    actually living completely. (40)
  </p>
</blockquote>

<blockquote>
  <p>
    Whether it's smoking a cigarette or drinking a cup of tea or making
    your bed or washing the dishes--whatever it might be--it's ritual in
    the sense of doing it properly, if you can hold the sadness in your
    heart as well as the vision of the Great Eastern Sun. (78)
  </p>
</blockquote>

<blockquote>
  <p>
    We can stop thinking that good practice is when it's smooth and
    calm, and bad practice is when it's rough and dark. If we can hold
    it all in our hearts, then we can make a proper cup of tea. (81)
    [Tiger: don't prefer one over the other. They exist in a balance.]
  </p>
</blockquote>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/03/the-wisdom-of-no-escape/</guid>
                <description>
                    
                    Series of Buddhist-centric talks about life given by Pema Chodron. Generally too hand-wavy for me but good reminders of how to behave and live. Not heavily religious.
                    
                </description>
                <pubDate>Sun, 03 Jun 2018 14:42:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>A Gentleman in Moscow</title>
                <link>http://tigerthinks.com/2018/06/01/a-gentleman-in-moscow/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: Count Alexander Rostov, a “former person”, is sentenced to
house arrest for life in the Hotel Metropol in Russia. He is a man of
culture and makes his experience of decades locked in a hotel quite
uniquely colorful (though not without its low points).</p>

<h2 id="notes">Notes</h2>

<ul>
  <li>The inner monologue of the Count is incrediblly rich. I think
subconsciously I have tried to adopt parts of it, more likely than not
for the better.</li>
  <li><em>Tons</em> of snippets incoming, I loved the writing in this book.</li>
</ul>

<h2 id="snippets">Snippets</h2>

<blockquote>
  <p>
    It demanded to be written. I simply happened to be sitting at the
    particular desk on the particular morning when it chose to make its
    demands (4)
  </p>
</blockquote>

<blockquote>
  <p>
    <b>If a man does not master his circumstances then he is bound to be
    mastered by them.</b> (18)
  </p>
</blockquote>

<blockquote>
  <p>
    In the shapeless moments before the return to consciousness Count
    Alexander Ilyich Rostov savored the taste of the day to come. (19)
  </p>
</blockquote>

<blockquote>
  <p>
    Imagining what might happen if one's circumstances were different
    was the only sure route to madness. (20)
  </p>
</blockquote>

<blockquote>
  <p>
    The Count said this with the renowned glint in his eye--that little
    spark that had defused heated conversations and caught the eyes of
    beauties in every salon in St. Petersburg. (42)
  </p>
</blockquote>

<blockquote>
  <p>
    With so little to do and all the time in the world to do it, the
    Count's peace of mind continued to be threatened by a sense of
    <b>ennui</b>--that dreaded mire of the human emotions. (54)
  </p>
</blockquote>

<blockquote>
  <p>
    If a room that exists under the governance, authority, and intent of
    others seems smaller than it is, then a room that exists in secret
    can, regardless of its dimensions, seem as vast as one cares to
    imagine. (64) [Tiger: this goes for spaces in general. Love it.]
  </p>
</blockquote>

<blockquote>
  <p>
    Marina began stitching the Count's pants--the laying of locomotive
    tracks writ small, if you will (72)
  </p>
</blockquote>

<blockquote>
  <p>
    "<b>It is the business of the times to change</b>, Mr. Halecki. And it is
    the business of gentlemen to change with them. [...] For the times
    do, in fact, change. They change relentlessly. Inevitably.
    Inventively. And as they change, they sset into bright relief not
    only outmoded honorifics and hunting horns, but silver summoners and
    mother-of-pearl opera glasses and all manner of carefully crafted
    things that have outlived their usefulness. (75)
  </p>
</blockquote>

<blockquote>
  <p>
    <b> Fate would not have the reputation it has if it simply did what it
    seemed it would do.</b> (79)
  </p>
</blockquote>

<blockquote>
  <p>
    While the splendors that elude us in youth are likely to receive our
    casual contempt in adolescence and our measured consideration in
    adulthood, they forever hold us in their thrall. (79)
  </p>
</blockquote>

<blockquote>
  <p>
    Systematic in all matters of importance, Nina ate her ice cream one
    flavor at a time, moving from the lightest to the darkest in shade.
    Thus, having already dispatched her French vanilla, she was now
    moving on to a scoop of lemon, which perfectly matched her dress.
    (91) [Tiger: a perfectly written two sentences. So satisfying.]
  </p>
</blockquote>

<blockquote>
  <p>
    A careful accounting of days allows the isolated to note that
    another year of hardship has been endured; survived; bested. Whether
    they have found the strength to persevere through a tireless
    determination or some foolhardy optimism, those 365 hatch marks
    stand as proof of their indomitability. For after all, <b>if
    attentiveness should be measured in minutes and discipline measured
    in hours, then indomitability must be measured in years [...]
    attaning of the upper hand on the field of battle is measured in the
    instant.</b> (109)
  </p>
</blockquote>

<blockquote>
  <p>
    An educated man should admire any course of study no matter how
    arcane, if it be pursued with curiosity and <b>devotion</b>. (134) [Tiger:
    first instinct is to disagree, but I think the key is the second
    part. I have a pretty high bar for "devotion"]
  </p>
</blockquote>

<blockquote>
  <p>
    Nina Kulikova was and would be a serious soul in search of serious
    ideas to be serious about. (186) [Tiger: relatable]
  </p>
</blockquote>

<blockquote>
  <p>
    The <b>Confederacy of the Humbled</b> is a close-knit brotherhood whose
    members travel with no outward markings, but who know each other at
    a glance. For having fallen suddenly from grace, those in the
    Confederacy share a certain perspective. Knowing beauty, influence,
    fame, and privilege to be borrowed rather than bestowed, they are
    not easily impressed. They are not quick to envy or take offense.
    They certainly do not scour the papers in search of their own names.
    They remain committed to living among their peers, but they greet
    adulation with caution, ambition with sympathy, and condescension
    with an inward smile. (196)
  </p>
</blockquote>

<blockquote>
  <p>
    Sofia moved a little in order to set Dolly at her side and then
    accepted the book in a ready and determined manner. (240)
    [Tiger: "ready and determined". Simple but powerfully expressive.]
  </p>
</blockquote>

<blockquote>
  <p>
    The Count's father believed that while a man should attend closely
    to life, he should not attend too closely to the clock. [...] If a
    man woke no later than six, engaged in a light repast, and then
    applied himself without interruption, by the hour of noon he should
    have accomplished a full day's labor. (244)
  </p>
</blockquote>

<blockquote>
  <p>
    "If you are ever in doubt, just remember that <b>unlike adults,
    children want to be happy.</b> So they still have the ability to take
    the greatest pleasure in simple things." (253)
  </p>
</blockquote>

<blockquote>
  <p>
    For all the varied concerns attendant to the raising of a
    child--over schoolwork, dress, and manners--in the end, <b>a parent's
    responsibility could not be more simple</b>: To bring a child safely
    into adulthood so that she could have a chance to experience a life
    of purpose and, God willing, contentment. (309)
  </p>
</blockquote>

<blockquote>
  <p>
    Surely, the span of time between the placing of an order and the
    arrival of appetizers is one of the most perilous in all human
    interaction. (339)
  </p>
</blockquote>

<blockquote>
  <p>
    If serenity should be a hallmark of maturity, then <b>impetuousness
    should be a hallmark of youth.</b> (387)
  </p>
</blockquote>

<blockquote>
  <p>
    For what matters in life is not whether we receive a round of
    applause; what matters is whether we have the courage to venture
    forth despite the uncertainty of acclaim. (387)
  </p>
</blockquote>

<blockquote>
  <p>
    When all was said and done, <b>the endeavors that most modern men saw
    as urgent (such as appointments with bankers and the catching of
    trains), probably could have waited, while those they deemed
    frivolous (such as cups of tea and friendly chats) had deserved
    their immediate attention.</b> (391)
  </p>
</blockquote>

<h2 id="summary">Summary</h2>

<ul>
  <li>Count stuck in hotel</li>
  <li>Makes great friends with Nina, a precocious girl living in the hotel.</li>
  <li>Nina leaves hotel, shows up years later in a rush after getting
involved with politics. Her husband has been sent to a labor camp and
she must go after him, but she must leave her daughter  Sofia with the
Count at the hotel.</li>
  <li>The Count ends up raising Sofia as his own daughter and doesn’t hear
from Nina again</li>
  <li>Sofia becomes a great musician and is invited to Paris to play.</li>
  <li>The Count devises a plan wherein Sofia is able to escape to the
American Embassy and his friend Richard Vanderwhile</li>
  <li>The Count escapes and goes back to his hometown, and his lover, the
actress Anna Urbanova</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/06/01/a-gentleman-in-moscow/</guid>
                <description>
                    
                    Fantastic story, turning the seemingly mundane into something wonderful. One of Obama's favorite books he read in 2017.
                    
                </description>
                <pubDate>Fri, 01 Jun 2018 20:17:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Lab Girl</title>
                <link>http://tigerthinks.com/2018/05/27/lab-girl/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: Hope has always known that she was meant to be a scientist.
Being a woman, it hasn’t always been easy, but her work has always kept
her going. She has an incredible persistence in the face of adversity
that has gotten her to where she is today. Good storytelling, bit
unrelatable to me, but that’s okay I’m not who she wrote it for.</p>

<h2 id="notessnippets">Notes/Snippets</h2>

<blockquote>
  <p>
    <b>There is no shame in breaking something, only in not being able to
    fix it.</b> (8)
  </p>
</blockquote>

<blockquote>
  <p>
    People are like plants: they grow toward the light. I chose science
    because science gave me what I needed--a home as defined in the most
    literal sense: a safe place to be. (18)
  </p>
</blockquote>

<blockquote>
  <p>
    My lab is a place where my guilt over what I haven't done is
    supplanted by all of the things that I am getting done. [...] My lab
    is a place where I can be the child that I still am. [...] My lab is
    like a church because it is where I figure out what I believe. [...]
    I know damn well that <b>if there had been a way to get to success
    without traveling through disaster someone would have already done
    it</b>, but there's still no journal where I can tell the story of how
    my science is done with both the heart and the hands. (19)
  </p>
</blockquote>

<blockquote>
  <p>
    Science has taught me that everything is more complicated than we
    first assume, and that <b>being able to derive happiness from discovery
    is a recipe for a beautiful life</b>. It has also convinced me that
    <b>carefully writing everything down is the only real defense we have
    against forgetting something important</b> that once was and is no more.
    (29)
  </p>
</blockquote>

<blockquote>
  <p>
    The inescapable cube shape of salt persists because the very atoms
    that comprise pure salt are bonded together in the shape of a square
    scaffold that outlines an endless number of cubes. Any break to this
    structure will occur along the planes of weakness that define these
    bonds, resulting in more cubes, all repeating the same atomic
    pattern right down to their smallest components. (69)
  </p>
</blockquote>

<blockquote>
  <p>
    On some deep level, the realization that I could do good science was
    accompanied by the knowledge that <b>I had formally and terminally
    missed my chance to become like any of the woman that I had every
    known.</b> (71) [Tiger: echoes similar feelings about working at PayPal
    after high school]
  </p>
</blockquote>

<blockquote>
  <p>
    "Anything except that NPR shit. I don't want to get all worked up
    over the plight of fishermen in some place that I can't even find on
    the map. I got my own problems right here." (82)
  </p>
</blockquote>

<blockquote>
  <p>
    The whole place is different on a Friday at midnight, when the
    university belongs to you. Smug in the presumption that you are the
    only working person within a fifty-mile radius, you accomplish just
    enough to feel justified in being naughty. In the rhythm of these
    Friday nights beats the honest, humble heart of science, and it also
    explains how <b>discovery and mischief are two sides of the very same
    coin.</b> (100) [Tiger: I freaking love this.]
  </p>
</blockquote>

<blockquote>
  <p>
    Bill complains about each student with uniformly wicked contempt and
    then spends yet another day rescuing them from themselves. (111)
    [Tiger: bq is that you?]
  </p>
</blockquote>

<blockquote>
  <p>
    "<b>'What if? Fuck 'what if'.</b> None of that shit will change anything!"
    Bill hollered. "What if you don't get a grant? You can't exactly pay
    me less than you do now [...] You just keep putting on that power
    suit and hawk our wares at those interviews, and get us out of here
    for God's sake. If we built this shit once, we can build it twice."
    (172). [Tiger: get you someone like Bill :)]
  </p>
</blockquote>

<blockquote>
  <p>
    Hardening has worked for eons because a tree can trust the sun to
    tell it when winter is coming, even during years when the weather is
    capricious. These plants know that when your world is changing
    rapidly, it is important to have identified the one thing that you
    can always count upon. (191)
  </p>
</blockquote>

<blockquote>
  <p>
    There are two ways to deal with a major setback: one is to pause,
    take a deep breath, clear your mind and go home, distraact yourself
    for the evening, and come back fresh the next day to start over. The
    other is to immediately resubmerge, put your head under and dive to
    the bottom, work an hour longer than you did last night, and stay in
    the moment of what went wrong. While the first way is a good path
    toward adequacy, it is the second way that leads to important
    discoveries. (252) [Tiger: wouldn't quite agree...think it's
    case-by-case and sometimes you can do more harm than good by diving
    back in]
  </p>
</blockquote>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/05/27/lab-girl/</guid>
                <description>
                    
                    Memoir of a female plant biologist from Minnesota with a one-track mind for science. No BS.
                    
                </description>
                <pubDate>Sun, 27 May 2018 17:18:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>The Undoing Project: A Friendship That Changed Our Minds</title>
                <link>http://tigerthinks.com/2018/05/16/the-undoing-project/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: Human mind sucks. Being aware of how it sucks and a bit of why
it sucks and go a long way towards being a more effective thinker.</p>

<h2 id="notes">Notes</h2>

<ul>
  <li>Danny grows up during the Holocaust and this shapes the rest of his
life. Father dies, rest of family escapes to Israel, he is very lonely
and isolated.
    <ul>
      <li>Becomes charged with identifying which military divisions people
should belong to when he is just 21.</li>
      <li>Defining trait: always filled with self-doubt and angst and impostor
syndrome</li>
    </ul>
  </li>
  <li>Amos: quintessential Israeli, incredible person. Life of all the
parties. Always the smartest person in the room. See anecdotes in
snippets
    <ul>
      <li>Supreme confidence, opposite of Danny</li>
      <li>Only does precisely what he wants.</li>
    </ul>
  </li>
  <li>Very weird mix: Amos works in abstract, lives in real world, Danny
works in the real world and lives in the abstract
    <ul>
      <li>On their partnership: as if you put a mouse in a cage with a python
and came back to find them having a good discussion</li>
    </ul>
  </li>
  <li><strong>Halo effect</strong>: If your first impression of someone or something is
positive, it creates a “halo” around that person and skews all of your
other judgments and evaluations positively.</li>
  <li><strong>Randomness stereotype</strong>: people think of certain processes as
“random”, and they think more “random-looking” sequences are more
likely to occur. Our stereotype of randomness lacks the clusters and
patterns that occur in true random sequences.</li>
  <li><strong>Availability bias</strong>: the more easily people can call some scenario
to mind, the more probable they find it to be.
    <ul>
      <li>After driving by a car crash, people slow down as they think car
crashes are more likely</li>
      <li>Easier for a Jew living in Paris in 1939 to think of how Germans
acted in 1919 than to come up with story about how they act in 1941,
no matter how persuasive evidence is to the contrary.</li>
    </ul>
  </li>
  <li><strong>Hindsight bias</strong>: once you know the outcome, you will think it was
way more predictable than you found it to be before knowing the
outcome.
    <ul>
      <li>i.e. after an underdog wins a sports game, you think of all the
reasons why they shouldn’t have been underdogs to begin with.</li>
    </ul>
  </li>
  <li><strong>Peak-end rule</strong>: people prefer to endure more total pain so long as
the experience ends on a more pleasant note. People remember the
“peak” more vividly than the average
    <ul>
      <li>Trip to Disneyland: most of it is miserable, standing in line, but
you remember the fun parts of going on rides</li>
      <li>Made people way more likely to come back for colonoscopies by making
them longer (more total pain, ends on less pain)</li>
    </ul>
  </li>
  <li><strong>Regret theory</strong>: opposes utility theory. People making choices make
them in terms of gains and losses, not in terms of absolute levels.
Seek to minimize regret. Losing $100 hurts way more than winning $100
feels good.
    <ul>
      <li>When you frame a sure thing as a loss, people prefer a gamble. When
you frame it as a gain, people pick the sure thing.</li>
    </ul>
  </li>
  <li><strong>Endowment effect</strong>: people attach extra value to things they own,
simply because they happen to own it.
    <ul>
      <li>i.e. stock traders</li>
    </ul>
  </li>
  <li><strong>Undoing</strong>: as they moved through the world, people ran simulations
of the future. What if I say what I think instead of pretending to
agree? What if they hit it to me and the grounder goes through my
legs? What happens if I say no to his proposal instead of yes? They
based their judgments and decisions in part on these imagined
scenarios. And yet not all scenarios were equally easy to imagine:
they were constrained, much in the way that people seemed constrained
when they “undid” some strategy.
    <ul>
      <li><strong>The Focus Rule</strong>: we have a hero or actor operating in a
situation, and whenever possible we keep the situation the same and
have the actor move.
        <ul>
          <li>We don’t inventa  gust of wind to deflect Oswald’s bullet</li>
        </ul>
      </li>
      <li>In undoing some event, the mind tends to remove things that feel
surprising or unexpected. Important: “feel” != “actual probability”
:)
        <ul>
          <li>Ex: man takes different route to work and dies in car crash.
Easier to have him take the same route as always than change the
timing of his car on that particular day/situation</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>The conjuction fallacy</strong>: demonstrated via the “Linda problem”.
People violate very very basic probability to fit their own mental
images.
    <ul>
      <li>Which is more probable?
        <ul>
          <li>Linda is a bank teller.</li>
          <li>Linda is a bank teller and is active in the feminist movement.</li>
        </ul>
      </li>
      <li>Everyone still said Linda was more likely to be a bank teller in the
feminist movement!!</li>
    </ul>
  </li>
</ul>

<h2 id="snippets">Snippets</h2>

<blockquote>
  <p>
    If a fresh analytical approach had led to the discover of new
    knowledge in baseball, was there any sphere of human activity in
    which it might not do the same? (L47)
  </p>
</blockquote>

<blockquote>
  <p>
    [Morey]'d always been just the way he was, a person who was happier
    counting than felling his way through life. (L169)
  </p>
</blockquote>

<blockquote>
  <p>
    "Knowledge is literally prediction," said Morey. "<b>Knowledge is
    anything that increases your ability to predict the outcome.</b>
    Literally everything you do you're trying to predict the right
    thing. Most people just do it subconsciously. (L238)
  </p>
</blockquote>

<blockquote>
  <p>
    The trick wasn't just to build a better model. It was to listen both
    to it and to the scouts at the same time. (L312)
  </p>
</blockquote>

<blockquote>
  <p>
    "[Jeremy Lin]'s incredibly athletic," said Morey. "But the reality
    is that every fucking person, including me, thought he was
    unathletic. And I can't think of any reason for it other than he was
    Asian." (L399)
  </p>
</blockquote>

<blockquote>
  <p>
    "It was like a fish not knowing he is breathing water unless someone
    points it out," Morey said of people's awareness of their own mental
    processes. (L532)
  </p>
</blockquote>

<blockquote>
  <p>
    "When someone says something, <b>don't ask yourself if it is true. Ask
    what it might be true of.</b>" This was his intellectual instinct, his
    natural first step to the mental hoop: to take whatever someone had
    just said to him and try not to tear ir down but to make sense of
    it. (L963)
  </p>
</blockquote>

<blockquote>
  <p>
    Amos's commanding officer shouted for everyone to stay put -- and
    leave the unconscious soldier to die. Amos ignored him and sprinted
    from behind the wall that served as cover for his unit, grabbed the
    soldier, picked him up, hauled him ten yards, tossed him on the
    ground, and threw himself on top of him. The shrapnel from the
    explosion remained in Amos for the rest of his life. The Israeli
    army did not bestow honors for bravery lightly. As he handed Amos
    his award, Moshe Dayan, who had watched the entire episode, said,
    "You did a very stupid and brave thing and you won't get away with
    it again." (L1130)
  </p>
</blockquote>

<blockquote>
  <p>
    The University of Michigan psychologist Dick Nisbett, after he'd met
    Amos, designed a one-line intelligence test: <b>The sooner you figure
    out that Amos is smarter than you are, the smarter you are.</b> (L1130)
  </p>
</blockquote>

<blockquote>
  <p>
    There was this beautiful simplicity to Amos: his likes and dislikes
    could be inferred directly and accurately and at all times from his
    actions. (L1197)
  </p>
</blockquote>

<blockquote>
  <p>
    Amos liked to say that <b>stinginess was contagious and so was
    generosity</b>, and since behaving generously made you happier than
    behaving stingily, you should avoid stingy people and spend your
    time only with generous ones. (L1355)
  </p>
</blockquote>

<blockquote>
  <p>
    By changing the context in which two things are compared, you
    submerge ceratin features and force others to the surface [...]
    Things are grouped together for a reason, but, once they are
    grouped, their grouping causes them to seem more like each other
    than they otherwise would. That is, the mere act of classification
    reinforces stereotypes. <b>If you want to weaken some stereotype,
    eliminate the classification.</b> (L1443)
  </p>
</blockquote>

<blockquote>
  <p>
    [Danny] thought of himself as someone who enjoyed, more than most,
    changing his mind. "I get a sense of movement and discovery whenever
    I find a flaw in my thinking," he said. (L1630)
  </p>
</blockquote>

<blockquote>
  <p>
    "Wherever there is uncertainty there has got to be judgment [...]
    and wherever there is judgment there is an opportunity for human
    fallability" (L2843)
  </p>
</blockquote>

<blockquote>
  <p>
    Sentences popped out of Amos's mouth that Redelmeier knew he would
    forever remember:

    <i>"The secret to doing good research is always to be a little
    underemployed. You waste years by not being able to waste hours."</i>

    <i>"It is sometimes easier to make the world a better place than to
    prove you have made the world a better place."</i>

    (L3800)
  </p>
</blockquote>

<blockquote>
  <p>
    The way to stop the captain from landing the plane in the wrong
    airport, Amos insisted, was to <b>train others in the cockpit to
    question his judgment</b> (L4336)
  </p>
</blockquote>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/05/16/the-undoing-project/</guid>
                <description>
                    
                    Accounting of the partnership between Amos Tversky and Danny Kahnemanm, interwoven with their greatest hits both individually and as a pair. Equal parts informative, interesting, personal.
                    
                </description>
                <pubDate>Wed, 16 May 2018 16:51:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Jim Breyer On How He Picks Winners</title>
                <link>http://tigerthinks.com/2018/05/16/jim-breyer/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Midas list #1</li>
  <li>Zuck: best quality is attracting and retaining talent</li>
  <li>Big investments in AI. AI is not a fad. China will be huge.</li>
  <li>Technical proficiency and outside interests are good signals in</li>
  <li>entrepreneurs</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/05/16/jim-breyer/</guid>
                <description>
                    
                    Early investor in Facebook, Spotify, much more. His list of great qualities in an entrepreneur: attracting talent, retaining talent, technical proficiency, outside interests. Super bullish on AI.
                    
                </description>
                <pubDate>Wed, 16 May 2018 15:49:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Dell Computers - Michael Dell</title>
                <link>http://tigerthinks.com/2018/05/16/dell-computers-michael-dell/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Sold newspapers in high school</li>
  <li>Bought apple II to take it apart in 1980</li>
  <li>Started flipping computers in college. Someone told him he should be
selling the computers he had built in order to reformat the actual
computers he was selling at the time. The rest is history.</li>
  <li><strong>Three principles are global, b2b, service</strong></li>
  <li><strong>Focus on customers not competition</strong></li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/05/16/dell-computers-michael-dell/</guid>
                <description>
                    
                    Michael Dell often gets lost in the shuffle of the Gates's, Bezos's, Zuckerbergs, but his story is just as important. Super sharp guy. Focus on customers, not competition.
                    
                </description>
                <pubDate>Wed, 16 May 2018 15:46:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>The Snuggle is Real</title>
                <link>http://tigerthinks.com/2018/05/16/the-snuggle-is-real/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<p>Fella has a designer onesies side hustle. If you’re entering a saturated market, have a differentiator. Things don’t always start as successes.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/05/16/the-snuggle-is-real/</guid>
                <description>
                    
                    Fella has a designer onesies side hustle. If you're entering a saturated market, have a differentiator. Things don't always start as successes.
                    
                </description>
                <pubDate>Wed, 16 May 2018 15:42:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Markov Decision Processes</title>
                <link>http://tigerthinks.com/2018/05/16/markov-decision-processes/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Everything depends only on previous state and action taken from state</li>
  <li>Four tuple: state, action, transition function, reward function</li>
  <li>Optimal policy gives best action for max reward from any state</li>
  <li>Very hard to train at large scale due to curse of dimensionality</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/05/16/markov-decision-processes/</guid>
                <description>
                    
                    Markov Decision Processes are Finite State Machines with four key components: state, action, transition function, reward function. They run into the curse of dimensionality.
                    
                </description>
                <pubDate>Wed, 16 May 2018 15:40:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>The Backfire Effect - Part Four</title>
                <link>http://tigerthinks.com/2018/05/16/the-backfire-effect-part-four/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Challenged identity triggers fight or flight</li>
  <li>Let’s start from the beginning to cover context</li>
  <li>Marshal in ww2 needs to maintain morale to turn civilians into
soldiers</li>
  <li>Change idea that America only wanted to help Britain and that Germany
was inconsequential
    <ul>
      <li>Solution: Make a movie. Frank Capra</li>
      <li>What’s changing when you change your mind? No one knows</li>
      <li>Study by Stoffer: no change in morale from Why We Fight films</li>
      <li>Facts changed, opinions did not. Facts do not change minds/attitudes</li>
    </ul>
  </li>
  <li>2016 election study: no backfire. Thomas Wood</li>
  <li>Again, we are not rational beings.</li>
  <li><strong>Shared values create values which we protect by beliefs by cherry
picking facts. This is the psychological digestive system. We often
think of it as going the other way</strong></li>
  <li>Backfire is still very rare! Only in cases of identity</li>
  <li>Western educated industrial Rich democratic students: WEIRDS. Always
used in these studies</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/05/16/the-backfire-effect-part-four/</guid>
                <description>
                    
                    The Backfire Effect has been memed beyond recognizability from its conception. Clears the air about what exactly it is and where exactly is has been and cannot be observed.
                    
                </description>
                <pubDate>Wed, 16 May 2018 15:30:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Newcastle University MAS2317/3317: Introduction to Bayesian Statistics</title>
                <link>http://tigerthinks.com/2018/05/14/newcastle-university-introduction-to-bayesian-statistics/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<h3 id="ch-1-introduction">Ch 1: Introduction</h3>

<ul>
  <li>
    <p><strong>Bayes Theorem</strong></p>

\[P(A \mid B) = \frac{P(B \mid A) \, P(A)}{P(B)}\]
  </li>
</ul>

<h4 id="12-bayes-theorem">1.2: Bayes Theorem</h4>

<h5 id="example-12">Example 1.2</h5>

<ul>
  <li>A: disease presence</li>
  <li>
    <p>B: result test</p>

\[P(has\ disease \mid positive\ test) = \frac{P(positive\ test  \mid has\ disease) \, P(has\ disease)}{P(positive\ test)}\]
  </li>
  <li>95% effective when disease present</li>
  <li>1% false positive</li>
  <li>
    <p>0.5% of population has disease</p>
  </li>
  <li>
    <p>(a) Calculate the probability that a person who tests positive
actually has the disease.</p>

\[\begin{align}
P(has\ disease \mid positive\ test) &amp; = \frac{0.95 \times 0.005}{((0.995 \times 0.01) + (0.005 \times 0.95))} \\
 &amp; = 0.323
\end{align}\]
  </li>
</ul>

<p>There is a 32.3% chance that a person who tests positive actually has
the disease.</p>

<ul>
  <li>
    <p>(b) Find the probability that a person who tests negative does not
have the disease.</p>

\[\begin{align}
P(no \ disease \mid negative\ test) &amp; = \frac{P(negative\ test  \mid no\ disease) \, P(no\ disease)}{P(negative\ test)} \\
 &amp; = \frac{0.99 \times 0.995}{((0.995 \times 0.99) + (0.005 \times 0.05))} \\
 &amp; = 0.9997
\end{align}\]
  </li>
</ul>

<p>There is a 99.97% chance that a person who tests negative does not have
the disease.</p>

<h4 id="13-likelihood">1.3: Likelihood</h4>

<ul>
  <li>Suppose that an experiment results in data x = (x1, x2, … , xn)
T and we decide to model the data using a probability (density) function
f(x|θ). This p(d)f describes how likely different data x are to occur
given a value of the (unknown) parameter θ. However, <strong>once we have
observed the data, f(x|θ) tells us how likely different values of the
parameters θ are</strong>: it is then known as the likelihood function for θ. In
other courses you may have seen it written as L(θ|x) or L(θ) but,
whatever the notation used for the likelihood function, it is simply the
joint probability (density) function of the data, f(x|θ), regarded as a
function of θ rather than of x.</li>
</ul>

<h5 id="example-15">Example 1.5</h5>

<p>The likelihood function for \(\theta\) follows the formulation in the
section introduction.</p>

\[\begin{align}
f(x \mid \theta) &amp; = \prod_{i=1}^n f\chi_i(x_i \mid \theta) \\
\end{align}\]

<h5 id="example-17">Example 1.7</h5>

<h4 id="14-sufficiency">1.4: Sufficiency</h4>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/05/14/newcastle-university-introduction-to-bayesian-statistics/</guid>
                <description>
                    
                    Notes taken from lecture notes from Newcastle University Bayesian Statistics course, with James from Paper Club
                    
                </description>
                <pubDate>Mon, 14 May 2018 19:57:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>How to American: An Immigrant's Guide to Disappointing Your Parents</title>
                <link>http://tigerthinks.com/2018/05/13/how-to-american/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: Love this story. Would never have the balls to do some of the stuff he did. Super happy for his success chasing his dreams</p>

<h2 id="notes">Notes</h2>

<ul>
  <li>Another example of how success doesn’t happen overnight. Very few
people would be willing to put in the work Jimmy did. Beast.</li>
  <li>Very wholesome. Loved the accounting of relationship with family,
especially parents.</li>
  <li>Still a lot of areas Asian Americans have yet to break into.</li>
</ul>

<h2 id="snippets">Snippets</h2>

<blockquote>
  <p>
    From being a child Ping-Pong star in Hong Kong, to coming to
    America and becoming a stand-up comedian, achieving his dream of
    being a strip club DJ only to discover how sad and depressing that
    is, to becoming a successful TV and movie actor, Jimmy has really
    experienced America like few have [...] He said that <b>this really is
    the land of opportunity, but most Americans just don't see it
    because they're simply too used to it</b>. They don't appreciate it and
    they don't take advantage of it as much as people who move here from
    other countries do. (VIII)
  </p>
  <p>
    In my Chinese family, my dad always tells me: "Pursuing your dreams
    is for losers. Doing what you love is how you become homeless." The
    most important values in Chinese culture are <b>family and
    obedience.</b>
    (10)
  </p>
  <p>
  I figured it was <b>better to disappoint myself for a few years than to
    disappoint myself for the rest of my life.</b> (10)
  </p>
  <p>
    The study-abroad trip was such an amazing experience; it raised the
    bar for my standard of living. It made me not ever want to go back
    to my inadequate life back home. I felt a purposeful depression. <b>I
    wasn't sad; I was unsatisfied.</b> I wanted more out of life. I needed
    to step my life up. (80)
  </p>
  <p>
    I was pairing R&amp;B songs with strippers like a sommelier at Spago
    suggesting which red goes best with the beef Bolognese. (120)
  </p>
  <p>
    My heart was about to eject out of my asshole. (172)
  </p>
  <p>
    It's exciting to chase after a new goal, but it's meaningless if you
    can't <b>sit down and enjoy the moment.</b> (203)
  </p>
</blockquote>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/05/13/how-to-american/</guid>
                <description>
                    
                    Fantastic and relatable storytelling about the Asian-American experience for someone who rejects the lawyer/doctor/engineer career path.
                    
                </description>
                <pubDate>Sun, 13 May 2018 10:30:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Mel Gibson and Dr. Neil Riordan</title>
                <link>http://tigerthinks.com/2018/05/13/mel-gibson-and-dr-neil-riordan/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Intravenous stem cells in Panama. Regulate the immune system’s
inflammatory process</li>
  <li>Feel like a new man</li>
  <li>Mesenchymal stem cells. From umbilical cord
    <ul>
      <li>Can help with autism? Inflammation</li>
      <li>Have helped with shoulder pain, heart stuff</li>
      <li>Tougher to do spine stuff because the spinal cage has very few stem
cells by design. Can’t get in there as effectively.</li>
    </ul>
  </li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/05/13/mel-gibson-and-dr-neil-riordan/</guid>
                <description>
                    
                    Discussion of mesenchymal stem cells and their incredible results. Only legal in Panama right now.
                    
                </description>
                <pubDate>Sun, 13 May 2018 09:14:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Training the Best Dog Ever</title>
                <link>http://tigerthinks.com/2018/05/13/training-the-best-dog-ever/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: Five-week dog fundamentals training program.</p>

<h2 id="nikos-training-sheet"><a href="https://docs.google.com/spreadsheets/d/1i9wWl_ngaFmIG9bwCqN2xC_caScyl9n0VStNlBS914k/edit?usp=sharing">Niko’s Training Sheet</a></h2>

<h2 id="notes">Notes</h2>

<ul>
  <li><strong>Reinforcement is a stimulus that increases the immediately preceding
behavior so that it’s more likely to occur in the future</strong>. This is
the training thesis.
    <ul>
      <li>Corollary (negative): Punishment is a stimulus that reduces the
immediately preceding behavior so that it’s less likely to occur in
the future.</li>
      <li><strong>Reward is a stimulus that uses positive reinforcement to increase
your dog’s immediately preceding behavior by trying to tell him
“YES! DO THAT AGAIN!” in the future.</strong></li>
    </ul>
  </li>
</ul>

<h3 id="2-preparing-for-dog-training">2: Preparing for Dog Training</h3>

<ul>
  <li><strong>Leash tethering</strong>: clip carabiner onto belt and go everywhere with
dog.</li>
  <li>Training logs
<a href="http://d3kesapx8i749e.cloudfront.net/wp-content/uploads/2016/04/19104233/Training_the_Best_Dog_Ever_FREE_TRAINING_LOGS.pdf" target="_blank">here</a>
    <ul>
      <li>Start filling out Niko’s once ready to begin training.</li>
    </ul>
  </li>
</ul>

<h3 id="3-feeding-potty-training-and-crating">3: Feeding, Potty Training, and Crating</h3>

<ul>
  <li>Crate should be a safe, happy place for your dog!</li>
  <li>Teach your dog that <strong>he gets something really great in the crate when
you leave (not when you return)</strong></li>
  <li>Return to crate exercise if dog backslides during training. Home base.</li>
</ul>

<h3 id="4-week-one-fundamentals-training-program">4: Week One: Fundamentals Training Program</h3>

<ul>
  <li>10 skills:
    <ul>
      <li>Sit</li>
      <li>Recall</li>
      <li>Leash walking</li>
      <li>Down</li>
      <li>Stay</li>
      <li>Stand</li>
      <li>Settle</li>
      <li>Release</li>
      <li>Off/take it</li>
      <li>Boundary training</li>
    </ul>
  </li>
  <li><strong>Spiriting</strong>: unlocking dog’s personality</li>
  <li><strong>Ground rules</strong>:
    <ul>
      <li>Have fun</li>
      <li>Do the homework</li>
      <li>You’re always training</li>
    </ul>
  </li>
  <li><strong>Four A’s of learning</strong>:
    <ul>
      <li>Stage 1: Acquired: first success ever</li>
      <li>Stage 2: Automatic: 80 percent success</li>
      <li>Stage 3: Application: generalized skill to variety of places and
situations</li>
      <li>Stage 4: Always: skill melds into everyday life</li>
    </ul>
  </li>
  <li><strong>Three P’s of relationship</strong>:
    <ul>
      <li>Positive</li>
      <li>Play</li>
      <li>Pals</li>
    </ul>
  </li>
  <li>Natural canine orientation is <strong>visual, not verbal</strong></li>
  <li>Treat techniques:
    <ul>
      <li>Slot machine: random treats</li>
      <li>Jackpot: give 5-7 treats for one good success, none for other
successes</li>
    </ul>
  </li>
  <li><strong>Recall</strong>: lure at a distance. Add verbal cue.</li>
  <li>Add name to any positive cue, never to negative cue</li>
  <li><strong>Release</strong>: drop leash and point to play area</li>
  <li><strong>Which hand</strong> game to engage pupper</li>
  <li><strong>Be a tree</strong> on walks to help with leash walking</li>
</ul>

<h3 id="5-week-two-training-in-everyday-life">5: Week Two: Training in Everyday Life</h3>

<ul>
  <li><strong>What gets rewarded, gets reinforced. What gets ignored, disappears</strong></li>
  <li><strong>Off/take it</strong>: Just let him take treats from your hand and mark it
with “good take it”
    <ul>
      <li>Give up what he has with “off”</li>
      <li>Make sure to pair “off” with at least an equal value “take it”</li>
    </ul>
  </li>
  <li>Informal heel: walk-stop-sit sequence over and over, small walks in
between.</li>
</ul>

<h3 id="6-week-three-advancing-to-verbal-cues">6: Week Three: Advancing to Verbal Cues</h3>

<ul>
  <li>Start adding verbal cues for your commands</li>
</ul>

<h3 id="7-week-four-completing-the-foundation">7: Week Four: Completing the Foundation</h3>

<ul>
  <li><strong>Door boundary training</strong>
    <ul>
      <li>Whenever I open a door, dog must wait for me to go through before he
does</li>
      <li>Start interior, make him sit at doorway, then cue “let’s go” to go
through</li>
    </ul>
  </li>
  <li>Doorbells: if you ignore, dog will ignore. Make sure he doesn’t jump
on visitors. Ignore if he jumps.</li>
  <li><strong>Chill</strong>: once dog is down, has to stay there
    <ul>
      <li>Keep treating as he stays inn down</li>
    </ul>
  </li>
</ul>

<h3 id="8-week-five-reviewing-the-basic-skills">8: Week Five: Reviewing the Basic Skills</h3>

<ul>
  <li>Has a quick guide to all the skills</li>
  <li><strong>Stand</strong>: Start with sit. Lure to standing, treat. Then add verbal
cue</li>
</ul>

<h3 id="9-training-games-and-activities">9: Training Games and Activities</h3>

<ul>
  <li>Retrieve: go fetch and bring back. Can try training verbal cue “fetch”
as well.</li>
</ul>

<h3 id="10-clicker-training-and-dog-tricks">10: Clicker Training and Dog Tricks</h3>

<ul>
  <li>Replace the word “good” with a “click” sound.
    <ul>
      <li>Advantage: clearer, more distinct noise than voice. Doesn’t change.
Marks <em>exact</em> moment.</li>
    </ul>
  </li>
  <li>Tricks to target:
    <ul>
      <li>Wave</li>
      <li>Roll over</li>
      <li>Sit pretty</li>
      <li>Toy cleanup</li>
    </ul>
  </li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/05/13/training-the-best-dog-ever/</guid>
                <description>
                    
                    Outlines a five-week program to get all of the basics trained into your dog. Giving this program a shot, seems promising but quite a commitment. Author clearly knows what she's talking about.
                    
                </description>
                <pubDate>Sun, 13 May 2018 06:52:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>People</title>
                <link>http://tigerthinks.com/2018/05/12/people/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li><strong>Be useful but don’t be used</strong></li>
  <li>I statements &gt; you statements</li>
  <li>Judgment and passive aggressiveness kill relationships</li>
  <li><strong>You can’t change the people around you but you can change the people
around you</strong></li>
</ul>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/05/12/people/</guid>
                <description>
                    
                    Collection of thoughts and questions about dealing with people.
                    
                </description>
                <pubDate>Sat, 12 May 2018 12:24:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Beginnings</title>
                <link>http://tigerthinks.com/2018/05/12/beginnings/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>A new beginning is one of many new beginnings. Happens all the time!</li>
  <li>You don’t need a landmark (first of month, etc) to make a new
beginning</li>
  <li>Health reaches out and touches every other part of your life</li>
  <li>Routine is should. Habit is must.</li>
  <li>Starting over: taking massive action in line with your values and
beliefs</li>
  <li>Comfort is the place where you grow and learn the least</li>
  <li>Uncertainty is not risk. if you’ve put a ton of work in, there may be
uncertainty, but little risk. If you speak to 100 people, it’s
uncertain which 40 will be impacted, but there is very little risk
that no one will be impacted.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/05/12/beginnings/</guid>
                <description>
                    
                    Thoughts on starting for the first time and starting over.
                    
                </description>
                <pubDate>Sat, 12 May 2018 12:24:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>#17 Model Behavior w/ Entrepreneur/Investor Caterina Fake</title>
                <link>http://tigerthinks.com/2018/05/12/model-behavior-caterina-fake/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Every founder has to shape culture from day one. The culture you start
with is the culture you will keep</li>
  <li>How to scale human interaction?
    <ul>
      <li>Online community, not social media</li>
    </ul>
  </li>
  <li>Total addressable market is ginormous in a networked world. Take the
gourmet local chocolate shop but expand the market globally</li>
  <li>Standing against something gives you a strong sense of identity</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/05/12/model-behavior-caterina-fake/</guid>
                <description>
                    
                    You must set the tone for your community from day one.
                    
                </description>
                <pubDate>Sat, 12 May 2018 09:12:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Local Governments Power Up to Advance China's National AI Agenda</title>
                <link>http://tigerthinks.com/2018/05/06/local-governments-china-ai/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>In the pursuit to outbid each other, their local targets even exceed
ambitious national goals. 11 local governments published targets for
their AI core industries for 2020. Accumulated, this would create an AI
core industry of almost 400 billion CNY in 2020, exceeding the national
target of 150 billion CNY more than twofold.</li>
</ul>

<p><img src="https://www.merics.org/sites/default/files/inline-images/AI-Investitionen-01_0.jpg" alt="china_ai_plans" /></p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/05/06/local-governments-china-ai/</guid>
                <description>
                    
                    China local governments propose aggressive plans totaling $400bn in AI money by 2030!
                    
                </description>
                <pubDate>Sun, 06 May 2018 19:14:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Artificial Intelligence: The Revolution Hasn't Happened Yet</title>
                <link>http://tigerthinks.com/2018/05/06/ai-the-revolution-hasnt-happened-yet/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Don’t evaluate AI as if it’s completely greenfield. Compare to the
past.
    <ul>
      <li>I don’t agree with this personally but I see where the author is
coming from. I think this is hindsight bias</li>
      <li>Whereas civil engineering and chemical engineering were built on
physics and chemistry, this new engineering discipline will be built
on ideas that the preceding century gave substance to — ideas such
as “information,” “algorithm,” “data,” “uncertainty,” “computing,”
“inference,” and “optimization.” Moreover, since much of the focus
of the new discipline will be on data from and about humans, its
development will require perspectives from the social sciences and
humanities.</li>
    </ul>
  </li>
  <li>This confluence of ideas and technology trends has been rebranded as
“AI” over the past few years. This rebranding is worthy of some
scrutiny.
    <ul>
      <li>I do agree with this. I think there isn’t so much of a “revolution”
as just good progress in a good field</li>
    </ul>
  </li>
  <li><strong>Intelligence Augmentation</strong>: computation and data used to create
services that augment human intelligence and creativity, i.e. a really
good search engine or a sound generator</li>
  <li><strong>Intelligent Infrastructure</strong>: a web of computation, data, and
physical entites exists that makes human environments more supportive,
interesting, and safe. Medicine, transportation, etc.</li>
  <li><strong>Is working on classical human-imitative AI the best or only way to
focus on these larger challenges?</strong>
    <ul>
      <li>Has not been very successful</li>
      <li>Success in human-imitative AI may not be enough for IA and II
problems. Lots of additional challenges, namely engineering
and scaling problems.</li>
      <li><strong>We need to realize that the current public dialog on AI — which
focuses on a narrow subset of industry and a narrow subset of
academia — risks blinding us to the challenges and opportunities that
are presented by the full scope of AI, IA and II.</strong></li>
    </ul>
  </li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/05/06/ai-the-revolution-hasnt-happened-yet/</guid>
                <description>
                    
                    Human-imitative AI is not a good way to frame current progress in AI. Intelligence Augmentation and Intelligence Infrastructure present an equally important (and as-yet-unnamed) class of problems.
                    
                </description>
                <pubDate>Sun, 06 May 2018 18:54:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Designing Very Large (JavaScript) Applications</title>
                <link>http://tigerthinks.com/2018/05/06/designing-very-large-applications/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<p><em>Note</em>: adaptation of JSConf Australia talk</p>

<ul>
  <li>Describes closed-source JS framework at Google that powers a lot of
the biggest sites (Photos, Drive, etc.)</li>
  <li>What I think being senior means is that I’d be able to solve almost
every problem that somebody might throw at me. I know my tools, I know
my domain. And the other important part of that job is that I make the
junior engineers eventually be senior engineers.
    <ul>
      <li>How to level up above senior:
        <ul>
          <li><strong>“I can anticipate how the API choices that I’m making, or the
abstractions that I’m introducing into a project, how they impact
how other people would solve a problem.”</strong> I think this is a
powerful concept that allows me to reason about how the choices
I’m making impact an application.</li>
          <li>This is an application of <strong>empathy</strong></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>The programming model</strong> –- a word that I’m going to use a lot. It
stands for “given a set of APIs, or of libraries, or of frameworks, or
of tools–how do people write software in that context.” And my talk is
really about, how subtle changes in APIs and so forth, how they impact
the programming model.</li>
  <li><strong>Code splitting</strong>: not every part of the app needs to be loaded on
every page. Do it.
    <ul>
      <li>Established way to do it: split based on routes
        <ul>
          <li>Become infeasible when routes become huge. Think of Google search
results page. Sometimes loads modules like weather, calculator,
currency converter</li>
        </ul>
      </li>
      <li>Solution?: Dynamic imports. But this takes something that used to be
static and makes it dynamic, which really increases complexity.
<em>Changes the way you write the application</em></li>
      <li>Instead, invert it. Only load logic if it was rendered</li>
    </ul>
  </li>
  <li><strong>Avoid central configuration at all costs</strong>
    <ul>
      <li>E.g. avoid centralized CSS. Put component-specific CSS in
components. Makes it much easier to delete code
        <ul>
          <li>Examples: routes.js. webpack.config.js</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>You want to get to a state where whatever the engineers on your team
do, the most straightforward way is also the right way – so that they
don’t get off the path, so that they naturally do the right thing.</strong>
    <ul>
      <li>Otherwise, add a test that ensures the right way.</li>
      <li><strong>Avoid human judgment outside of the application domain.
Standardize!</strong></li>
    </ul>
  </li>
</ul>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/05/06/designing-very-large-applications/</guid>
                <description>
                    
                    Lots of good architecture advice (not all JS-specific!) from a JS architect at Google
                    
                </description>
                <pubDate>Sun, 06 May 2018 17:07:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Look for the Duct Tape</title>
                <link>http://tigerthinks.com/2018/05/06/look-for-the-duct-tape/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Go around and find out what kind of little one-off tools people have
designed. Talk to them and hear their stories. Look in their personal
bin directories. Take notes and look for patterns. See if anything
stands out, or if anything particularly compelling grabs you during
the interviews.</li>
  <li>Then, if you go off and build something new to soften a rough edge,
not only do they get to remove the duct tape, but you have a bunch of
interested users from day one. Also, just think of the goodwill that
is bound to follow when they realize that finally, someone cares about
the end-user experience, and is willing to adapt upstream to make
their lives better.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/05/06/look-for-the-duct-tape/</guid>
                <description>
                    
                    How do you find things to work on? Find the duct tape and soften the edges. Requires talking to people!
                    
                </description>
                <pubDate>Sun, 06 May 2018 16:54:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>How to Fall Asleep in 2 Minutes or Less</title>
                <link>http://tigerthinks.com/2018/05/06/how-to-fall-asleep-in-two-minutes/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Background: WWII pilots had sleep deficiency. US Army hired Bud Winter
to come up with a program to deal with this.</li>
</ul>

<h3 id="physically-relax">Physically Relax</h3>

<ul>
  <li>Let’s breathe slowly, deeply, and regularly. Take all the wrinkles out
of your forehead. Relax your scalp. Just let go. Now let your jaw
sag-g-g. Let it drop open. Now relax the rest of your face muscles.
Get the brook trout look on your face. Even relax your tongue and
lips. Just let them go loose. Breathe slowly.  Now, let’s go after the
eight muscles that control your eyes. Let them go limp in their
sockets. No focus, just let them go limp. Breathe slowly.</li>
  <li>Move down your body and deaden everything.</li>
</ul>

<h3 id="mentally-relax">Mentally Relax</h3>

<ul>
  <li>Stop the train of thoughts that is usually rumbling through your head</li>
  <li>Three techniques
    <ul>
      <li>It is a warm spring day and you are lying in the bottom of a canoe
on a very serene lake. You are looking up at a blue sky with lazy,
floating clouds.</li>
      <li>Imagine that you are in a big, black, velvet hammock and everywhere
you look is black.</li>
      <li>Say the words ‘don’t think… don’t think… don’t think,’ etc.</li>
    </ul>
  </li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/05/06/how-to-fall-asleep-in-two-minutes/</guid>
                <description>
                    
                    Bud Winter designed a program in WWII to help fighter pilots sleep whenever, wherever. Relax physically then relax mentally.
                    
                </description>
                <pubDate>Sun, 06 May 2018 16:44:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Keep Your Identity Small</title>
                <link>http://tigerthinks.com/2018/05/04/keep-your-identity-small/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>You can have a fruitful discussion about a topic only if it doesn’t
engage the identities of any of the participants. What makes politics
and religion such minefields is that they engage so many people’s
identities.
    <ul>
      <li>People can never have a fruitful argument about something that’s
part of their identity. By definition they’re partisan.</li>
    </ul>
  </li>
  <li>So! Personal life: keep your identity small.
    <ul>
      <li>If people can’t think clearly about anything that has become part of
their identity, then all other things being equal, the best plan is
to let as few things into your identity as possible.</li>
    </ul>
  </li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/05/04/keep-your-identity-small/</guid>
                <description>
                    
                    The fewer things you keep in your identity, the stronger your identity becomes and the more fruitful discussions you can have about things outside your identity.
                    
                </description>
                <pubDate>Fri, 04 May 2018 16:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Getting Your First Ten Customers</title>
                <link>http://tigerthinks.com/2018/05/04/getting-your-first-ten-customers/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li><strong>If you build it, they will do absolutely nothing.</strong></li>
  <li>If you’ve never done this before it will suck but you will get used to
it.
    <ul>
      <li>You have advantages most sales reps lack: the ring of authenticity,
commanding understanding of the problem domain, and the ability to
make changes to the product to close early deals almost in real
time.</li>
    </ul>
  </li>
  <li>Why ten? You likely won’t be able to sustain your business with only
ten customers, but by the time you have ten happy customers, it isn’t
a fluke anymore.</li>
  <li>Good base comparison is <strong>pitching</strong>: just trying to get to the next
convo with the interested party</li>
</ul>

<h3 id="how-do-you-find-prospects-for-your-company">How do you find prospects for your company?</h3>

<ul>
  <li>Your network</li>
  <li>New leads: Google, LinkedIn. Just gotta hustle
    <ul>
      <li>Don’t buy leads until you’ve exhausted this.</li>
    </ul>
  </li>
</ul>

<h3 id="how-do-you-determine-if-prospects-are-good-or-not">How do you determine if prospects are good or not?</h3>

<ul>
  <li>Early adopters, of lots of things. Find users of companies that are
also early. Like, find a young version of Trello and find out which
companies are using it.
    <ul>
      <li>This lets you dodge a major objection to going with a new company,
which is the risk factor: clearly this customer has sufficient
tolerance to adopt a solution from an “unknown” provider; they’ve
done it before.</li>
    </ul>
  </li>
  <li>On the internet
    <ul>
      <li>Just easier. You know they’ll be open to SaaS</li>
    </ul>
  </li>
  <li>Light sales cycles
    <ul>
      <li>Not much insulation between decisionmaker and people you are
talking to. If you’re not talking to someone who can make the
decision to buy your software, move on or move up</li>
    </ul>
  </li>
  <li>Intrinsically reachable
    <ul>
      <li>Businesses for which being intrinsically reachable is a prerequisite
(accountants, lawyers, other service providers) will always be
willing to pick up the phone and talk to someone on spec</li>
    </ul>
  </li>
</ul>

<h3 id="how-should-you-communicate-with-customers">How should you communicate with customers?</h3>

<ul>
  <li>Prove you put in some work.
    <ul>
      <li>Example: Hiya Karen, I really enjoyed your presentation about
repeatable processes for finding new customers for financial
planners, particularly the points regarding user personas.</li>
    </ul>
  </li>
  <li>Start providing value.
    <ul>
      <li>You have clout as a founder. Use it.</li>
      <li>Example: I run a software company which helps small businesses
optimize their online advertising, including managing campaigns for
different personas. For example, I see from your website that you
are active with business owners, retirees, and young couples, and
our software would let your ad creatives target the right audiences
with the right creatives and the right offers. I have some ideas I’d
like to run by you for how to better align your online advertising
and your landing pages. For example, your Facebook campaign for
engaged twenty-somethings currently sends prospects to the
retirement planning questionnaire, but a better choice might be your
post about talking about money with your loved ones.</li>
    </ul>
  </li>
  <li>Ask for a small, specific thing.
    <ul>
      <li>Don’t do anything else. Just leave it for them to respond.</li>
      <li>Example: I’d like to talk about how we could help your company
convert more prospects into sales. Do you have 15 minutes free this
Thursday?</li>
    </ul>
  </li>
</ul>

<h3 id="how-should-you-go-about-following-up">How should you go about following up?</h3>

<ul>
  <li>Follow up! There are a million reasons you didn’t get a response, and
very few of them are actually “I will never buy this product”</li>
  <li>Early on, just handwrite a nice bump.</li>
</ul>

<h3 id="what-should-you-ask-for-on-the-call">What should you ask for on the call?</h3>

<ul>
  <li>Spend your time on the call establishing rapport with the customer,
learning about their problems and motivations, qualifying them, and if
appropriate ask for an opportunity to do a longer ~45 minute demo call
or present a “formal proposal.” If they’re amenable to that, then
you’re off to the races.</li>
</ul>

<h3 id="how-can-you-get-better-at-this-over-time">How can you get better at this over time?</h3>

<ul>
  <li>Just keep doing it. Document lots of things so that eventually you’ll
have a codified, repeatable process.</li>
  <li>Feedback loop from sales to product and back again.</li>
  <li>**This synergistic interplay of product development, marketing, and
sales is one of the joys of running a business. **</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/05/04/getting-your-first-ten-customers/</guid>
                <description>
                    
                    Getting started with sales. It's a necessity for entrepreneurs. It'll be uncomfortable at first but it's completely doable.
                    
                </description>
                <pubDate>Fri, 04 May 2018 15:33:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>How I Learned to Stop Worrying and Love the State Machine</title>
                <link>http://tigerthinks.com/2018/05/04/how-i-learned-to-stop-worrying-and-love-the-state-machine/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li><strong>I LOVE STATE MACHINES. I NEED TO GET BETTER AT USING THEM</strong></li>
  <li>Almost every mutable domain object degenerates into a state machine
    <ul>
      <li>Over time, they build up a lot of logic around how and when they
transition between states, and without diligence this becomes
smeared everywhere.</li>
    </ul>
  </li>
  <li>A state machine:
    <ul>
      <li>Has a notion of a <strong>state</strong>. This is a named way of
being that comes with certain invariants. (open, closed)</li>
      <li>Formally defines a starting state, and allowable transitions between
states (open to closed)</li>
      <li>Transitions between states in response to <strong>events</strong> (deposit,
withdraw)</li>
    </ul>
  </li>
  <li>Transitions: always does same thing</li>
  <li>Use a <strong>transition table</strong></li>
</ul>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>open</th>
      <th>held</th>
      <th>closed</th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>open</td>
      <td>deposit, withdraw</td>
      <td>placeHold</td>
      <td>close</td>
      <td> </td>
    </tr>
    <tr>
      <td>held</td>
      <td>removeHold</td>
      <td>deposit</td>
      <td>close</td>
      <td> </td>
    </tr>
    <tr>
      <td>closed</td>
      <td>reopen</td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
  </tbody>
</table>

<ul>
  <li>Code serves dual purpose: implement functionality and documenting what
is possible. Enter <strong>executable state descriptions</strong></li>
</ul>

<p>Bad code:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">account</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">state</span><span class="p">:</span> <span class="dl">'</span><span class="s1">open</span><span class="dl">'</span><span class="p">,</span>

  <span class="nx">close</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">open</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">balance</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// ...transfer balance to suspension account</span>
      <span class="p">}</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">closed</span><span class="dl">'</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">throw</span> <span class="dl">'</span><span class="s1">invalid event</span><span class="dl">'</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">},</span>

  <span class="nx">reopen</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">closed</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// ...restore balance if applicable</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">open</span><span class="dl">'</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">throw</span> <span class="dl">'</span><span class="s1">invalid event</span><span class="dl">'</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p>Good code:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">account</span> <span class="o">=</span> <span class="nx">StateMachine</span><span class="p">({</span>
  <span class="na">balance</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>

  <span class="p">[</span><span class="nx">STARTING_STATE</span><span class="p">]:</span> <span class="dl">'</span><span class="s1">open</span><span class="dl">'</span><span class="p">,</span>
  <span class="p">[</span><span class="nx">STATES</span><span class="p">]:</span> <span class="p">{</span>
    <span class="na">open</span><span class="p">:</span> <span class="p">{</span>
      <span class="nx">deposit</span> <span class="p">(</span><span class="nx">amount</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">balance</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">balance</span> <span class="o">+</span> <span class="nx">amount</span><span class="p">;</span> <span class="p">},</span>
      <span class="nx">withdraw</span> <span class="p">(</span><span class="nx">amount</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">balance</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">balance</span> <span class="o">-</span> <span class="nx">amount</span><span class="p">;</span> <span class="p">},</span>
      <span class="na">placeHold</span><span class="p">:</span> <span class="nx">transitionsTo</span><span class="p">(</span><span class="dl">'</span><span class="s1">held</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="kc">undefined</span><span class="p">),</span>
      <span class="na">close</span><span class="p">:</span> <span class="nx">transitionsTo</span><span class="p">(</span><span class="dl">'</span><span class="s1">closed</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">balance</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
          <span class="c1">// ...transfer balance to suspension account</span>
        <span class="p">}</span>
      <span class="p">})</span>
    <span class="p">},</span>
    <span class="na">held</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">removeHold</span><span class="p">:</span> <span class="nx">transitionsTo</span><span class="p">(</span><span class="dl">'</span><span class="s1">open</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="kc">undefined</span><span class="p">),</span>
      <span class="nx">deposit</span> <span class="p">(</span><span class="nx">amount</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">balance</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">balance</span> <span class="o">+</span> <span class="nx">amount</span><span class="p">;</span> <span class="p">},</span>
      <span class="na">close</span><span class="p">:</span> <span class="nx">transitionsTo</span><span class="p">(</span><span class="dl">'</span><span class="s1">closed</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">balance</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
          <span class="c1">// ...transfer balance to suspension account</span>
        <span class="p">}</span>
      <span class="p">})</span>
    <span class="p">},</span>
    <span class="na">closed</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">reopen</span><span class="p">:</span> <span class="nx">transitionsTo</span><span class="p">(</span><span class="dl">'</span><span class="s1">open</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="c1">// ...restore balance if applicable</span>
      <span class="p">})</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre></div></div>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/05/04/how-i-learned-to-stop-worrying-and-love-the-state-machine/</guid>
                <description>
                    
                    Any reasonably complex domain object degenerates into a state machine, so you might as well get ahead of the curve.
                    
                </description>
                <pubDate>Fri, 04 May 2018 14:58:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>How Exercise May Help the Memory Grow Stronger</title>
                <link>http://tigerthinks.com/2018/05/04/how-exercise-may-help-memory-grow-stronger/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>The potency of our synapses depends to some degree on how we live our
lives. Lack of sleep, alcohol, diet and other aspects of our
lifestyles, especially stress, may dampen the flow of messages between
brain cells, while practice fortifies it. Repeat an action and the
signals between the cells maintaining the memory of that action can
strengthen. That is learning.</li>
  <li>Researchers separated groups into active, exercising mice and
sedentary mice. Then parts of each group were stressed. Then they
looked at neurons and the unstressed runners had the strongest,
busiest synapses. Notably, <em>the stressed runners had neurons that were
as strong as the unstressed sedentary animals</em></li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/05/04/how-exercise-may-help-memory-grow-stronger/</guid>
                <description>
                    
                    Exercise -&gt; stronger synapses -&gt; stronger memory, stronger brain actions
                    
                </description>
                <pubDate>Fri, 04 May 2018 13:45:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>How Do We Learn? A Zine</title>
                <link>http://tigerthinks.com/2018/05/04/how-do-we-learn-a-zine/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li><strong>It’s all about connections</strong>
    <ul>
      <li>Myth: new ideas are stored like files in a filing cabinet</li>
      <li>Truth: new ideas have to connect with what’s already there, like a
jigsaw puzzle</li>
    </ul>
  </li>
  <li><strong>Use it or lose it</strong>
    <ul>
      <li>Myth: re-reading and cramming are effective</li>
      <li>Truth: reCALL is much better. It’s also better to space out your
learning!</li>
    </ul>
  </li>
  <li><strong>Connect deep</strong>
    <ul>
      <li>Myth: highlighting and memorizing are good ways to learn</li>
      <li>Truth: you have to process items on a deep level to make them stick.</li>
    </ul>
  </li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/05/04/how-do-we-learn-a-zine/</guid>
                <description>
                    
                    ncase always publishes great stuff. We learn by making deep connections!
                    
                </description>
                <pubDate>Fri, 04 May 2018 13:45:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>YC's Series A Diligence Checklist</title>
                <link>http://tigerthinks.com/2018/05/03/yc-series-a-diligence-checklist/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>
    <p>Copied below for reference. All rights go to the original author</p>
  </li>
  <li>Corporate Records and Charter Documents
    <ul>
      <li>All minutes of directors’ and stockholders’ meetings, and all written
consents of directors and stockholders.</li>
      <li>Certificate of Incorporation, Certificates of Designation, Rights, etc.,
and Bylaws.</li>
      <li>Similar information for the Company and subsidiaries, if any.</li>
      <li>A corporate entity organizational chart, if there are any parents or
subsidiaries.</li>
    </ul>
  </li>
  <li>Business Plan and Financials
    <ul>
      <li>Current business plan and any financial projections.</li>
      <li>Most recent financial statements.</li>
    </ul>
  </li>
  <li>Intellectual Property
    <ul>
      <li>A list of the Company’s trademarks, patents, copyrights and domain names
(or any applications therefore) including documentation of filing or
registration with the appropriate governmental entities.</li>
      <li>If any of the foregoing were assigned to the Company, please so state
and provide documentation of the assignment and recordation with the
appropriate governmental entities.</li>
    </ul>
  </li>
  <li>Security Issuances and Agreements Concerning Securities
    <ul>
      <li>A list of the Company’s stockholders, including issuance dates and
original issuance price.</li>
      <li>A list of the Company’s option holders, including grant dates and
exercise prices.</li>
      <li>Copies of agreements relating to outstanding options, warrants, rights
(including conversion or preemptive rights) or agreements for the
purchase or acquisition of any of the Company’s securities, and
agreements relating to the Company’s past stock issuances.</li>
      <li>Any documents evidencing registration rights for the Company’s
securities, or evidencing any agreements among the Company’s
shareholders or between the Company and its shareholders.</li>
      <li>A summary of the vesting schedules of any stock or options subject to
vesting, including any vesting acceleration.</li>
      <li>Agreements relating to voting of securities and restrictive share
transfers.</li>
      <li>Evidence of qualification or exemption under applicable federal
(including Rule 701) and state blue sky laws for issuance or transfer of
the Company’s securities.</li>
    </ul>
  </li>
  <li>Material Agreements
    <ul>
      <li>The Company’s standard terms of service / terms of use for its
customers.</li>
      <li>Any agreements, understanding, instruments, contracts or proposed
transactions to which the Company is a party or by which it is bound
which involve obligations of, or payments to, the Company in excess of
$25,000.</li>
      <li>Any personal property leases.</li>
      <li>Any agreements concerning the purchase, lease, or sublease of real
property.</li>
      <li>Any documents evidencing indebtedness for money borrowed or any other
liabilities incurred by the Company.</li>
      <li>Any documents evidencing any mortgages, liens, loans and encumbrances
with respect to the Company’s property or assets.</li>
      <li>Any documents evidencing any loans or advances made by the Company.</li>
      <li>Any licenses or agreements of any kind with respect to the Company’s or
others’ patent, copyright, trade secret or other proprietary rights,
proprietary information or technology, including employee
confidentiality and proprietary information agreements.</li>
      <li>Any insurance policies held by the Company or of which the Company is a
beneficiary and a summary of such policies, if available.</li>
      <li>Any judgment, order, writ or decree by which the Company is bound or to
which it is a party.</li>
      <li>Any standard forms of agreements used by the Company.</li>
      <li>Any joint venture and partnership agreements.</li>
      <li>Any management, service and marketing agreements.</li>
      <li>Any confidentiality and nondisclosure agreements.</li>
      <li>Any agreements requiring consents or approvals in connection with the
financing.</li>
      <li>Any consulting contracts.</li>
      <li>Any other agreements material to the business of the Company, or outside
the ordinary course of business.</li>
      <li>A list of officers and directors. If any officers are not currently
devoting 100 percent of their business time to the Company, please note
them on this list.</li>
    </ul>
  </li>
  <li>Information Regarding Disputes and Potential Litigation
    <ul>
      <li>Any correspondence or documents relating to any pending or threatened
action, suit or proceeding or investigation, including, without
limitation, (i) those involving the Company’s employees in connection
with their prior or present employment or use of technology and (ii)
those being conducted by or before any governmental entity or regulatory
agency.</li>
      <li>Any correspondence or documents relating to allegations of the Company’s
infringement of the proprietary rights of others.</li>
      <li>Any correspondence or documents relating to any labor agreements or
actions, union representation, or strike or other labor dispute.</li>
    </ul>
  </li>
  <li>Information Regarding Employees and Employee Benefits
    <ul>
      <li>A list of the Company’s employees and consultants, including title, base
salary, target bonus (if applicable), commission plan (if applicable),
classification (including, if an employee, whether the employee is
exempt or non-exempt) and state of residence.</li>
      <li>The Company’s standard form of offer letter.</li>
      <li>Any agreements, understandings or proposed transactions between the
Company and any of its officers, directors, affiliates, or any affiliate
thereof, including without limitation, employment agreements and offer
letters with severance benefits or vesting acceleration provisions.</li>
      <li>Any plans, agreements or arrangements that provide benefits contingent
upon a change in control.</li>
      <li>Any severance or deferred compensation plans (including any salary
deferral agreements, whether written or oral, with employees or
consultants).</li>
      <li>Any employee benefit plans, including, without limitation, stock option
plans, 401(k) plans, pension plans and insurance plans.</li>
      <li>Any forms of agreements used in connection with any stock option plans
(such as a form of option agreement, notice of exercise and restricted
stock purchase agreement).</li>
      <li>If the Company sponsors a 401(k) plan, any determination or opinion
letter and Form 5500 filings for the last 3 years.</li>
      <li>All documents or other information relating to any loans made by the
Company to its employees, directors or consultants.</li>
      <li>The Company’s employee handbook.</li>
      <li>If the Company has any foreign employees, separately list (by country)
all benefits provided to foreign employees.</li>
    </ul>
  </li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/05/03/yc-series-a-diligence-checklist/</guid>
                <description>
                    
                    What you need to have ready once you sign a Series A term sheet.
                    
                </description>
                <pubDate>Thu, 03 May 2018 16:58:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Some Code I Deleted</title>
                <link>http://tigerthinks.com/2018/05/03/some-code-i-deleted/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Couple of examples where the author had an old script laying around
and instead of porting/rewriting, he found a better open-source option
to implement, saving a lot of time and headache.</li>
  <li><strong>Code is fun to write, but it’s such a liability, especially if you
have less time than when you initially wrote it. This is why I think
so much time can be spent on automation or documentation; because it
helps out future me. But the most foolproof way to win is to just not
play, given the option.</strong></li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/05/03/some-code-i-deleted/</guid>
                <description>
                    
                    Always look for existing well-written, well-tested code before embarking on your own adventure. No code is better than no code.
                    
                </description>
                <pubDate>Thu, 03 May 2018 16:47:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Software as a Service, as a Business</title>
                <link>http://tigerthinks.com/2018/04/30/saas-as-a-business/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>You should thoroughly understand the business of SaaS. This will let
you make better decisions for your product (and company), allow you to
see business-threatening problems months or years in advance of them
being obvious, and help you in communicating with investors.</li>
</ul>

<h3 id="why-is-saas-taking-over-the-world">Why is SaaS taking over the world?</h3>

<ul>
  <li>Customers love SaaS because it “just works”. It’s also cheaper.</li>
  <li>Developers love SaaS because of the delivery model – no
infrastructure to maintain, etc.</li>
  <li>Businesses and investors love SaaS because the economics are
impossibly attractive relative to selling licenses. It’s <strong>recurring</strong>
and <strong>predictable</strong></li>
</ul>

<h3 id="saas-sales-models">SaaS sales models</h3>

<ul>
  <li>Very very important to match the product/market and the selected model
to sell it on
    <ul>
      <li>Probably got this right. Pretty clearly high-touch enterprise SaaS</li>
    </ul>
  </li>
</ul>

<h3 id="high-touch-saas-sales">High-touch SaaS sales</h3>

<ul>
  <li>When customers need help deciding whether or how to adopt certain
products</li>
  <li><strong>Human-intensive process</strong> to convince businesses to adopt the
software</li>
  <li><strong>Sales teams are the beating heart of the organization</strong>
    <ul>
      <li><strong>SDR</strong>: Sales Development Representatives find prospects</li>
      <li><strong>AE</strong>: Account Executives own the sales process against particular
customers</li>
      <li><strong>AM</strong>: Account Managers are responsible for happiness and continued
performance of an individualized portfolio of accounts</li>
    </ul>
  </li>
  <li>Marketing supports sales.
    <ul>
      <li>primary job: generate a sufficient pipeline of qualified leads for
the sales team to evaluate and close</li>
    </ul>
  </li>
  <li><strong>Sales engine is more important than engineering and product</strong></li>
  <li><strong>Highly utilized customer support</strong></li>
</ul>

<h3 id="the-fundamental-equation-of-saas">The fundamental equation of SaaS</h3>

<ul>
  <li><strong>revenue = customers * average lifetime revenue per customer</strong></li>
  <li><strong>customers = acquisition (eyeballs) * conversion rate</strong></li>
  <li><strong>LTV (lifetime value) = payment per period * periods of use</strong></li>
  <li><strong>ARPU (average revenue per user)</strong> is average revenue for account
over a period</li>
  <li><strong>Churn</strong> is percent of customers over a given period who do not
continue paying for services</li>
</ul>

<h3 id="implications-of-the-saas-business-model">Implications of the SaaS business model</h3>

<ul>
  <li><strong>Improvements are multiplicative</strong>: 10% better acquisition and 10%
better conversion is a <em>21%</em> improvement (1.1 * 1.1)</li>
  <li><strong>Improvements to a SaaS business are incredibly leveraged</strong>…a 1%
improvement in conversation rates is HUGE over the long run</li>
  <li><strong>Price is the easiest lever to improve a SaaS business</strong> (see SaaS
pricing guide)</li>
  <li><strong>SaaS businesses take a while to grow</strong></li>
</ul>

<h3 id="benchmarks-to-know">Benchmarks to know</h3>

<ul>
  <li><strong>Churn rates</strong>: 10% annualized churn is reasonable for early
companies. 7% is excellent. High-touch SaaS always has lower churn
than low-touch SaaS.</li>
  <li><strong>Net revenue churn</strong> is good to track in addition to raw account
churn</li>
  <li><strong>Negative net revenue churn</strong> is the holy grail: upgrades, increases
in contract size more than offset revenue impact of customers
terminating use of software</li>
</ul>

<h3 id="productmarket-fit">Product/market fit</h3>

<ul>
  <li><strong>Have you found a group of people who <em>love</em> the thing you have built
for them?</strong></li>
  <li>Lots of companies do not launch with product/market fit, they have to
find it.</li>
  <li>Need to find high conversion, low churn. Makes everything easier.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/04/30/saas-as-a-business/</guid>
                <description>
                    
                    The SaaS playbook, from one of the experts.
                    
                </description>
                <pubDate>Mon, 30 Apr 2018 20:12:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Code Smells: Too Many Problems</title>
                <link>http://tigerthinks.com/2018/04/29/code-smells-too-many-problems/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Break the method into smaller pieces.</li>
  <li>Work on one smell at a time.</li>
  <li>Step back, get a bigger picture to model the problem.</li>
  <li>Introduce new domain objects if appropriate.</li>
  <li>Document your changes.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/04/29/code-smells-too-many-problems/</guid>
                <description>
                    
                    Break the method into smaller pieces. Work on one smell at a time. Step back, get a bigger picture to model the problem. Introduce new domain objects if appropriate. Document your changes.
                    
                </description>
                <pubDate>Sun, 29 Apr 2018 09:45:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Code Smells: Mutation</title>
                <link>http://tigerthinks.com/2018/04/29/code-smells-mutation/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>See Effective Java notes</li>
  <li>The point is this mf value is being changed, and this makes it even
harder to reason about.  For example, when we check if it’s present
later in the code, if the value is empty we don’t know if it’s empty
because getMappedField returned no value or if it’s because
getMappedFieldByJavaField returned no value. We just don’t know what
it means if it is empty.</li>
  <li>StringBuilder for immutable string concats</li>
  <li>
    <p>Don’t mutate parameters! Make copies</p>
  </li>
  <li>From the article:
    <ul>
      <li>If the code is altering an array or collection that it is also
reading from, consider having a second collection or array to track
changes and leave the initial values unaltered. Reading and writing
from the same collection, while safe in our specific example, can
lead to unexpected results and concurrency issues.</li>
      <li>If it’s hard to tell which code branch a particular value came from,
you may either want to store several values with readable names
instead of reusing a variable, or move the code that changes the
value into a separate method so that the changes are restricted to a
small section of code.</li>
      <li>If input parameters are being altered, consider adding a new value
to the object that is returned so it contains all the data that
needs to be returned.  If this isn’t possible, consider introducing
a new type to wrap all the return values.</li>
      <li>Counters or boolean primitives may not be the best way to keep track
of state within a method. Removing them or moving them into an
appropriate domain class may make it easier to refactor code into
something simpler.</li>
    </ul>
  </li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/04/29/code-smells-mutation/</guid>
                <description>
                    
                    Make things immutable as much as you can!
                    
                </description>
                <pubDate>Sun, 29 Apr 2018 09:42:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Code Smells: Multi Responsibility Methods</title>
                <link>http://tigerthinks.com/2018/04/29/code-smells-multi-responsibility-methods/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Extract other methods</li>
  <li>Bring related fields into a value object/class. E.g. suit + value
should be a Card object</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/04/29/code-smells-multi-responsibility-methods/</guid>
                <description>
                    
                    Methods should do one thing. Extract things until this is the case.
                    
                </description>
                <pubDate>Sun, 29 Apr 2018 09:30:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Code Smells: If Statements</title>
                <link>http://tigerthinks.com/2018/04/29/code-smells-if-statements/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>If statements can go wild!</li>
  <li>Steps to refactor:
    <ul>
      <li><strong>Place guard conditions at the start</strong>. Can go with <code class="language-plaintext highlighter-rouge">@NotNull</code></li>
      <li>Remove logic for controlling iteration. Use “normal” syntax man</li>
      <li>Extract method for readability. Give it an expressive name</li>
      <li>Replace multiple checks of the same value, try to short circuit</li>
      <li>Collapse multiple conditionals into one if/else</li>
      <li>Nice</li>
    </ul>
  </li>
  <li>Differences between good and bad conditionals:
    <ul>
      <li>More else statements to make clearer distinction between code paths</li>
      <li>Move early-exit code as close to the top as possible</li>
      <li>Extract methods to encapsulate conditions</li>
    </ul>
  </li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/04/29/code-smells-if-statements/</guid>
                <description>
                    
                    Avoid crazy conditionals by moving them to the correct place, collapsing them, extracting to methods
                    
                </description>
                <pubDate>Sun, 29 Apr 2018 09:26:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Code Smells: Deeply Nested Code</title>
                <link>http://tigerthinks.com/2018/04/29/code-smells-deeply-nested-code/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Deeply nested code: double for loop with inner if statement. Yuck!</li>
  <li>Solution: use <strong>Java 8 streams</strong></li>
  <li>Solution <strong>Better encapsulation</strong>
    <ul>
      <li>Extract inner loops to separate methods, etc.</li>
    </ul>
  </li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/04/29/code-smells-deeply-nested-code/</guid>
                <description>
                    
                    Deeply nested code is bad. Encapsulate, use streams.
                    
                </description>
                <pubDate>Sun, 29 Apr 2018 09:04:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Code Smells: Null</title>
                <link>http://tigerthinks.com/2018/04/29/code-smells-null/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Scattered null-checks: sad!</li>
  <li>Things null can mean:
    <ul>
      <li>Value was never initialised (whether accidentally or on purpose)</li>
      <li>Value is not valid</li>
      <li>Value is not needed</li>
      <li>No such value exists</li>
      <li>Something went terribly wrong and something that should be there is
not</li>
      <li>Probably dozens of other things. Some avoidable if you’re
disciplined/use linter</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">Optional</code> solved the case of: no such value exists</li>
  <li>Smell: return null. Solution: <code class="language-plaintext highlighter-rouge">@NotNull</code> annotation for guard clause
based null return. Explicit null return solvable with <code class="language-plaintext highlighter-rouge">Optional</code></li>
  <li>Return an exception in exceptional case! Don’t return null!</li>
  <li>Field-level null can be acceptable. Make sure it’s well understood and
well-documented what can be null and why</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/04/29/code-smells-null/</guid>
                <description>
                    
                    All about the Null code smell. Use `Optional`, `@NotNull` to combat it.
                    
                </description>
                <pubDate>Sun, 29 Apr 2018 08:48:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Jeff Bezos 3-Step Formula for Success</title>
                <link>http://tigerthinks.com/2018/04/29/bezos-three-step-success/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<p>“Surround yourself with the right people. Have a learn-it-all mindset.
Be ready to play the long game.”</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/04/29/bezos-three-step-success/</guid>
                <description>
                    
                    Surround yourself with the right people. Have a learn-it-all mindset. Be ready to play the long game.
                    
                </description>
                <pubDate>Sun, 29 Apr 2018 08:43:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Mr. Robot</title>
                <link>http://tigerthinks.com/2018/04/29/mr-robot/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Geoffrey Hinton is “the father of deep learning”</li>
  <li>Started researching perceptrons in the 90s, it was quiet for awhile,
but breakthroughs came earlier this decade. Joined Google in 2013.</li>
  <li>CapsNet: <strong>artificial neurons organized into layers that track the
relationship between various parts of an object—the little space from
a person’s nose to their mouth is the example Hinton gives</strong></li>
  <li>AI researchers make a shit ton of money, his network is pulling it in
rn</li>
  <li>Comes from a super duper academic background. Has had a rough
personal life (lost two wives)</li>
  <li>Canadian AI mafia: Hinton, Bengio, LeCun</li>
  <li>“We’re machines,” says Hinton. “We’re just produced biologically. Most
people doing AI don’t have doubt that we’re machines. We’re just
extremely fancy machines. And I shouldn’t say just. We’re special,
wonderful machines.”</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/04/29/mr-robot/</guid>
                <description>
                    
                    Report on Geoff Hinton and his capsule networks
                    
                </description>
                <pubDate>Sun, 29 Apr 2018 08:33:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>The Founder's Guide to Selling Your Company</title>
                <link>http://tigerthinks.com/2018/04/29/the-founders-guide-to-selling-your-company/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li><strong>The best time to sell your startup si when you have many options</strong></li>
  <li><strong>Only</strong> enter acquisition talks if:
    <ul>
      <li>You’re certain you want to sell</li>
      <li>You’re likely to get a price you’ll accept</li>
    </ul>
  </li>
  <li>Reasons for strategic value:
    <ul>
      <li>Other CEO finds it interesting</li>
      <li>Executive running relevant division wants to make a splash</li>
      <li>They are afraid of you</li>
    </ul>
  </li>
  <li><strong>There is no right price, only the price you can negotiate</strong></li>
  <li>Negotatiation:
    <ul>
      <li><strong>Initiate a competitive bidding process</strong></li>
      <li><strong>Be willing to walk away</strong></li>
    </ul>
  </li>
  <li><strong>You can tell if an offer is bullshit because it will not be
accompanied by an expiration date and/or a promise of a term sheet
delivery within a very short period of time (24–48 hours).</strong>
    <ul>
      <li>Sometimes ppl just want to distract you</li>
    </ul>
  </li>
  <li>Hire a banker</li>
  <li><strong>You should be prepared to walk away from any deal up until the point
where you are watching your bank account, waiting for the wire
transfer from the acquirer to hit.</strong></li>
  <li>Cripple ability to do day to day business. Don’t start process unless
serious!</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/04/29/the-founders-guide-to-selling-your-company/</guid>
                <description>
                    
                    How to handle getting acquired
                    
                </description>
                <pubDate>Sun, 29 Apr 2018 08:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>The UX of AI</title>
                <link>http://tigerthinks.com/2018/04/29/the-ux-of-ai/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Buzzword: <strong>human-centered machine learning</strong>
    <ul>
      <li>Bring machine learning to <em>people</em>, don’t just do it in isolation</li>
    </ul>
  </li>
  <li>Why human-centered is important
    <ul>
      <li><strong>If you aren’t aligned with a human need, you’re just going to
build a very powerful system to address a very small — or perhaps
nonexistent — problem.</strong></li>
      <li>If the goals of an AI system are opaque, and the user’s understanding
of their role in calibrating that system are unclear, they will
develop a mental model that suits their folk theories about AI, and
their trust will be affected.</li>
      <li>In order to thrive, machine learning must become multi-disciplinary.
Machine learning is the science of making predictions
based on patterns and relationships that’ve been automatically
discovered in data. Needs human guidance to do this more and more
abstractly.</li>
    </ul>
  </li>
  <li>The role of AI shouldn’t be to find the needle in the haystack for us,
but to show us how much hay it can clear so we can better see the
needle ourselves.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/04/29/the-ux-of-ai/</guid>
                <description>
                    
                    Machine learning should be human-centered
                    
                </description>
                <pubDate>Sun, 29 Apr 2018 07:58:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Fellow Engineers: This is where your money comes from.</title>
                <link>http://tigerthinks.com/2018/04/26/fellow-engineers-this-is-where-your-money-comes-from/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Find a way to impact the value your company is delivering to customers.
But, there are a few subtleties here:
    <ul>
      <li>Your customers are not paying you for your time (slightly different for
consultants).</li>
      <li>Your customers are not paying you for your education.</li>
      <li>Your customers aren’t even paying you for your individual output.</li>
    </ul>
  </li>
  <li>This is why I struggle with scenarios where people discuss pay and work
without considering value. If you want to increase your compensation
over time, continue to put yourself in a position where you can deliver
the most value.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/04/26/fellow-engineers-this-is-where-your-money-comes-from/</guid>
                <description>
                    
                    Your customers make you money, so if you care about money care about your customers.
                    
                </description>
                <pubDate>Thu, 26 Apr 2018 20:33:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>On Being an Engineering Manager</title>
                <link>http://tigerthinks.com/2018/04/26/on-being-an-engineering-manager/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>A manager should act as a <strong>buffer</strong> for his/her team.</li>
  <li>A manager should be <strong>optimistic</strong>.</li>
  <li>Priorities: company first, team second, individual third.</li>
  <li>Must be able to context switch quickly</li>
  <li>Say no.</li>
  <li>
    <p>Stay out of the critical path when coding. You don’t have as much
context as your tea,.</p>
  </li>
  <li><strong>“As a CTO, my default loop is ‘First, cycle through all my employees and
make sure that I have equipped them to be happy and productive in their
jobs. Second, find something to do. If possible, delegate it; if not, do
it. Repeat.’“</strong></li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/04/26/on-being-an-engineering-manager/</guid>
                <description>
                    
                    Grab bag of wisdom on engineering management
                    
                </description>
                <pubDate>Thu, 26 Apr 2018 20:04:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>How to Study: A Brief Guide</title>
                <link>http://tigerthinks.com/2018/04/26/how-to-study-a-brief-guide/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Take notes in class and rewrite them at home</li>
  <li>Study hard subjects first
    <ul>
      <li>Your brain has more energy earlier</li>
    </ul>
  </li>
  <li>Study in a quiet place</li>
  <li>Read texts actively and slowly, both before and after class
    <ul>
      <li>Speed reading is not good for comprehension, just for surface level
understanding</li>
    </ul>
  </li>
  <li>Do your homework</li>
  <li>Study for exams</li>
  <li>Do research and write essays
    <ul>
      <li>Choose topic carefully</li>
      <li>Do research</li>
      <li>Make an outline</li>
      <li>Write, using your outline</li>
      <li>Edit</li>
      <li>Manage your time. Don’t procrastinate!</li>
    </ul>
  </li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/04/26/how-to-study-a-brief-guide/</guid>
                <description>
                    
                    Summary of study tips from Philosophy + Computer Science professor at University of Buffalo
                    
                </description>
                <pubDate>Thu, 26 Apr 2018 20:04:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Advice For First Time Founders</title>
                <link>http://tigerthinks.com/2018/04/24/advice-for-first-time-founders/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li><strong>What are some things that you should’ve known as a first-time founder
but did not? How did you learn them? How did they help?</strong></li>
  <li>Relied too much on other people’s advice. Learned to ask the right
questions to customers. <strong>Customers made us successful.</strong> - Claudio
Pinkus, CodeStream</li>
  <li>Communicate. Everything is a no except for a yes from VC! For B2B:
marketing is overrated compared to product-market fit - Fred
Stevens-Smith, Rainforest</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/04/24/advice-for-first-time-founders/</guid>
                <description>
                    
                    Answers from YC founders about three big startup questions
                    
                </description>
                <pubDate>Tue, 24 Apr 2018 20:04:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Variational Autoencoders Explained</title>
                <link>http://tigerthinks.com/2018/04/24/variational-autoencoders-explained/</link>
                <content:encoded>
                    <![CDATA[
                    <p>[Updated 2018-11-25]</p>

<h2 id="notes">Notes</h2>

<ul>
  <li>Downsides of GANs:
    <ul>
      <li>Images come from arbitrary noise, so must search over large space to
find good initial noise values</li>
      <li>No constraints, only “real” or “fake”. Can lead to degenerate cases
where no actual object in image.</li>
    </ul>
  </li>
  <li>Autoencoder solves these problems</li>
  <li>AE adds an encoder network that encodes latent vector/variables, then
passes to decoder.
<img src="http://kvfrans.com/content/images/2016/08/autoenc.jpg" alt="basic_ae" />
    <ul>
      <li>If we save the encoded vector of an image, we can reconstruct it later by
passing it into the decoder portion.</li>
    </ul>
  </li>
  <li>Can’t generate anything like this though – need an existing image to
generate latent vector</li>
  <li>Solution: add a constraint on encoding network forcing it to generate
latent vectors following a unit gaussian distribution
    <ul>
      <li>This makes it <strong>variational</strong></li>
      <li>Then, to generate stuff, you can just sample from the unit gaussian
distribution and pass it directly to the decoder, which will in
theory produce a novel result.</li>
    </ul>
  </li>
  <li>Two losses in network:
    <ul>
      <li>Generative (MSE measuring reconstruction accuracy)</li>
      <li>Latent (KL divergence that measures how closely latent variables
match unit gaussian)</li>
    </ul>
  </li>
  <li>Think of a latent variable as a <strong>transfer of data</strong>
    <ul>
      <li>
        <p>Let’s say you were given a bunch of pairs of real numbers between
[0, 10], along with a name. For example, 5.43 means apple, and 5.44
means banana. When someone gives you the number 5.43, you know for
sure they are talking about an apple. We can essentially encode
infinite information this way, since there’s no limit on how many
different real numbers we can have between [0, 10].</p>

        <p>However, what if there was a gaussian noise of one added every time
someone tried to tell you a number? Now when you receive the number
5.43, the original number could have been anywhere around [4.4 ~
6.4], so the other person could just as well have meant banana
(5.44).</p>

        <p>The greater standard deviation on the noise added, the less
information we can pass using that one variable.</p>

        <p>Now we can apply this same logic to the latent variable passed
between the encoder and decoder. The more efficiently we can encode
the original image, the higher we can raise the standard deviation
on our gaussian until it reaches one.</p>

        <p>This constraint forces the encoder to be very efficient, creating
information-rich latent variables. This improves generalization, so
latent variables that we either randomly generated, or we got from
encoding non-training images, will produce a nicer result when
decoded.</p>
      </li>
    </ul>
  </li>
  <li>Because of encoder-decoder scheme, can <strong>compare generated images
directly to the original</strong>s</li>
  <li>
    <p>Downside to VAE: mean squared error produces fuzzy images</p>
  </li>
  <li>Combine VAE and GAN: use adversarial network as a metric for training
decoder? Hm beyond current mental capacity</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/04/24/variational-autoencoders-explained/</guid>
                <description>
                    
                    Variational autoencoders are generative encoder-decoder networks with a constraint on the encoding network. Well-explained.
                    
                </description>
                <pubDate>Tue, 24 Apr 2018 19:13:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Operations for Software Developers For Beginners</title>
                <link>http://tigerthinks.com/2018/04/23/operations-for-software-developers-for-beginners/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>One of my favorite technical bloggers, but this post was kinda meh</li>
  <li>Stages of software:
    <ul>
      <li>Your software just works. It’s fine.</li>
      <li>Omg anything can break at any time this is impossible.
        <ul>
          <li>Learn to be scared</li>
        </ul>
      </li>
      <li>Keeping your site up is possible</li>
    </ul>
  </li>
  <li>Stuff that helped:
    <ul>
      <li>Work on a dashboard! Track metrics!</li>
      <li>Move complicated database code to a separate service</li>
      <li>Profile and fix unnecessarily slow code</li>
    </ul>
  </li>
  <li>Learn cool stuff by doing ops!</li>
  <li><strong>The best software engineers are the ones who consistently value the
impact and lifecycle of the code they ship, and value deployment and
instrumentation and observability.</strong></li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/04/23/operations-for-software-developers-for-beginners/</guid>
                <description>
                    
                    Ops is worth learning.
                    
                </description>
                <pubDate>Mon, 23 Apr 2018 19:44:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Why Being a Perfectionist is An Obstacle (And How to Beat It)</title>
                <link>http://tigerthinks.com/2018/04/23/being-a-perfectionist-is-an-obstacle/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li><strong>That perfection we aim for might never be reached.</strong></li>
  <li><strong>Instead of seeing yourself as a perfectionist, try and see yourself
as a doist</strong>. You do stuff constantly, constantly moving, constantly
creating</li>
  <li>This leads to freedom</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/04/23/being-a-perfectionist-is-an-obstacle/</guid>
                <description>
                    
                    You're a work in progress that will never be perfect. Accept that and keep getting better.
                    
                </description>
                <pubDate>Mon, 23 Apr 2018 19:44:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Approaching (Almost) Any Machine Learning Problem</title>
                <link>http://tigerthinks.com/2018/04/22/approaching-any-ml-problem/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>60-70% of your time will be data munging. Get used to it.</li>
</ul>

<h3 id="data">Data</h3>

<ul>
  <li>Data must be tabular.</li>
</ul>

<p><img src="http://s5047.pcdn.co/wp-content/uploads/2016/07/abhishek_1.png" alt="data_munging" /></p>

<h3 id="types-of-labels">Types of labels</h3>

<ul>
  <li>Single column, binary values (classification problem, cat vs dog)</li>
  <li>Single column, real values (regression problem, prediction of one new
value)</li>
  <li>Multiple column, binary values (multi-class binary)</li>
  <li>Multilabel (classfication problem, one sample can belong to several
classes</li>
</ul>

<h3 id="evaluation-metrics">Evaluation metrics</h3>

<ul>
  <li>LOSS!!</li>
  <li>Multi-label or multi-class problems: categorical cross-entopry,
multiclass log loss</li>
  <li>Regression: mean squared error</li>
</ul>

<h3 id="libraries">Libraries</h3>

<ul>
  <li>To see and do operations on data: <a href="http://pandas.pydata.org/">pandas</a></li>
  <li>For all kinds of machine learning models: <a href="http://scikit-learn.org/stable/">scikit-learn</a></li>
  <li>The best gradient boosting library: <a href="https://github.com/dmlc/xgboost">xgboost</a></li>
  <li>For neural networks: <a href="http://keras.io/">keras</a></li>
  <li>For plotting data: <a href="http://matplotlib.org/">matplotlib</a></li>
  <li>To monitor progress: <a href="https://pypi.python.org/pypi/tqdm">tqdm</a></li>
</ul>

<h3 id="machine-learning-framework">Machine Learning Framework</h3>

<p><img src="http://s5047.pcdn.co/wp-content/uploads/2016/07/abhishek_2.png" alt="image_framework" /></p>

<ul>
  <li><strong>Identify the problem</strong>: binary classification? Multi-class/multi-label
classification? Regression?</li>
  <li><strong>Split data</strong> into training and validation sets
    <ul>
      <li>Stratified splitting</li>
    </ul>
  </li>
  <li><strong>Identify different labels</strong> in the data. For categorical data: can use
labels or one-hot encoding</li>
  <li>Next, we come to the <strong>stacker</strong> module. Stacker module is not a model
stacker but a feature stacker. The different features after the
processing steps described above can be combined using the stacker
module.</li>
  <li>Once, we have stacked the features together, we can start applying
machine learning models. At this stage only models you should go for
should be <strong>ensemble tree based models</strong>. These models include:
    <ul>
      <li>RandomForestClassifier</li>
      <li>RandomForestRegressor</li>
      <li>ExtraTreesClassifier</li>
      <li>ExtraTreesRegressor</li>
      <li>XGBClassifier</li>
      <li>XGBRegressor</li>
      <li>We cannot apply linear models to the above features since they are not
normalized.</li>
    </ul>
  </li>
  <li><strong>Feature selection</strong>
    <ul>
      <li>There are multiple ways in which feature selection can be achieved.
One of the most common way is greedy feature selection (forward or
backward). In greedy feature selection we choose one feature, train
a model and evaluate the performance of the model on a fixed
evaluation metric. We keep adding and removing features one-by-one
and record performance of the model at every step. We then select
the features which have the best evaluation score.</li>
      <li>Also use best features, gradient boosting</li>
    </ul>
  </li>
  <li><strong>Model selection and hyperparameter optimization</strong>
    <ul>
      <li>Classification:
        <ul>
          <li>Random Forest</li>
          <li>GBM</li>
          <li>Logistic Regression</li>
          <li>Naive Bayes</li>
          <li>Support Vector Machines</li>
          <li>k-Nearest Neighbors</li>
        </ul>
      </li>
      <li>Regression
        <ul>
          <li>Random Forest</li>
          <li>GBM</li>
          <li>Linear Regression</li>
          <li>Ridge</li>
          <li>Lasso</li>
          <li>SVR
<img src="http://s5047.pcdn.co/wp-content/uploads/2016/07/abhishek_24.png" alt="hyperparameters" /></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/04/22/approaching-any-ml-problem/</guid>
                <description>
                    
                    Mental model for approaching ML problems. Very good breakdown.
                    
                </description>
                <pubDate>Sun, 22 Apr 2018 19:27:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Senior Engineers Reduce Risk</title>
                <link>http://tigerthinks.com/2018/04/22/senior-engineers-reduce-risk/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li><strong>Senior engineers reduce risk</strong>: technical risk, product risk</li>
  <li>Startups fail because they build the wrong product. Senior engineers
speed up the search for the right product, or narrow the search space.</li>
  <li>After product-market fit: breaking up teams, breaking up code, scaling
    <ul>
      <li>All things that affect the larger system</li>
    </ul>
  </li>
  <li>Senior engineers find leverage</li>
  <li>Senior engineers are storytellers. Good at explaining stuff! Essential
skill.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/04/22/senior-engineers-reduce-risk/</guid>
                <description>
                    
                    The impact of senior engineers goes beyond code.
                    
                </description>
                <pubDate>Sun, 22 Apr 2018 19:15:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Bayesian Machine Learning</title>
                <link>http://tigerthinks.com/2018/04/22/bayesian-machine-learning/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Bayesians probabilistic, frequentists only use past beliefs.</li>
  <li>Start with a belief, your <strong>prior</strong>. Obtain data and use it to update
the prior, resulting in the <strong>posterior</strong>.
<img src="https://i.imgur.com/96aTr3m.jpg" alt="bayes_rule" /></li>
  <li>Bayesian ML: use Bayes rule to infer model parameters from data</li>
  <li><strong>Inference</strong>: how you learn parameters of your model. Model is
separate from how you train it!
    <ul>
      <li>Different from deep learning, where all training mechanisms use SGD.
Bayesian inference has more different methods</li>
      <li><strong>MCMC</strong> and <strong>variational inference</strong></li>
    </ul>
  </li>
  <li>Two flavors of Bayesian methods: <strong>statistical modeling</strong> and
<strong>probabilistic ML</strong></li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/04/22/bayesian-machine-learning/</guid>
                <description>
                    
                    Intro to Bayesian Machine Learning
                    
                </description>
                <pubDate>Sun, 22 Apr 2018 18:51:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Tools for Remote Software Development and Pair Programming</title>
                <link>http://tigerthinks.com/2018/04/20/tools-for-pair-programming/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Screen Sharing: Zoom, ScreenHero</li>
  <li>Code Sharing: GitHub Gists</li>
  <li>Online IDE: Cloud9, Codenvy, Floobits</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/04/20/tools-for-pair-programming/</guid>
                <description>
                    
                    Tools for Remote Software Development and Pair Programming
                    
                </description>
                <pubDate>Fri, 20 Apr 2018 08:30:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>How to Pick a Career (That Actually Fits You)</title>
                <link>http://tigerthinks.com/2018/04/20/how-to-pick-a-career/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: Conventional wisdom sucks. Reason from first principles to pick
a career for yourself.</p>

<h2 id="notes">Notes</h2>

<ul>
  <li>“Typical” life path sucks. Everyone floats down the “river” with the
same macro guidance, and then get spit out into the real world which
is completely different.</li>
  <li>It’s worth thinking about this stuff: a typical career will take up
somewhere <strong>between 20% and 60% of your meaningful adult life</strong></li>
  <li>Options = intersection of yearnings (what you want) and reality (what
is possible)</li>
</ul>

<p><img src="https://28oa9i1t08037ue3m1l0i861-wpengine.netdna-ssl.com/wp-content/uploads/2018/04/Pie-Chart.png" alt="human-life-breakdown" /></p>

<h3 id="yearnings-what-you-want">Yearnings: What You Want</h3>

<ul>
  <li>Everyone has a personal yearnings octopus with all of their
conflicting thoughts and feelings
    <ul>
      <li><strong>Personal</strong> tentacle: why billionaires don’t just retire and do nothing</li>
      <li><strong>Social</strong> tentacle: obsessed with what people think of you</li>
      <li><strong>Lifestyle</strong> tentacle: just wants pleasure and relaxation</li>
      <li><strong>Moral</strong> tentacle: what kind of impact can I make?</li>
      <li><strong>Practical</strong> tentacle: oh shoot I have to pay rent</li>
      <li><strong>Human yearning is a game of choices and sacrifices and compromise</strong></li>
    </ul>
  </li>
</ul>

<p><img src="https://28oa9i1t08037ue3m1l0i861-wpengine.netdna-ssl.com/wp-content/uploads/2018/04/Octopus-3-segmented-1.png" alt="personal-yearnings-octopus" /></p>

<ul>
  <li>Dissecting yearnings: “Why? Why? Why?”…leads to a “Because”</li>
  <li>Interrogate your yearnings to see if they are truly yours.
    <ul>
      <li>Do you treat the words of your external influences as information,
held and considered by an authentic inner you, that you’ve carefully
decided to embrace? Or are your influences themselves actually in
your brain, <em>masquerading</em> as the inner you?</li>
    </ul>
  </li>
  <li>Prioritize your yearnings
    <ul>
      <li>You are what you do. Your priorities are easily observable through
your actions.</li>
    </ul>
  </li>
</ul>

<p><img src="https://28oa9i1t08037ue3m1l0i861-wpengine.netdna-ssl.com/wp-content/uploads/2018/04/yearning-hierarchy-2-600x435.png" alt="yearning-hierarchy" /></p>

<ul>
  <li>As you prioritize, remember <strong>you are the only wise one in the room</strong>.
You are the only one with the full picture.</li>
</ul>

<h3 id="reality-what-is-possible">Reality: What Is Possible</h3>

<ul>
  <li>Yearnings help you figure out what you want. <strong>What you think you want
is what you are in the <em>habit</em> of wanting, not what you truly deep down
want</strong>.</li>
  <li>Beliefs that dictate career possibilities:
    <ul>
      <li>Beliefs about the world
        <ul>
          <li><em>Today’s world goes through dramatic changes each decade, which
usually leaves conventional wisdom wildly outdated. But we’re
wired for an ancient world where almost nothing ever changed, so
we all reason like cooks and treat conventional wisdom as
equivalent to truth</em></li>
          <li>Think critically about all of the possibilities! They are way more
numerous than conventional wisdom would have you think.</li>
        </ul>
      </li>
      <li>Beliefs about your own potential
        <ul>
          <li><em>With enough time, could you get good enough at this game to
potentially reach wherever your definition of success in that
career?</em>
            <ul>
              <li><strong>Progress = Pace * Persistence</strong>
                <ul>
                  <li>Pace: level of chefness, work ethic, natural ability</li>
                  <li>Persistence: how much time you are willing to commit to
chasing</li>
                </ul>
              </li>
            </ul>
          </li>
          <li><em>Conventional wisdom doesn’t get how non-traditional careers work
– it only thinks in terms of a narrow aspect of successs: talent
and hard work. When career paths have game boards with much more
going on, conventional wisdom just throws its hands up and calls
it “luck”.</em></li>
          <li>Don’t think of strengths and weaknesses as snapshots of individual
skills (e.g. dribbling a basketball). Rather, think of them as
important signaling traits (stubbornness, work ethic).
            <ul>
              <li>Think in terms of <em>potential for improvement</em>
                <ul>
                  <li>Ex: if you gave Michael Jordan a basketball at 25 for the first
time, it would be wrong to call basketball a weakness under
this framework</li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Take all these factors to build your reality box</li>
</ul>

<h3 id="connecting-the-dots">Connecting the Dots</h3>

<p><img src="https://28oa9i1t08037ue3m1l0i861-wpengine.netdna-ssl.com/wp-content/uploads/2018/04/roller-coaster-2-2-600x581.png" alt="getting-to-know-yourself" /></p>

<ul>
  <li>Your career is a series of dots. Connect those dots.</li>
  <li>How do I know if I should move?
    <ul>
      <li>Ask yourself truly deep down what doubts you have.</li>
    </ul>
  </li>
  <li>Goal: not happiness, but <strong>contentment</strong>: feel like you’re currently
taking the best crack you can at a good life path.</li>
  <li>Summary of post:</li>
</ul>

<p><img src="https://28oa9i1t08037ue3m1l0i861-wpengine.netdna-ssl.com/wp-content/uploads/2018/04/venn-with-big-loop-small-768x674.png" alt="career-loop" /></p>

<ul>
  <li>Final thoughts:
    <ul>
      <li><em>It’s when we feel too good that we run the risk of becoming
overconfident, intellectually complacent, and set in our ways. It’s
exactly when we think we have life all figured out that we end up
losing our way.</em></li>
      <li><em>The mistakes that bother me most are the ones that happened because
someone else tookt he wheel of my head and overruled the quited,
insecure voice of my authentic self – the mistakes that I knew at
the time, deep down, were wrong.</em></li>
    </ul>
  </li>
</ul>

<h2 id="thoughts">Thoughts</h2>

<ul>
  <li>Drier than most WBW posts but still engaging and of course informative</li>
  <li>Always seems to put into words things I’ve thought for a long time.
Nice.</li>
  <li>Did not trigger as much existential dread about my own career choices
as I thought it would. Still quite happy about software
development/entrepreneurship/machine learning as things I work hard at
and enjoy.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/04/20/how-to-pick-a-career/</guid>
                <description>
                    
                    Conventional wisdom sucks. Reason from first principles to pick a career for yourself.
                    
                </description>
                <pubDate>Fri, 20 Apr 2018 08:30:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Effective Java, 2nd Edition</title>
                <link>http://tigerthinks.com/2018/04/18/effective-java/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: Very good grab bag of tips and tricks for Java. Many were
immediately applicable. Explained at the perfect level of abstraction
for me.</p>

<h2 id="notes">Notes</h2>

<p>Note: skipped over Ch 10 (Concurrency) and Ch 11 (Serialization)</p>

<ul>
  <li>Looking forward to picking up Core Java after this</li>
</ul>

<h3 id="2-creating-and-destroying-objects">2: Creating and Destroying Objects</h3>

<ul>
  <li>Avoid memory leaks by nulling out references once they become
obsolete…but don’t do it all the time!</li>
</ul>

<h3 id="3-methods-common-to-all-objects">3: Methods Common to All Objects</h3>

<ul>
  <li>Override <code class="language-plaintext highlighter-rouge">Object.equals</code> when a class has a notion of <em>logical
equality</em> separate from object identity</li>
  <li>Provide programmatic access to all of the information contained in the
return value of <code class="language-plaintext highlighter-rouge">toString()</code></li>
  <li>Override clone judiciously
    <ul>
      <li>The clone method functions as another constructor; you must ensure
that it does no harm to the original object and that it properly
establishes invariants on the clone.</li>
    </ul>
  </li>
</ul>

<h3 id="4-classes-and-interfaces">4: Classes and Interfaces</h3>

<ul>
  <li><strong>Minimize the accessibility of classes and members</strong>
    <ul>
      <li>Well-designed module hides all of its implementation details,
seaprating API from implementation. Modules communicate with each
other only through their APIs</li>
      <li><strong>Information hiding</strong> or <strong>encapsulation</strong></li>
      <li>Do not use public static final array fields in classes. These are
accessible and mutable.</li>
    </ul>
  </li>
  <li>To make a class immutable:
    <ul>
      <li>Don’t provide any methods that modify the object’s state</li>
      <li>Ensure that the class can’t be extended (make it final)</li>
      <li>Make all fields final</li>
      <li>Make all fields private</li>
      <li>Ensure exclusive access to any mutable components (don’t allow
chained access to them)</li>
    </ul>
  </li>
  <li><strong>Classes should be immutable unless there’s a very good reason to
make them mutable.</strong></li>
  <li><strong>Favor composition over inheritance</strong>
    <ul>
      <li>Inheritance violated encapsulation</li>
      <li>Instead of extending an existing class, give new class a private
field that references an instance of the existing class (the new
class is composed of the existing class)</li>
      <li>If you declare a member class that does not require access to
enclosing instance, make it static</li>
    </ul>
  </li>
</ul>

<h3 id="5-generics">5: Generics</h3>

<ul>
  <li>Class with <strong>type parameters</strong> in declaration is a <strong>generic</strong>
    <ul>
      <li>Each generic type defines <strong>parameterized types</strong> (<code class="language-plaintext highlighter-rouge">List&lt;String&gt;</code>)
and a <strong>raw type</strong> (<code class="language-plaintext highlighter-rouge">List&lt;E&gt;</code>)
        <ul>
          <li>Don’t use raw types tho. You lose safety and expressiveness</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>If you eliminate all warnings, you are assured typesafe code.</li>
  <li>Arrays are not generic
    <ul>
      <li>Arrays are <strong>covariant</strong>: <code class="language-plaintext highlighter-rouge">Sub[]</code> is a subtype of <code class="language-plaintext highlighter-rouge">Super[]</code>.
Generics are <strong>invariant</strong> (<code class="language-plaintext highlighter-rouge">Sub[]</code> is not a subtype of <code class="language-plaintext highlighter-rouge">Super[]</code>)</li>
      <li>Arrays are <strong>reified</strong>. They know and enforce their types at
runtime. Generics are <strong>erasure</strong>, check these at compile time.</li>
      <li><strong>Non-reifiable type</strong> has a runtime representation with less
information than compile-time representation.</li>
    </ul>
  </li>
  <li>Generic methods are safer and easier to use than methods that require
their clients to cast input parameters and return values.</li>
</ul>

<h3 id="6-enums-and-annotations">6: Enums and Annotations</h3>

<ul>
  <li>Use enums!!</li>
  <li>Associate a different behavior with each enum constant: declare an
abstract apply method in the enum type, and override it with a
concrete method for each constant in a <strong>constant-specific class
body</strong>:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">PLUS { double apply(double x, double y) {return x + y;} }</code></li>
    </ul>
  </li>
  <li><strong>Prefer annotations to naming patterns</strong>
    <ul>
      <li>First-class support, better semantics, less brittle</li>
    </ul>
  </li>
  <li><strong>Use marker interfaces to define types</strong>
    <ul>
      <li>Interface with no method declarations that designates a class that
implements that interface as having some property</li>
      <li>Use marker annotations if you want to allow for possibility of
adding more information to marker in the future</li>
    </ul>
  </li>
</ul>

<h3 id="7-methods">7: Methods</h3>

<ul>
  <li>Every time you write a method, think about the restrictionos that
exist on its parameters. Document and enforce these descriptions; the
work it takes will pay for itself many times over.
    <ul>
      <li>Use <code class="language-plaintext highlighter-rouge">assert</code> statements to check parameters in non-public methods</li>
    </ul>
  </li>
  <li>Defensively copy mutable components that you get or return to clients
to ensure they aren’t messed with.</li>
  <li>Method signatures:
    <ul>
      <li><strong>When in doubt, leave it out.</strong></li>
      <li>Shorten long parameter lists by creating <strong>helper classes</strong> (e.g.
Card class instead of suit/value parameters to everything)</li>
      <li><strong>Favor interfaces over classes</strong> for parameter types</li>
      <li><strong>Prefer two-element enum types to boolean parameters</strong>. They are
more expressive</li>
    </ul>
  </li>
  <li>Try not to overload. It’s confusing and error-prone.</li>
  <li>JavaDoc comments should be considered mandatory for all exported API
elements.</li>
</ul>

<h3 id="8-general-programming">8: General Programming</h3>

<ul>
  <li><strong>Minimize the scope of local variables</strong></li>
  <li><strong>Know and use the standard libraries</strong></li>
  <li><strong>Don’t use float/double for money</strong>. Use BigDecimal</li>
  <li>Differences between primitives and boxed primitives:
    <ul>
      <li>Boxed primitives can be null</li>
      <li>Primitives are more space-efficient</li>
      <li>Primitives can only have their values, boxed primitives have
distinct object identities
        <ul>
          <li><strong>Never use == with boxed primitives</strong></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>Avoid strings where other types are more appropriate</strong>
    <ul>
      <li>Write a class to represent the aggregate (private static member)</li>
    </ul>
  </li>
  <li><strong>Refer to objects by their interfaces</strong> (generalization of Item 40)
    <ul>
      <li>Much more flexible</li>
      <li><code class="language-plaintext highlighter-rouge">List&lt;Subscriber&gt; subscribers = new Vector&lt;Subscriber&gt;();</code></li>
    </ul>
  </li>
  <li>Mantras for optimization:
    <ul>
      <li><em>More computing sins are committed in the name of optimization
(without necessarily achieving it) than for any other single reason
– including blind stupidity.</em> (Wulf, 72)</li>
      <li><em>We should forget about small inefficiencies, say about 97% of the
time; premature optimization is the root of all evil.</em> (Knuth, 74)</li>
      <li><em>Two rules in the matter of optimization: Rule 1. Don’t do it. Rule
2 (for experts only). Don’t do it yet – that is, not until you have
a perfectly clear and unoptimized solution.</em> (Jackson, 75)</li>
      <li><strong>Strive to write good programs rather than fast ones.</strong></li>
      <li><strong>Strive to avoid design decisions that limit performance.</strong></li>
    </ul>
  </li>
  <li>Type parameter names:
    <ul>
      <li><strong>T</strong>: arbitrary type</li>
      <li><strong>E</strong>: element type of a collection</li>
      <li><strong>K</strong>: key type of a map</li>
      <li><strong>V</strong>: value type of a map</li>
      <li><strong>X</strong>: exception</li>
    </ul>
  </li>
</ul>

<h3 id="9-exceptions">9: Exceptions</h3>

<ul>
  <li><strong>Use exceptions only for exceptional conditions.</strong></li>
  <li><strong>Use checked exceptions for recoverable conditions and runtime
exceptions for programming errors.</strong>
    <ul>
      <li>Checked exception: must be caught or declared in the method in which
it is thrown</li>
      <li>Make sure checked exception contains enough info for programmer to
recover</li>
    </ul>
  </li>
  <li>A <strong>failure atomic</strong> method leaves object in the state it was prior to
invocation when the method fails. Strive for this.
    <ul>
      <li>Check parameters for validity before performing operation</li>
    </ul>
  </li>
  <li>Implement Serializable judiciously; it drastically reduces portability
and flexibility of the class.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/04/18/effective-java/</guid>
                <description>
                    
                    Very good grab bag of tips and tricks for Java. Many were immediately applicable. Explained at the perfect level of abstraction for me.
                    
                </description>
                <pubDate>Wed, 18 Apr 2018 05:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Patterns of Enterprise Application Architecture</title>
                <link>http://tigerthinks.com/2018/04/18/patterns-of-enterprise-application-architecture/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: Fundamental concepts of enterprise application development.
While this book dates itself in a lot of areas, the vocabulary and
concepts it introduces will be quite useful for me moving forward.</p>

<h2 id="notes">Notes</h2>

<p>Note: Only read Part 1 (The Narratives), skipped Part 2 (The Patterns)</p>

<ul>
  <li><strong>Patterns are useful starting points, but they are not destinations</strong>
    <ul>
      <li>Do not be dogmatic about following patterns</li>
    </ul>
  </li>
  <li>An important but often overlooked part of patterns is developing a
common vocabulary</li>
  <li>“Architecture” is overblown. Used primarily to draw attention. “If
something is easier to change than you thought before, it is no longer
architectural”.
    <ul>
      <li>Weird second point to make here, my understanding is that
flexibility is a big part of architectural decisionmaking. If you
find something easier to change later, then perhaps you optimized
for the correct things architecturally.</li>
    </ul>
  </li>
  <li><strong>Business logic</strong>: an oxymoron, since nothing is logical in business</li>
  <li>Impact of architectural decisions: “If a system has business benefits,
delaying those benefits costs money. However, you don’t want to make
decisions now that hamper future growth. But if you add it now and get
it wrong, the complexity added for flexibility’s sake may actually
make it harder to evolve in the future.”</li>
  <li>Performance vocab:
    <ul>
      <li><strong>Response time</strong>: total time it takes to process a request from the
outside</li>
      <li><strong>Responsiveness</strong>: amount of time it takes a system to acknowledge
a request (as opposed to processing it)</li>
      <li><strong>Latency</strong>: minimum time required to get any form of response from
system</li>
      <li><strong>Throughput</strong>: how much stuff you can do in a given amount of time</li>
      <li><strong>Performance</strong>: either throughput or response time – whichever
matters more to you</li>
      <li><strong>Load</strong>: description of how much stress a system is under (e.g. how
many users are currently connected</li>
      <li><strong>Load sensitivity</strong>: how response time scales with load; if you
double the load, what factor does response time scale up by?</li>
      <li><strong>Efficiency</strong>: performance divided by resources</li>
      <li><strong>Capacity</strong>: maximum effective throughput or load</li>
      <li><strong>Scalability</strong>: How does adding resources affect performance?
Scalable = more hardware, more performance without other changes
        <ul>
          <li>Build for hardware scalability for maximum flexibility</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="1-layering">1: Layering</h3>

<ul>
  <li>Canonical example: 5- or 7-layer network stack</li>
  <li>Benefits of layering:
    <ul>
      <li>Understand single layer without knowing about other layers</li>
      <li>Substitute one layer without affecting other layers</li>
      <li>Standardization</li>
    </ul>
  </li>
  <li>Downside:
    <ul>
      <li>Don’t encapsulate everything well, e.g. if you need a piece of data
in the UI and the database it needs to exist in every layer in
between
        <ul>
          <li>Hmm how would you avoid this in the first place though</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Generally three primary layers in enterprise application:
    <ul>
      <li><strong>Presentation</strong>
        <ul>
          <li>Domain and data source should never be dependent on presentation
            <ul>
              <li>Test: if you add a radically different presentation layer, do
you have to duplicate logic?</li>
            </ul>
          </li>
          <li>Display info to user, interpret commands from user to pass to
domain</li>
        </ul>
      </li>
      <li><strong>Domain</strong>
        <ul>
          <li>Business logic</li>
          <li>“Work” application needs to do</li>
        </ul>
      </li>
      <li><strong>Data source</strong>
        <ul>
          <li>Generally DB for storing persistent data</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="2-organizing-domain-logic">2: Organizing Domain Logic</h3>

<ul>
  <li><strong>Active Record</strong>: row data gateway with domain logic (handles model
actions and data and persistence all together)
    <ul>
      <li>Alternative: <strong>Data Mapper</strong> separates persistence from logic
completely between domain layer and data source</li>
    </ul>
  </li>
  <li><strong>BLOB</strong>: Binary Large OBject (lol)</li>
</ul>

<h3 id="3-object-relational-mapping">3: Object-Relational Mapping</h3>

<ul>
  <li><em>“My first choice tends to be STI, as it’s easy to do and is resilient
to many refactorings. I tend to use the other two (Class table
Inheritance, Concrete Table Inheritance) as needed to help solve the
inevitable issues with irrelevant and wasted columns”</em> (47)</li>
</ul>

<h3 id="4-web-presentation">4: Web Presentation</h3>

<ul>
  <li>Apply MVC to make sure models are completely separate from
presentation</li>
</ul>

<h3 id="5-concurrency">5: Concurrency</h3>

<ul>
  <li><em>As long as you do all your data manipulation within a transaction,
nothing really bad will happen to you</em></li>
  <li>Enterprise application concurrency concerns:
    <ul>
      <li><strong>Offline concurrency</strong>: concurrency control for data that’s
manipulated during multiple database transactions</li>
      <li>Server concurrency (multi-threading)…easier to deal with, most
frameworks deal with it for you</li>
    </ul>
  </li>
  <li>Concurrency vocab:
    <ul>
      <li><strong>Lost update</strong>: two people check both do work from the same
starting point, one commits before the other, the first person’s
work is lost when the second commit happens</li>
      <li><strong>Inconsistent read</strong>: read two things that are correct but not
correct at the same time (i.e. two reads five seconds apart that
happen in the middle of another operation and thus return a bad
value)</li>
      <li><strong>Liveness</strong>: how much concurrent activity a system can handle</li>
    </ul>
  </li>
  <li>Execution contexts:
    <ul>
      <li><strong>Request</strong>: single call for the outside world which app works on
and responds to</li>
      <li><strong>Session</strong>: long-running interaction between client and server (can
be stateful series of requests)</li>
      <li><strong>Process</strong>: heavier execution context on the OS with full isolation
of memory</li>
      <li><strong>Thread</strong>: lighter execution context on the OS without memory
isolation</li>
    </ul>
  </li>
  <li>Base techniques:
    <ul>
      <li><strong>Isolation</strong>: keep transactions and operations apart from each other</li>
      <li><strong>Immutability</strong>: immutable data can be confidently shared</li>
    </ul>
  </li>
  <li>Lock types:
    <ul>
      <li><strong>Optimistic</strong>: allow concurrent edits, deal with conflicts on
commit. Conflict detection.</li>
      <li><strong>Pessimistic</strong>: do not allow concurrent edits. Conflict prevention</li>
    </ul>
  </li>
  <li>ACID transcation:
    <ul>
      <li><strong>Atomic</strong>: all or nothing</li>
      <li><strong>Consistent</strong>: system is in non-corrupt state at beginning and end
of transaction</li>
      <li><strong>Isolated</strong>: no other open transactions can see what’s happening in
an in-progress transaction
        <ul>
          <li><strong>Serializable</strong> transactions can be executed concurrently and the
result is the same as if you’d executed them serially. Always choose
this isolation level!!</li>
        </ul>
      </li>
      <li><strong>Durable</strong>: result of committed transaction must be permanent</li>
    </ul>
  </li>
  <li>Also need to deal with <strong>business transactions</strong> which occur over the
course of a session (e.g. an action someone is taking with their
banking software over multiple UI pages)
    <ul>
      <li><strong>Process-per-request</strong> model is good. Scalable and more robust than
thread per request (single thread can take down entire process).</li>
    </ul>
  </li>
</ul>

<h3 id="6-session-state">6: Session State</h3>

<ul>
  <li><strong>Session state</strong> is data that’s only relevant for a particular
session (distinct from persistent record data)</li>
  <li>Can store session state on client, server, or database
    <ul>
      <li>Only put small amounts of data on client so you don’t have to keep
passing big things back and forth</li>
      <li>Database session state is harder to access and hard to keep isolated
from record data</li>
      <li>Server session state is good for most things</li>
    </ul>
  </li>
</ul>

<h3 id="7-dsitribution-strategies">7: Dsitribution Strategies</h3>

<ul>
  <li><strong>First Law of Distributed Object Design: Don’t distribute your
objects</strong></li>
</ul>

<h3 id="8-putting-it-all-together">8: Putting It All Together</h3>

<ul>
  <li>Meta good practices. Nice.
    <ul>
      <li>CI</li>
      <li>TDD</li>
      <li>Refactoring</li>
    </ul>
  </li>
  <li>Start with the domain layer. This is the most imporatnt piece of the
system. Lean towards using <strong>domain model</strong></li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/04/18/patterns-of-enterprise-application-architecture/</guid>
                <description>
                    
                    Solid set of backbone concepts for enterprise applications. Many of his ideas have developed a lot since this book was released in 2002 but it strengthened my understanding to see them explained firsthand.
                    
                </description>
                <pubDate>Wed, 18 Apr 2018 05:00:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>The Unseen World</title>
                <link>http://tigerthinks.com/2018/04/16/the-unseen-world/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: Ada is raised by her father David. He home-schools her and
brings her to his computer science lab in Boston. She is socially
underdeveloped but extremely smart at the young age of 12. However,
David’s old age begins to affect his mind. As his friends try to get his
affairs in order, a lot of questions come up. Ada must figure things out
as she also adjusts to life in the “real” world. Good novel with a slow
build-up but a satisfyingly good conclusion.</p>

<h2 id="notes">Notes</h2>

<ul>
  <li>Didn’t have the word flair of some of the fiction I’ve been reading.
Refreshingly straightforward though</li>
  <li>Hard for me to get in character as a 12-year-old girl, or I may have
gotten more out of it</li>
  <li>Tech/nerd side of things was fun for me
    <ul>
      <li>Overall very optimistic about AI. Benevolent AI future</li>
    </ul>
  </li>
  <li>How does family/upbringing affect you?</li>
</ul>

<h2 id="snippets">Snippets</h2>

<blockquote>
  <p>
    "This must be the most important factor in your choice of a life
    partner," he told Ada. "Who will most patiently and enthusiastically
    support your ambitions?" (18) [Tiger: self-centered lol]
  </p>
</blockquote>

<blockquote>
  <p>
    David was passionate about cooking -- to him it was a cousin of
    chemistry (23)
  </p>
</blockquote>

<blockquote>
  <p>
    They were her father's favorite books of all time, but she had
    adopted them as her own so fully that she was no longer certain what
    the truth was (25) [Tiger: wow, like WBW career post]
  </p>
</blockquote>

<blockquote>
  <p>
    These quiet moments, this liminal space between wakefulness and
    sleep, lingering in her confusion, willing herself backward into her
    dreams. (76)
  </p>
</blockquote>

<blockquote>
  <p>
    We must be constant and vigilant in our war against entropy, David
    used to say frequently. Entropy always has the upper hand. (82)
  </p>
</blockquote>

<blockquote>
  <p>
    <b>Only humans can hurt one another</b>, Ada thought; only humans falter
    and betray one another with a stunning, fearsome frequency. As
    David's family had done to him; as David had done to her. And Ada
    would do it, too. She would fail other people throughout her life,
    inevitably, even those she loved the best. (441)
  </p>
</blockquote>

<h2 id="summary-spoilers-duh">Summary (spoilers duh)</h2>

<ul>
  <li>So David is actually this guy Harold Canady who was in real danger as
a gay person working for the government in the 60’s, so he faked his
death and took on the identity of his boyfriend David Sibelius (who
was estranged from his own family). He moved to Boston and started the
lab, had Ada via surrogate, and the rest is history.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/04/16/the-unseen-world/</guid>
                <description>
                    
                    Coming-of-age story for Ada Sibelius, home-schooled her whole life by her eccentric father but forced to grow up when he comes down with Alzheimer's. Enjoyed it.
                    
                </description>
                <pubDate>Mon, 16 Apr 2018 18:56:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Shoe Dog</title>
                <link>http://tigerthinks.com/2018/04/16/shoe-dog/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: Phil “Buck” Knight has a Crazy Idea :tm: after graduating from
Stanford business school. The trials he has to go through, and his
response to them, make for a riveting story.</p>

<h2 id="notes">Notes</h2>

<ul>
  <li><strong><em>resilience</em></strong> is the overarching theme of this narrative.
Resilience in the face of mistakes, failure, just keeping on keeping
on.</li>
  <li>Respect for writing this himself! I don’t think his voice or his story
could have been told better by anyone else.</li>
  <li>Really felt all of the characters. Felt their individual
personalities, expressed through very well-written anecdotes, and
especially felt Buck’s deep relationships with all of them.</li>
  <li>So many great nuggets of wisdom sprinkled around the book. I love the
narrative voice.</li>
  <li>Leadership lessons: lead by example. Be firm but empathetic. You are
not above reproach.</li>
</ul>

<h2 id="snippets">Snippets</h2>

<blockquote>
  <p>
    That morning in 1962 I told myself: Let everyone else call your
    idea crazy...just <b>keep going. Don't stop. Don't even think about
    stopping until you get there</b>, and don't give much thought to where
    "there" is. Whatever comes, just don't stop. [...] Half a century
    later, I believe it's the best advice -- maybe the only advice --
    any of us should ever give. (L82)
  </p>
</blockquote>

<blockquote>
  <p>
    He was easy to talk to, and easy not to talk to -- equally important
    qualities in a friend. (L186)
  </p>
</blockquote>

<blockquote>
  <p>
    Don't tell people how to do things, tell them what to do and let
    them surprise you with their results. (L501)
  </p>
</blockquote>

<blockquote>
  <p>
    Bowerman's strategy for running the mile was simple. <b>Set a fast pace
    for the first two laps, run the third as hard as you can, then
    triple your speed on the fourth.</b> (L713)
  </p>
</blockquote>

<blockquote>
  <p>
    I'd been slightly better at selling mutual funds, but I'd felt dead
    inside. So why was selling shoes so different? Because, I realized,
    I wasn't selling. I <i>believed</i> in running. [...] People,
    sensing my belief, wanted some of that belief for themselves.
    Belief, I decided. Belief is irresistible. (L775)
  </p>
</blockquote>

<blockquote>
  <p>
    Hayes was to the numbers born. [...] He looked at numbers the way
    the poet looks at clouds, the way the geologist looks at rocks. He
    could draw from them rhapsodic song, demotic truths. And uncanny
    predictions. Hayes could use numbers to tell the future. (L1167)
  </p>
</blockquote>

<blockquote>
  <p>
    There are team players, I thought, and then there are _team players_,
    and then there's Johnson. (1508)
  </p>
</blockquote>

<blockquote>
  <p>
    No one could get your blood going like Bowerman, though he never
    raised his voice. He know how to speak in subliminal italics, to
    slyly insert exclamation marks, like hot keys against the flesh.
    (1605)
  </p>
</blockquote>

<blockquote>
  <p>
    Imagine that, I thought. <b>The single easiest way to find out how you
    feel about someone. Say goodbye.</b> (1822)
  </p>
</blockquote>

<blockquote>
  <p>
    Life is growth. You grow or you die. (2058)
  </p>
</blockquote>

<blockquote>
  <p>
    He denied, fumed, bargained, got depressed, then accepted. The Five
    Stages of Jeff. (3603) [I love the narrative voice in this book.
    This is just one example.]
  </p>
</blockquote>

<blockquote>
  <p>
    Somebody may beat me--but they're going to have to bleed to do it.
    (3921)
  </p>
</blockquote>

<blockquote>
  <p>
    [Buttface] not only captured the informal mood of those retreats,
    where no idea was too sacred to be ridiculed, it also summed up the
    company spirit, mission and ethos. (4191)
  </p>
</blockquote>

<blockquote>
  <p>
    It was us against the world, and we felt damned sorry for the world.
    (4260)
  </p>
</blockquote>

<blockquote>
  <p>
    The cowards never started and the weak died along the way. That
    leaves us. (5016)
  </p>
</blockquote>

<blockquote>
  <p>
    Mr. Hayami nodded. "See those bamboo trees up there?" he asked [...]
    <b>"Next year...when you come...they will be one foot higher"</b> (5326)
    [w.r.t. training managers internally]
  </p>
</blockquote>

<blockquote>
  <p>
    The better [you] get, the bigger the bull's-eye. It's not one man's
    opinion; it's a law of nature. (5380)
  </p>
</blockquote>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/04/16/shoe-dog/</guid>
                <description>
                    
                    Tons of great stories and actionable takeaways from the founding and growth story of Nike, right from the source. Really, really good.
                    
                </description>
                <pubDate>Mon, 16 Apr 2018 06:48:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Bayesian Methods For Hackers</title>
                <link>http://tigerthinks.com/2018/04/16/bayesian-methods-for-hackers/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: The simplest explanation of Bayesian methods and probabilistic
programming I’ve come across. Says a lot about the field that this book
was still extremely difficult to get through. Enjoyed the writing style
quite a bit, and thought the examples were fascinating.</p>

<h2 id="notes">Notes</h2>

<p>Simple definition of Bayesian Inference: <strong>updating your beliefs after
considering new evidence</strong>. We can get more and more confident, but never
absolutely sure!</p>

<p>My notes on this book are in a series of Colab Notebooks, following the
book’s format of being written in Jupyter notebooks:</p>

<ol>
  <li><a href="https://drive.google.com/file/d/1whF74HRgB_YuWD_pUYNjJsXBwVqGaoHx/view?usp=sharing">Introduction</a>
    <ol>
      <li>Example: text message data inference (“can you detect the
inflection point in a user’s behavior given their text message counts
by day?”)</li>
    </ol>
  </li>
  <li><a href="https://drive.google.com/file/d/1x7OSIsGdqAIOimNbx-PuGYrZ4yqA15Ut/view?usp=sharing">A Little More on PyMC</a>
    <ol>
      <li>Example: A/B testing – finding a distribution for the delta of two
sites, Site A and Site B, to probabilistically determine which
performed better in the A/B test and by how much.</li>
    </ol>
  </li>
  <li><a href="https://drive.google.com/file/d/1qKEgcw2dbQIPjsHp_0cWMTdvBkrDs6Qk/view?usp=sharing">Opening the Black Box of MCMC</a>
    <ol>
      <li>Example: unsupervised clustering of a dataset around two normal
distributions using a mixture model.</li>
    </ol>
  </li>
  <li><a href="https://drive.google.com/file/d/1Po1KaT28qDY7s_6H0heGp3yppctVwlmN/view?usp=sharing">The Greatest Theorem Never Told</a>
    <ol>
      <li>Example: how to order Reddit submissions (factors: vote count, time
passed, etc.)</li>
    </ol>
  </li>
  <li><a href="https://drive.google.com/file/d/16AwVu84R1eEmgYpNcjQESCSIuOxg5UoS/view?usp=sharing">Loss Functions</a>
    <ol>
      <li>Example: optimizing for The Showcase on The Price is Right</li>
      <li>Example: Bayesian Kaggle submission for observing dark matter</li>
    </ol>
  </li>
  <li><a href="https://drive.google.com/open?id=14ajIQOoI7z9icpzCxRJ--bZthNTeby1i">Priors</a>
    <ol>
      <li>Example: predicting stock returns</li>
    </ol>
  </li>
</ol>

<p>Overall, this is some of the most challenging material I’ve worked on in
any field, not just machine learning. I’m really grateful for this book,
since I was completely drowning in the material before I found it. I
believe in the power of probabilistic programming and modeling, and I
look forward to exploring it more with libraries like Uber’s Pyro and
Google’s Tensorflow Probabilities.</p>

<p>After reading this book I don’t feel like I have a great handle on MCMC
or building PyMC models, but I have at least enough of a foundation in
vocabulary and concepts to begin branching out.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/04/16/bayesian-methods-for-hackers/</guid>
                <description>
                    
                    The simplest explanation of Bayesian methods and probabilistic programming I've come across. Says a lot about the field that this book was still extremely difficult to get through.
                    
                </description>
                <pubDate>Mon, 16 Apr 2018 06:00:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>The Inner Game of Tennis</title>
                <link>http://tigerthinks.com/2018/04/15/the-inner-game-of-tennis/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: Every game has an outer game and an inner game. The inner game
is played in the mind of the player, and the opponents are nerves,
self-doubt, lack of concentration. The optimal mental state is one of
relaxed concentration. To achieve this, the player must quiet self 1
(the mind) and trust self 2 (the body) to do what it does best without
inhibition.</p>

<h2 id="notes">Notes</h2>

<ul>
  <li>Finally a mental game book that’s the appropriate length.</li>
  <li>I really enjoyed this book. The distinction between Self 1
and Self 2 is simple yet incredibly powerful. I look forward to
applying these concepts to my life.
    <ul>
      <li>Self 1: “the mind”, thinks it knows best, always trying to be in
control</li>
      <li>Self 2: “the body”, incredibly good at learning and internalizing
complex actions, but only able to perform them if Self 1 gets out of
the way</li>
    </ul>
  </li>
  <li>3 steps to master the inner game:
    <ul>
      <li>Learn how to get the clearest possible picture of your desired
outcomes</li>
      <li>Learn how to trust Self 2 to perform at its best and learn from both
successes and failures
        <ul>
          <li>The more important the moment, the more Self 1 wants to be in
control, and the results are almost always disappointing</li>
        </ul>
      </li>
      <li>Learn how to see nonjudgmentally, how to see what is happening
without assigning a label of “good” or “bad” to it
        <ul>
          <li>Judgment -&gt; tightness -&gt; interference</li>
          <li>Relaxation -&gt; smoothness -&gt; acceptance and improvement</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>The Inner Game Way of Learning (79) (later than the previous stuff)
    <ul>
      <li><strong>Observe existing behavior nonjudgmentally</strong></li>
      <li><strong>Picture desired outcome</strong></li>
      <li><strong>Let it happen! Trust Self 2</strong></li>
      <li><strong>Nonjudgmental, calm observation of results leading to continuing
observation and learning</strong></li>
    </ul>
  </li>
  <li>Self 1 will try to return, so stay vigilant. Give Self 2 the credit it
deserves when things go well (hint: Self 2 is often the cause)</li>
  <li>Concentration: distract Self 1
    <ul>
      <li>Watch the ball: see the rotations and the seams</li>
      <li>Listen to the ball: give subconscious hints as to where it’s going</li>
      <li>Feel: know what it feels like for your body to be in position and to
do the correct thing</li>
      <li><strong>Breathe: breathe, breathe, breathe!</strong></li>
    </ul>
  </li>
  <li>Compete with <em>abandon</em>: nothing to lose, not caring about the outcome,
and going all out. Letting in the natural concerns of a deeper and
truer self.</li>
</ul>

<h2 id="snippets">Snippets</h2>

<blockquote>
  <p>
    [...] great pleasure, great ecstasy. During such experiences, the
    mind does not act like a separate entity telling you what you should
    do or criticizing how you do it. It is quiet; <b>you are
    "together"</b>, and the action flows as free as a river. (15)
  </p>
</blockquote>

<blockquote>
  <p>
    Quieting the mind means less thinking, calculating, judging,
    worrying, fearing, hoping, trying, regretting, controlling,
    jittering, or distracting. (16)
  </p>
</blockquote>

<blockquote>
  <p>
    Self 1 easily gets enamored of formulas that tell it where the
    racket should be and when. It likes the feeling of control it gets
    from doing it by the book. But Self 2 likes the feeling of flow --
    of the whole stroke as one thing. (67)
  </p>
</blockquote>

<blockquote>
  <p>
    Only to the extent that one is unsure about who and what he is does
    he need to prove himself to himself or others. (116)
  </p>
</blockquote>

<blockquote>
  <p>
    The surfer waits for the big wave because he values the challenge it
    presents. He values the obstacles the wave puts between him and his
    goal of riding the wave to the beach. Why? Because it is those very
    obstacles, the size and churning power of the wave, which <b>draw from
    the surfer his greatest effort.</b> (120)
  </p>
</blockquote>

<blockquote>
  <p>
    When it comes to overcoming obstacles, there are three kinds of
    people. The first kind sees most obstacles as insurmountable and
    walks away. The second kind sees an obstacle and says, I can
    overcome it, and starts to dig under, climb over, or blast through
    it. The third type of person, before deciding to overcome to the
    obstacle, tries to find a viewpoint where <b>what is on the other
    side</b> of the obstacle can be seen. Then, only if the reward is
    worth the effort, does he attempt to overcome the obstacle. (123)
  </p>
</blockquote>

<blockquote>
  <p>
    The problem with "managing stress" is that you tend to believe it
    is inevitable. There has to be the stress for you to manage. I've
    noticed that Self 1 tends to thrive when it is fought. (127)
  </p>
</blockquote>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/04/15/the-inner-game-of-tennis/</guid>
                <description>
                    
                    Great insight into overcoming mental hurdles to perform better both in pressure and non-pressure situations. Your brain should be an asset not a liability. Good stuff.
                    
                </description>
                <pubDate>Sun, 15 Apr 2018 05:48:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>The Social Skills Guidebook</title>
                <link>http://tigerthinks.com/2018/04/14/the-social-skills-guidebook/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: Grab bag of tips, advice, walkthroughs on how to navigate
social interactions and make friends. I was looking for a deeper level
of content on the human psyche, but this was mostly common sense.</p>

<h2 id="notes">Notes</h2>

<ul>
  <li>I guess my social skills are better than I thought? This book is more
for those whose lack of social skills severely affects their lives, or
maybe even lie on the autism spectrum. Most of the advice is pretty
common sense to me, which I suppose is a good thing.</li>
  <li>For the things I did struggle with, it was nice to see them put into
words. The author does a good job of presenting things simply and
nonjudgmentally.</li>
  <li>Didn’t get into deeper stuff (negotiations, etc.) that I hoped it
would</li>
  <li>Get over counterproductive thoughts:
    <ul>
      <li>Step 1: <strong>Identify</strong> your counterproductive thoughts and beliefs.</li>
      <li>Step 2: Critically <strong>examine</strong> your counterproductive thoughts and
beliefs.</li>
      <li>Step 3: Come up with more realistic, balanced <strong>alternatives</strong> for your
counterproductive thoughts and beliefs.</li>
      <li>Step 4: Continually <strong>question</strong> your counterproductive thoughts and
beliefs.</li>
    </ul>
  </li>
  <li>Goals for initial conversation:
    <ul>
      <li>Goal 1: have an interaction that’s <strong>rewarding</strong> for everyone involved</li>
      <li>Goal 2: <strong>Learn</strong> about the other person and try to find common ground</li>
      <li>Goal 3: <strong>Share</strong> things about yourself with the other person</li>
    </ul>
  </li>
  <li>Ending conversations:
    <ul>
      <li>Wrap it up without any window dressing: “I gotta run. Good talking
to you.”</li>
      <li>“Anyway, I’ll let you get back to it…”</li>
      <li>Use a reason for why you have to leave the conversation</li>
    </ul>
  </li>
  <li>Forming relationships, a formula:
    <ul>
      <li>Find some potential friends</li>
      <li>Make plans with those potential friends to hang out</li>
      <li>Once you have some budding friendships, gradually take those
relationships to a deeper level</li>
      <li>Repeat the above steps until you’ve made as many friends as you’d
like</li>
    </ul>
  </li>
</ul>

<h2 id="snippets">Snippets</h2>

<blockquote>
  <p>
    Disqualifying the positive is when you dismiss positive events for
    no real reason, probably while being all too eager to accept the
    negative ones. (54)
  </p>
</blockquote>

<blockquote>
  <p>
    People often respect someone who has the guts to go for what they
    want, even if they're rejected. (65)
  </p>
</blockquote>

<blockquote>
  <p>
    You'll never stop having undesirable thoughts, but with practice you
    can get better at not reacting to them. (70)
  </p>
</blockquote>

<blockquote>
  <p>
    The most effective way to face a fear is to gradually expose
    yourself to it; this is called exposure therapy. (87)
  </p>
</blockquote>

<blockquote>
  <p>
    People tend to see attractive, put-together individuals as having
    more appealing personalities. It's a mental bias called the **halo
    effect**. (240)
  </p>
</blockquote>

<blockquote>
  <p>
    State what you want, and then keep repeating it if they argue
    against you. It won't guarantee they'll give you what you're asking
    for because there's no way to perfectly control other people, but
    at least from your end, you won't let yourself get pulled off
    course. (263)
  </p>
</blockquote>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/04/14/the-social-skills-guidebook/</guid>
                <description>
                    
                    Mostly common sense advice on how to navigate social situations. Honestly reassured me about my own social skills more than anything else.
                    
                </description>
                <pubDate>Sat, 14 Apr 2018 08:39:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>The Surrender Experiment</title>
                <link>http://tigerthinks.com/2018/04/14/the-surrender-experiment/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: The “flow of events” in Michael’s life, and how it was impacted
by his spiritual journey: from living alone in the woods, to success as
a software entrepreneur, to an FBI raid and trial. Fantastic,
well-written story but just wasn’t enough to get me past my (admittedly
deep-seated) initial skepticism.</p>

<h2 id="notes">Notes</h2>

<ul>
  <li>Soo…Singer credits all of his wild success and happiness to this
concept of <strong>“surrender” – giving up control to life to see where its
flow leads.</strong></li>
  <li>I’m a pretty rational, logical person so this premise automatically
raises from red flags for me. While Singer’s story is fantastic, this
one case study does little to sway my own worldview.
    <ul>
      <li>Clarify – there is certainly merit to not getting caught up in
little (or even big) things, but I don’t see completely ceding
control as the optimal way there. Just don’t worry about things you
can’t control and I think that’s a good place to be.</li>
    </ul>
  </li>
  <li>I felt like many of the examples of “surrender” weren’t exactly that
wild…they <strong>could be reframed less dramatically</strong> as “going out of my
comfort zone for the purposes of growth”.</li>
  <li>I do see the merit in meditation/yoga to clear the mind. I’ve dabbled
in it a bit lately and have noticed an improvement in my thinking. To
me, the <strong>power of clarity of thought</strong> is the more important takeaway
from this book. This leads to an easier life.</li>
  <li>Are my <strong>personal preferences a net negative or a net positive</strong>? Hmm,
something I hadn’t considered before.</li>
</ul>

<h2 id="snippets">Snippets</h2>

<blockquote>
  <p>
    It's as though we actually believe that the world around us is
    supposed to manifest in accordance to our own likes and dislikes
    [...] this is an extremely difficult way to live, and it is the
    reason we feel that we are always struggling with life. (4)
  </p>
</blockquote>

<blockquote>
  <p>
    It was overwhelming at times, but I never lost the perspective of
    watching a voice talking inside. It was obvious it wasn't me; it was
    something I was watching. (12)
  </p>
</blockquote>

<blockquote>
  <p>
    The sounds were out there, but they seemed so far away from where I
    was seated inside. A **moat of thick peace** allowed nothing to reach
    the citadel of my elevated state. (21)
  </p>
</blockquote>

<blockquote>
  <p>
    I knew where thoughts came from, but where did inspiration come
    from? [...] It came spontaneously, in total silence, with no effort
    or commotion. (36)
  </p>
</blockquote>

<blockquote>
  <p>
    [...] the abandonment of reason that belongs only to young hippies
    and crazy people. (42)
  </p>
</blockquote>

<blockquote>
  <p>
    I had not done these things -- they had happened to me. In fact, if
    I had not let go of my initial mental resistance, none of them could
    have happened. (54)
  </p>
</blockquote>

<blockquote>
  <p>
    First, you let go of the personal reactions of like and dislike that
    form inside your mind and heart; and second, with the resultant
    sense of clarity, you simply **look** to see what is being asked of you
    by the situation unfolding in front of you. (64)
  </p>
</blockquote>

<blockquote>
  <p>
    I clearly remember granting her request solely because the voice in
    my head was so resistant to it. (67)
  </p>
</blockquote>

<blockquote>
  <p>
    There was the logical, thought-driven mind that links together what
    we already know into complex patterns of thought [...] Then there
    was the intuitive, inspiration-driven mind that can look at a
    problem and instantly see a creative solution. (150)
  </p>
</blockquote>

<blockquote>
  <p>
    Since I had absolutely no idea what was going on, thinking about it
    wasn't going to help. (221) [This one doesn't make much sense to me]
  </p>
</blockquote>

<h2 id="summary">Summary</h2>

<ul>
  <li>In his twenties, Michael has a spiritual awakening as he travels after
college trying to figure out what he wants to do in his life</li>
  <li>He settles on this realization of “surrender”, giving himself up to
the flow of life.</li>
  <li>He buys a plot of land in the woods and lives a hermit lifestyle
meditating and attending gatherings of spiritual leaders</li>
  <li>To support himself, he starts a construction company with what he’s
learned by building on his land.</li>
  <li>By surrendering and letting life dictate his actions, his construction
company becomes wildly successful.</li>
  <li>He discovers computer programming and also starts Medical Manager,
which turns into $300-million-a-year software company with at one
point, more than 300 employees.</li>
  <li>Interrupting this wild success is an FBI investigation into massive
fraud at his company. After a long, public trial Michael is found not
guilty.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/04/14/the-surrender-experiment/</guid>
                <description>
                    
                    A memoir about finding enlightenment through Buddhist meditation, and how that brought fortune to the other areas in the author's life. Well-told, but I wasn't able to fully get past my initial skepticism.
                    
                </description>
                <pubDate>Sat, 14 Apr 2018 07:52:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>The Art of Racing in the Rain</title>
                <link>http://tigerthinks.com/2018/04/13/the-art-of-racing-in-the-rain/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: Enzo the dog tells the story of his owner Danny: Danny’s career
as a racecar driver, his marriage to wife Eve, Eve’s battle with and
eventual loss to cancer, and the subsequent custody battle for their
daughter Zoe. Solid but unspectacular.</p>

<h2 id="notes">Notes</h2>

<ul>
  <li>This book was fine. Nothing too special, but a decent story from an
interesting perspective.</li>
  <li>None of the characters were super relatable
to me (married couple, little kid, etc.) but I definitely enjoyed the
little moments between Enzo and Danny.</li>
  <li>Novelty of having a dog narrator wore off after awhile. Enzo was
overly philosophical for my taste. The off-hand comments about silly
things humans do were my favorite.</li>
  <li>Wholesome themes: <strong>family, loyalty, love</strong>. Dogs are a great medium</li>
  <li>to
express these through :smile:</li>
  <li>Am I allowed to say that the themes and storyline were…
inconsequential? Never really got a sense of magnitude or urgency from
the book. Could probably predict the outcome from the beginning. Maybe
I’m just a terrible person. Hard to juxtapose with The Nightingale,
which I read immediately after.</li>
</ul>

<h2 id="snippets">Snippets</h2>

<blockquote>
  <p>
    Much to my dismay, my tongue was designed long and flat and loose,
    and therefore, is a horribly ineffective tool [...] for making
    clever and complicated polysyllabic sounds that can be linked
    together to form sentences. (1)
  </p>
</blockquote>

<blockquote>
  <p>
    People and their rituals. They cling to things so hard sometimes. (8)
  </p>
</blockquote>

<blockquote>
  <p>
    <b>That which we manifest is before us</b>; we are the creators of our own
    destiny. (41)
  </p>
</blockquote>

<blockquote>
  <p>
    Hospital parking lot, with its very black blacktop, warm like a
    sweater just removed, and its very white white lines painted with
    surgical care (100)
  </p>
</blockquote>

<blockquote>
  <p>
    Mute by design, I have been able to study the art of rhetoric
    unfettered by ego and self-interest [...] The true hero is flawed.
    The true test of a champion is not whether he can triumph, but
    whether he can <b>overcome obstacles</b> in order to triumph. (112)
  </p>
</blockquote>

<blockquote>
  <p>
    That which is around me does not affect my mood; my mood affects
    that which is around me. (198)
  </p>
</blockquote>

<blockquote>
  <p>
    What he offered me is not for me to keep, but for me to give to
    another. That is why I feel very fortunate that I am able to offer
    my hand to you. (305)
  </p>
</blockquote>

<h2 id="summary">Summary</h2>

<ul>
  <li>Enzo the philosophical dog adores his human Denny. Denny races cars,
and by proxy Enzo knows all about driving</li>
  <li>Danny gets married to a woman named Eve and they have a daughter named
Zoe. Enzo must learn to share Danny with these new humans, but they
come to an understanding about it</li>
  <li>Eve gets cancer. Enzo can sense it, but as a dog he is powerless to
help or alert anybody who can help.</li>
  <li>Eve dies and her parents sue for custody of Zoe, citing the fact that
Danny has an unstable career that (thus far) has not produced enough
money to support Zoe adequately.</li>
  <li>Enzo must support Denny through this entire ordeal. Eve’s parents try
to pin a bogus sexual assault case on Denny. Eventually the entire
thing gets resolved and Denny gets custody of Zoe.</li>
  <li>A Ferrari executive sympathizes with Denny’s situation and respects
how he handled it. He offers Denny a job, Denny’s career as a
driver takes off, and he is able to live happily with Zoe.</li>
  <li>Enzo eventually dies of old age, but the end of the book hints that he
is reincarnated as a human like he always believed. He meets Danny, by
then a famous racecar driver, and passes along a shared catchphrase.
Wholesome :)</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/04/13/the-art-of-racing-in-the-rain/</guid>
                <description>
                    
                    The trials of a racecar driver named Danny, told from the perspective of his dog Enzo. Fine story, just wasn't super feeling it.
                    
                </description>
                <pubDate>Fri, 13 Apr 2018 18:39:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>The Nightingale</title>
                <link>http://tigerthinks.com/2018/04/12/the-nightingale/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: Vianne and Isabelle are sisters who lost their mother young,
have an absentee father, and have never really gotten along with each
other. Vianne, elder by a decade, is quiet and homely, while Isabelle is
attractive, brash, rebellious, and “unladylike”. Then WWII comes, all of
the men go off to war, the Germans take over France, and they are left
to fend for themselves. Insight into the “women’s war” that I hadn’t
been exposed to before. Great characters and story. Definitely stuck
with me.</p>

<h2 id="notes">Notes</h2>

<blockquote>
  <p>
    <b>In love we find out who we want to be; in war we find out who we are.</b>
  </p>
  <footer><cite>p. 20</cite></footer>
</blockquote>

<ul>
  <li>Great story. Gives me an appreciation for the side of war that doesn’t
normally get attention</li>
  <li>What would I do in their situation? I relate more to Vianne for sure.
Isabelle is super badass but in wartime I think I would have to skew
towards protecting myself and my family.</li>
  <li>Isabelle being “more than a pretty face” is a relief after she first
met Gaetan and I thought it was turning into a romance novel</li>
  <li>Haunting, trauma, very raw, visceral emotions for the entire cast of
characters. Tough.</li>
</ul>

<h2 id="snippets">Snippets</h2>

<blockquote>
  <p>Roses tumbled like laughter</p>
</blockquote>

<blockquote>
  <p>
    "How terrible," Isabelle said in a voice as sweet and bitter as
    burned caramel.
  </p>
</blockquote>

<blockquote>
  <p>
    Vianne felt Isabelle's absence as keenly as she'd previously felt
    her presence.
  </p>
</blockquote>

<blockquote>
  <p>
    Maybe she had imagined that memory, constructed it from the threads
    of her own need and wrapped it tightly around her shoulders.
  </p>
</blockquote>

<blockquote>
  <p>
    She knew now that <b>no one could be neutral</b> - not any more- and as
    afraid as she was of risking Sophie's life, she was suddenly more
    afraid of letting her daughter grow up in a world where good people
    did nothing to stop evil, where a good woman could turn her back on
    a friend in need.
  </p>
</blockquote>

<blockquote>
  <p>
    How could she ask Mother Superior to take this risk? ...How could
    she not?
  </p>
</blockquote>

<blockquote>
  <p>
    These days, Paris was a woman screaming.
  </p>
</blockquote>

<blockquote>
  <p>
    She saw her own childhood as an adult, from far away, with the
    wisdom this war had given her. Battle had broken her father; she had
    always known that. Her maman had said it repeatedly, but now Vianne
    understood. It had _broken_ him.
  </p>
</blockquote>

<blockquote>
  <p>
    It was the beginning and end of everything, the foundation and the
    ceiling and the air in between. It didn't matter that she was broken
    and ugly and sick. He loved her and she loved him. All her life she
    had waited - longed for - people to love her, but now she saw what
    really mattered. She had known love, been blessed by it.
  </p>
</blockquote>

<blockquote>
  <p>
    "Men tell stories," I say. It is the truest, simplest answer to his
    question. "Women get on with it."
  </p>
</blockquote>

<p><br /></p>

<p><img src="/images/books/the-nightingale-2.jpg" alt="book" /></p>

<h2 id="summary">Summary</h2>

<ul>
  <li>Vianne is in a town called Carriveau with her husband Antoine,
daughter Sophie, best friend Rachel (who is Jewish), and Rachel’s
children Susan and Ari.</li>
  <li>Isabelle gets kicked out of school and goes to Paris to live with
their father Julien. She is forced to evacuate when the Germans invade
France. She flees to Carriveau to live with Vianne. She meets a man
named Gaetan who will later be important.</li>
  <li>In Carriveau, Vianne tries to lay low. A German named Beck is assigned
to live at her house.</li>
  <li>Isabelle joins the resistance, starting by distributing anti-Nazi
pamphelets.</li>
  <li>The Germans make life miserable in Carriveau: not enough food,
clothing, anything. Vianne gets fired from her job as a teacher.</li>
  <li>Isabelle, not wanting to endanger her sister’s family, takes an
opportunity to help the resistance in Paris.
    <ul>
      <li>They put together a risky plan to get downed Allied airmen across
the border to Spain. She leads these escapes, becomes a very
important part of the resistance, and takes the codename Nightingale
(after their last name, Rossignol).</li>
    </ul>
  </li>
  <li>The Germans begin deporting Jews to concentration camps. Isabelle
tries to help Rachel escape but they fail and Rachel’s daughter Susan
is shot and killed. Rachel gets deported and Isabelle must pretend
Rachel’s son Ari is her own to save his life.</li>
  <li>Everything collides when Isabelle is in Carriveau and has nowhere to
hide a downed bomber so she puts him in Vianne’s barn. Beck finds him,
and Vianne must kill Beck to save Isabelle.</li>
  <li>Isabelle is wounded. She goes away with Gaetan, who is also an
important member of the resistance. They are in love.</li>
  <li>Vianne begins doing her part in the resistance by putting Jewish
children in the Catholic orphanage so they won’t be deported.</li>
  <li>A new German officer replaces Beck. He is extremely cruel to Vianne,
raping and impregnating her. Vianne keeps up the lie that the child is
her husband’s for the rest of her life.</li>
  <li>The Nazis are searching hard for the Nightingale since “he” is causing
so much trouble for them. Isabelle is finally captured and tortured.
To rescue her, her father Julien claims he is the Nightingale and is
subsequently shot and killed.</li>
  <li>Isabelle is sent to a concentration camp where she bends but does not
break, just barely surviving to the end of the war.</li>
  <li>Isabelle and Antoine both return home to Vianne. Isabelle, weakened by
the camps, dies shortly after, but not before she is able to see
Gaetan one more time.</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/04/12/the-nightingale/</guid>
                <description>
                    
                    The moving story of two French sisters during World War II.
                    
                </description>
                <pubDate>Thu, 12 Apr 2018 18:18:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>The 5 Elements of Effective Thinking</title>
                <link>http://tigerthinks.com/2018/04/09/the-5-elements-of-effective-thinking/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>TL;DR</em>: a set of 5 concepts to help guide thinking. Mostly common
sense, but distilled well and with a surprisingly helpful mnemonic.</p>

<h2 id="notes">Notes</h2>

<ul>
  <li>5 elements of effective thinking can be modeled as the four “elements”
from classical thought
    <ul>
      <li><strong>Earth</strong>: strive for rock-solid understanding
        <ul>
          <li>“The simple and familiar hold the secrets of the complex and
unknown. The depth with which you master the basics influences how
well you understand everything you learn after that” (p. 20)</li>
          <li>Clear the clutter:
            <ul>
              <li>Identify and ignore all distracting features</li>
              <li>Analyze what’s left, apply those insights to the larger whole</li>
            </ul>
          </li>
          <li>Technique: “remove the adjective”. Example: before, B&amp;W photos
were just “photos”. If you think about the adjective “black and
white”, it becomes clear that color is missing</li>
        </ul>
      </li>
      <li><strong>Fire</strong>: fail and learn from those missteps
        <ul>
          <li>Fail often, fail early</li>
          <li>When a mistake occurs:
            <ul>
              <li>Let it lead you to a better attempt (Edison/lightbulb)</li>
              <li>Ask whether it is a correct answer to a different question
(3M/failed scotch tape/post-its)</li>
            </ul>
          </li>
        </ul>
      </li>
      <li><strong>Air</strong>: constantly create and ask challenging questions
        <ul>
          <li>“What would someone ask me in order to determine whether I really
understand these ideas?”</li>
          <li>Make it a habit to approach everything that is happening and
construct questions about:
            <ul>
              <li>What’s missing</li>
              <li>What’s assumed</li>
              <li>What might be extended</li>
              <li>What’s vague and unclear</li>
            </ul>
          </li>
        </ul>
      </li>
      <li><strong>Water</strong>: consciously consider the flow of ideas
        <ul>
          <li>“Solutions to little problems generate solutions to great
problems” (p. 96)</li>
          <li>Current solutions are not summits, they are points on the lower
slope of a much higher peak</li>
        </ul>
      </li>
      <li>“Quintessential element” (underlies everything): embrace change and
the process of growing
        <ul>
          <li><em>habits, habits, habits</em></li>
          <li>Most people don’t even come close to their ceiling</li>
          <li>Aim: you are no longer fighting yourself to behave differently.
Instead, you are now a person who behaves that way.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>“Education is what survives when what has been learned has been
forgotten” - B.F. Skinner</li>
  <li>Brilliant people aren’t a special breed–they just use their minds
differently</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/04/09/the-5-elements-of-effective-thinking/</guid>
                <description>
                    
                    A case for the five parts of learning and thinking critically: deep understanding, failure, questions, the flow of idea, and change. Plus a helpful mnemonic!
                    
                </description>
                <pubDate>Mon, 09 Apr 2018 14:18:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>MUST READ: Clueless Individual Attempts to Explain Basic PyMC3 Model. You Won’t Believe What Happens Next.</title>
                <link>http://tigerthinks.com/2018/03/11/clueless-individual-basic-pymc3-model/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="medium"><a href="https://medium.com/paper-club/must-read-clueless-individual-attempts-to-explain-basic-pymc3-model-9859d89d5468">Medium</a></h2>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/03/11/clueless-individual-basic-pymc3-model/</guid>
                <description>
                    
                    Walking through a PyMC3 Model with Tiger.
                    
                </description>
                <pubDate>Sun, 11 Mar 2018 00:00:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Will Storr on why you are not yourself</title>
                <link>http://tigerthinks.com/2018/01/15/will-storr/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<ul>
  <li>Storr dives deep into the cultural, evolutionary, and psychological
construction of that thing that feels to us like our self, but is not actually
ours, and is not a single thing.</li>
  <li>We used to compare to 150 people in the tribe. With social media we compare to
everybody everywhere</li>
  <li>Humans are very tribal</li>
  <li>In groups, out groups, irrelevant groups</li>
  <li>Californians who use Macs, New Yorkers who use Windows, everyone else</li>
  <li>How do we decide when a group is in or out?</li>
  <li>Outgroups are threats to status</li>
  <li>Perfectionism is the dark string that links stuff like suicide</li>
  <li>People think they see everything with full clarity but that’s impossible or
they’d be Jesus. This is what bias is. They go through their beliefs and none
of them seem wrong. You can’t pull yourself out of that story because that
story is reality as we experience it</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2018/01/15/will-storr/</guid>
                <description>
                    
                    Nothing we own today is ours. This is sobering, but we can fix it.
                    
                </description>
                <pubDate>Mon, 15 Jan 2018 00:01:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>AI Index Thoughts</title>
                <link>http://tigerthinks.com/2017/12/13/ai-index-thoughts/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="medium"><a href="https://medium.com/paper-club/ai-index-thoughts-d745c0159205">Medium</a></h2>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2017/12/13/ai-index-thoughts/</guid>
                <description>
                    
                    Thoughts on the AI Index
                    
                </description>
                <pubDate>Wed, 13 Dec 2017 10:00:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>AI Index Index</title>
                <link>http://tigerthinks.com/2017/12/13/ai-index-index/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="medium"><a href="https://medium.com/paper-club/ai-index-index-ae0e3a8083d8">Medium</a></h2>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2017/12/13/ai-index-index/</guid>
                <description>
                    
                    Summarizing a summary of the state of AI
                    
                </description>
                <pubDate>Wed, 13 Dec 2017 10:00:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>From Research To Practice</title>
                <link>http://tigerthinks.com/2017/11/11/from-research-to-practice/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="medium"><a href="https://medium.com/paper-club/language-modeling-survey-333077e43dd9">Medium</a></h2>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2017/11/11/from-research-to-practice/</guid>
                <description>
                    
                    Notes on Best Practices for Applying Deep Learning to Novel Applications
                    
                </description>
                <pubDate>Sat, 11 Nov 2017 10:00:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Language Modeling Survey</title>
                <link>http://tigerthinks.com/2017/08/31/language-modeling-survey/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="medium"><a href="https://medium.com/paper-club/language-modeling-survey-333077e43dd9">Medium</a></h2>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2017/08/31/language-modeling-survey/</guid>
                <description>
                    
                    Notes on Exploring the Limits of Language Modeling
                    
                </description>
                <pubDate>Thu, 31 Aug 2017 10:00:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Remarques sur la traduction de la machine neurale en apprenant ensemble à aligner et à traduire</title>
                <link>http://tigerthinks.com/2017/08/23/neural-machine-translation/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="medium"><a href="https://medium.com/paper-club/remarques-sur-la-traduction-de-la-machine-neurale-en-apprenant-ensemble-%C3%A0-aligner-et-%C3%A0-traduire-cd23004cf207">Medium</a></h2>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2017/08/23/neural-machine-translation/</guid>
                <description>
                    
                    Notes on Neural Machine Translation by Jointly Learning to Align and Translate
                    
                </description>
                <pubDate>Wed, 23 Aug 2017 10:00:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Paper Notes Template</title>
                <link>http://tigerthinks.com/2017/08/10/paper-notes-template/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="medium"><a href="https://medium.com/paper-club/paper-notes-template-1e4dcc631606">Medium</a></h2>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2017/08/10/paper-notes-template/</guid>
                <description>
                    
                    How we Read Papers
                    
                </description>
                <pubDate>Thu, 10 Aug 2017 10:00:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>fastText</title>
                <link>http://tigerthinks.com/2017/08/10/fasttext/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="medium"><a href="https://medium.com/paper-club/fasttext-bc181f50a452">Medium</a></h2>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2017/08/10/fasttext/</guid>
                <description>
                    
                    Notes on Bag of Tricks for Efficient Text Classification
                    
                </description>
                <pubDate>Thu, 10 Aug 2017 10:00:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>GRUs vs. LSTMs</title>
                <link>http://tigerthinks.com/2017/08/10/grus-vs-lstms/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="medium"><a href="https://medium.com/paper-club/grus-vs-lstms-e9d8e2484848">Medium</a></h2>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2017/08/10/grus-vs-lstms/</guid>
                <description>
                    
                    Notes on Empirical Evaluation of Gated Recurrent Neural Networks on Sequence Modeling
                    
                </description>
                <pubDate>Thu, 10 Aug 2017 10:00:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>It’s Worth It: Leaving a Full-time Software Development Job at 18 to Learn Computer Science</title>
                <link>http://tigerthinks.com/2017/05/15/its-worth-it/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>This post was also published on <a href="https://medium.com/the-mission/its-worth-it-a2cd7125ea98">Medium</a></em></p>

<p>In high school, I assumed I would go to a university. I grew up in a family that
valued education, so even after I graduated and started a gap year, I wasn’t
seriously considering any alternatives. I planned on studying computer science
in college — as a self-taught web programmer who didn’t know much about the
underlying concepts, I thought a degree from a good school would help my career.</p>

<p><img src="https://cdn-images-1.medium.com/max/1200/0*rsvsR_eE6pcv2NYF." alt="" />
<span class="figcaption_hack">Pictured: a visionary technologist poses with some guy who was early enough on
Twitter to get the handle @jack</span></p>

<p>That plan was scrapped when I <a href="https://qz.com/575810/the-life-of-a-17-year-old-full-time-software-engineer-in-san-francisco/">got a full-time programming job at Braintree
</a>during
my gap year. At first, I felt way out of my depth. Sooner or later, I’d be
exposed, and I’d be forced to head back to school; shame on me for thinking I
could take a shortcut!</p>

<p>But as time went on, I got better at my job. Eventually, I felt like I more or
less “belonged” as a productive junior developer, which once seemed impossible
given my lack of credentials. I was familiar with the tools and the team, and I
was working on increasingly challenging problems. I almost deluded myself into
thinking I was figuring everything out, so it was hard to imagine gaining
anything from a university computer science education that I couldn’t learn on
the job.</p>

<p>Then I met Oz and Myles.</p>

<h3 id="why-learn-computer-science">Why learn computer science?</h3>

<p>They pitched me their mission: teach computer science to folks who have
practical programming knowledge but are missing fundamentals.</p>

<p>I thought it might work for others, but I was doing fine at my job and didn’t
see how discussing compiler theory would make me any better at it. But over the
next few weeks, I realized something: maybe I wasn’t noticing computer science
concepts around me because I wasn’t equipped to participate at that level of
discourse.</p>

<p>When my team decided to use Apache Kafka to pass messages between two
applications, I thought, “Sounds great, what Ruby methods do I use?” instead of
“Is a real-time fault-tolerant distributed streaming platform the best choice
here?” If I had a valid-looking ORM statement but the database query was still
slow, my solution was to pull up the query plan and hand it off to a senior
engineer.And if I couldn’t configure something, I rolled up my sleeves…and
opened Slack to message the last editor of the Wiki page I was following.</p>

<p><img src="https://cdn-images-1.medium.com/max/1600/0*a_qkQeMxe02oXXLh." alt="" />
<span class="figcaption_hack">Teachers performing a teaching</span></p>

<p>Was this really holding me back day-to-day? Maybe, maybe not. But I was afraid
of the idea that I’d eventually plateau: I might know Rails stone cold, but
where would I go from there? I wasn’t sure how to reach higher levels of
abstraction, where I could pick the right tool for a problem or quickly
conceptualize complex systems. Lower levels of abstraction, like optimizing
database queries beyond “cross your fingers and add an index!”, were equally out
of reach. In the long run, this seemed both unacceptable and unsustainable.</p>

<h3 id="taking-the-plunge">Taking the Plunge</h3>

<p>Now I had the vague idea that “learning computer science” was a “good” and
“worthwhile” thing to do. Okay. I was still 17 at the time, so my first instinct
was to give it the ol’ college try. But then I thought: does it have to take
four years, and are all those general ed classes mandatory, and is a lecture
hall with hundreds of other students the best environment for me to learn this
material?</p>

<p>Well, I’m pretty self-motivated, so maybe online courses are an option. Let me
just go on Coursera and…whoa, that’s a lot of choices. Hmm, I mostly see
“beginner” and “advanced” courses, but where should someone with working web
development knowledge start? Did I need to know operating systems before I
learned networking? Could I learn about distributed systems without doing
computer architecture first?</p>

<p>I settled on trying an Algorithms class. I got through the first week, found
myself stuck on a problem in the second week, and stopped there because…well,
was this really providing value to my company’s users? That’s what I told
myself, anyways. Some superheroes might be able to <a href="https://www.scotthyoung.com/blog/myprojects/mit-challenge-2/">power through on their
own</a>, but I felt
like I’d have a better time in a setting with clear focus, great teachers, and
bright peers.</p>

<h3 id="study-sleep-">Study, sleep, 🔁</h3>

<p>So, to make a short story long, that’s how I ended up at
<a href="https://www.bradfieldcs.com/">Bradfield</a>. I committed to studying computer
science full-time from this past January through March. The goal was to learn
enough to be indistinguishable from somebody with a four-year CS degree, at
least so far as my future colleagues could tell.</p>

<p>(I want to quickly make a distinction between programming and computer science,
in case it sounds like I was leaving my job to learn how to do my job. As
<a href="https://softwareengineering.stackexchange.com/a/137106">user4501 on StackOverflow puts
it</a>, “computer science
is the study of what computers (can) do; programming is the practice of making
computers do things”.While they are related, it’s possible to program and get
paid for it without knowing computer science.)</p>

<p>I took all nine classes offered, in order:</p>

<ul>
  <li>Computer Architecture</li>
  <li>Languages and Compilers</li>
  <li>Algorithms and Data Structures</li>
  <li>Operating Systems</li>
  <li>Databases</li>
  <li>Computer Networking</li>
  <li>Distributed Systems</li>
  <li>Program Interfaces</li>
  <li>Discrete Math</li>
</ul>

<p><img src="https://cdn-images-1.medium.com/max/1200/0*u7-ns2DpcD4XEm_2." alt="" />
<span class="figcaption_hack">Rare candid picture of the craftsman honing his trade</span></p>

<p>This was divided into three classes every three weeks. Classes were every
weekday evening and weekends during the day, to accommodate students with
full-time jobs. I spent most of my days reviewing previous sessions and
preparing for future sessions. It added up to ~50 hours per week, split evenly
between class and studying. The material mirrored university courses; we used
textbooks and online videos published by schools like Berkeley and Stanford. In
fact, Oz and Myles have graciously created <a href="https://www.teachyourselfcs.com/">a
site</a> with more or less the same curriculum I
went through.</p>

<p>Class was generally split in half, starting with a concept-driven discussion led
by the instructor. Since we had already read about these concepts, this was less
a lecture and more a time to fill in gaps and go over the confusing stuff. The
second half was spent applying those concepts. In one class, for example, we
discussed what a database’s query planner does, and then analyzed SQL statements
and their query plans with a live PostgreSQL database.</p>

<p>In addition to class time, I had open lines of communication with the teachers,
both in person and on Slack. I usedthis for things like asking for one-on-one
time to solidify concepts I had trouble grasping, or discussing how the
different classes tied together.</p>

<p><img src="https://cdn-images-1.medium.com/max/1600/0*8MoZz6vyaUMmMdbh." alt="" />
<span class="figcaption_hack">Whiteboarding a finite state machine that describes a reliable transport layer
network protocol</span></p>

<h3 id="reflections">Reflections</h3>

<p>Here are some thoughts on my experience:</p>

<ul>
  <li>All of my classmates were sharp, motivated, excellent people. Learning hard
things with them was a pleasure.</li>
  <li>Most were professional web developers, so we were able to anchor new concepts to
existing practical knowledge. Thoughts like “wow, I wish I had known this when
designing/developing/debugging project ABC” were commonly echoed during class.
This also meant that we were able to jump quickly into deeper subject matter,
without spending time on things like development environments or syntax.</li>
  <li>Since a lot of the coursework is theory-heavy, I was worried about getting bored
or losing motivation like I had with the Coursera course. Oz and Myles are
engaging and responsive teachers, and they have created an environment with
self-motivated students who are all eager to learn. There were lulls, and some
topics were more interesting than others, but I never felt checked out or
unengaged. They deserve a lot of credit for that.</li>
  <li>This was Bradfield’s first time using structured classes, and some parts were
rough around the edges. Some in-class exercises ran into unfortunate blockers
that took up class time. Some classes dragged and could have been covered in an
hour and a half, while others felt like they needed five hours. But these
weren’t deal-breakers, and Oz and Myles are so responsive that they’ve probably
ironed most of this out by now.</li>
</ul>

<p><img src="https://cdn-images-1.medium.com/max/1200/0*UeqH_03x1gZCx8kQ." alt="" />
<span class="figcaption_hack">Some notes from the operating systems class</span></p>

<p>The most important takeaways for me were new mental models and increased
confidence in approaching difficult subjects.</p>

<p>These mental models unlock new abilities and better ways of doing common things.
For example, I can now start on even footing in an evaluation of a distributed
system’s consistency, reliability, and availability. While I frustrated myself
trying to memorize jQuery’s library of function calls to navigate the DOM
before, now I can view the DOM as a tree in my head, and recognize that moving
around it is just like traversing any other tree. These kinds of
pattern-matching and critical assessment skills are universally useful and
unlikely to go out of style.</p>

<p>The course list above was very intimidating at first. Discrete math?! I hadn’t
done math of any kind since high school, and definitely none of the discrete
variety. Each course title was scary in its own way and, as a whole, the
subjects seemed like they were for people smarter than me.</p>

<p>And the curriculum <em>did</em> turn out to be extremely challenging. But it was not
impossible! And that was ultimately comforting. My brain dragged its feet as it
stretched in new ways, but eventually pieces started to fall together, and I
could feel myself learning! Oz even made that math class bearable. Now that I’m
on the other side of these “unreachable” things, I’m no longer afraid of
situations like staring at a 1000-page computer networking textbook without any
knowledge of computer networking. Call me a lunatic, but it was actually kind of
fun.</p>

<p><img src="https://cdn-images-1.medium.com/max/1600/1*wxLvhlSoaRdnJc5D5V61pg.jpeg" alt="" />
<span class="figcaption_hack">Annotating a copy of Amazon’s DynamoDB paper</span></p>

<p>Regarding my original goal of quacking like somebody with a more formal computer
science education, the jury’s still out. My narrative is incomplete — I
obviously don’t have experience with university computer science, and I haven’t
gone back to the workforce to apply what I’ve learned in earnest. Reflecting
recently with Oz, he told me that no one really uses everything in computer
science every day. Instead, I should aim to solidify the most important
concepts, but know the fringier ones well enough to reach the “same level of
fuzziness” on them as classically trained folk — not necessarily immediate
recall, but an idea of the vocabulary and where to look for an answer. That
seems realistic to me.</p>

<p>Even though I don’t feel like an expert yet, I’m happy with what I learned in
those three months. Say I took a year off from programming without attending
Bradfield: upon returning, I would have despaired at three new Ruby releases,
six Rails updates, and 47 new Node.js versions. It would be a nightmare to get
back up to speed! If I had a similar chunk of time away from programming now, I
could take some comfort in knowing that <a href="https://www.xkcd.com/1349/">computers are just carefully organized
sand</a>, CPUs still execute assembly instructions, and
that my copy of “The C Programming Language” is still the latest version. Then I
suppose I’d buckle in, read some patch notes, and be on my way. Knowing these
fundamental concepts now will save me from infinite pain if I want to keep
programming for as long as people like Oz and Myles.</p>

<h3 id="onwards">Onwards</h3>

<p>I believe that studying computer science will greatly benefit any practicing
software developer who learned how to program without a computer science
background. While a four-year university degree has been the traditional way to
get this material, Bradfield was perfect for me, and I’m confident that my
investment will pay for itself many times over.</p>

<p>What’s next for me? I’m starting a logistics software company that you’ll hear
more about soon :). Less than a year ago, being a technical co-founder seemed
well beyond my limits. But now that I have some sturdy tools under my belt to
support any new ones, I feel well equipped for the challenge!</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2017/05/15/its-worth-it/</guid>
                <description>
                    
                    This is why I left a full-time software development job to study computer science.
                    
                </description>
                <pubDate>Mon, 15 May 2017 00:00:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Operating Systems</title>
                <link>http://tigerthinks.com/2017/03/26/bradfield-operating-systems/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<h3 id="1---introduction-to-operating-systems">1 - Introduction to Operating Systems</h3>

<h4 id="ostep-ch-2">OSTEP Ch 2</h4>

<ul>
  <li>Von Neumann: fetch/decode/execute hooray</li>
  <li>Operating system is responsible for making it easy to run programs,
allowing programs to share memory, enabling programs to interact
with devices, etc.</li>
  <li>Virtualization: OS takes physical resource and transforms into virtual
form that can be shared. OS is a VM</li>
  <li>Interface OS presents to users is in the form of system calls. System
calls make up the standard library of the OS</li>
  <li>OS is also a resource manager - manages CPU, memory, disk for all teh
running programs</li>
  <li>
    <p>Three major themes: virtualization, concurrency, persistence</p>
  </li>
  <li>Virtualizing the CPU: turning a single CPU into a seemingly infinite
number of CPUs from the program’s perspective</li>
  <li>Running multiple programs raises many hard problems. OS policies try
to resolve these problems consistently (e.g. two programs want to run
at same time, which gets precedence)</li>
  <li>
    <p>Memory is also virtualized! Each process has its own private virtual
address space, OS maps it onto physical memory</p>
  </li>
  <li>Concurrency is difficult</li>
  <li>Thread: function running within the same memory space as other
functions, with more than one of them active at a time</li>
  <li>
    <p>Problems b/c fetch decode execute are not atomic</p>
  </li>
  <li>Persistence :thinking_face:</li>
  <li>Memory is volatile, we need to be able to store stuff longer. Usually
in an SSD or hard drive</li>
  <li><em>file system</em> is the software in OS that manages the disk. Job is to
store files in reliable and efficient manner</li>
  <li>Writing file to disk is very ugly, OS abstracts it in the standard
library</li>
  <li>
    <p>Lots of ways to try and make it so we can recover from crash in middle
of write</p>
  </li>
  <li>Design goals time</li>
  <li>Abstractions pls. Pick the right abstractions to create an easy to use
system</li>
  <li>Performance is also important. OS overhead should be minimal</li>
  <li>
    <p>Protection between applications, and b/t OS and applications,
important to keep computer secure. Principle of <em>isolation</em> to make
sure that processes can’t interfere in bad ways</p>
  </li>
  <li>History</li>
  <li>Good ideas accumulate over time</li>
  <li>Started with a computer operator operating the computer</li>
  <li>Syscall vs procedure call: syscall transfers control to the OS while
raising the hardware privelege level. Syscall: trap -&gt; OS trap handler
-&gt; now in kernel mode -&gt; service request -&gt; return-from-trap -&gt; home</li>
</ul>

<h4 id="xv6-ch-0-1-3-section-on-syscalls">xv6 Ch 0-1, 3 section on syscalls</h4>

<ul>
  <li>xv6 is a trimmed down version of Unix that is good for learning</li>
  <li><em>kernel</em> defined here: special program that provides services to
running programs in the OS</li>
  <li>
    <p>Shell is in user space, which shows how powerful the syscall interface
is</p>
  </li>
  <li>Processes/memory</li>
  <li>Processes consist of user-space memory (instructions, data, stack) +
pre-process state private to the kernel</li>
  <li>To share registers, kernel can save state and restore when you want to
resume a program’s execution</li>
  <li>Each process has a pid</li>
  <li>Forking a process creates a child with same memory as the parent. It
returns the child pid in the parent, and 0 in the child</li>
  <li>Running down a bunch of different syscalls rapid fire;
open/read/write, exec, etc.
    <ul>
      <li>The main loop reads the input on the command line using getcmd. Then
it calls fork, which creates a copy of the shell process. The parent
shell calls wait, while the child process runs the command. For ex-
ample, if the user had typed ‘‘echo hello’’ at the prompt, runcmd would
have been called with ‘‘echo hello’’ as the argument. runcmd (8406) runs
the actual command. For ‘‘echo hello’’, it would call exec (8426). If
exec succeeds then the child will exe- cute instructions from echo
instead of runcmd. At some point echo will call exit, which will cause
the parent to return from wait in main</li>
    </ul>
  </li>
  <li>File descriptor: small int representing kernel-managed object a
process may read from or write to
    <ul>
      <li>Get one by opening a file, creating a pipe, duplicating existing
descriptor</li>
      <li>Abstracts diffs b/t pipes, files, devices; they all look like byte
streams!</li>
      <li>0 is stdin, 1 is stdout, and 2 is stderr</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">read(fd, buf, n)</code> reads up to n bytes from descriptor fd, copies them
into buf, returns number of bytes read. Write(fd, buf, n) is similar</li>
</ul>

<h4 id="lecture">Lecture</h4>

<ul>
  <li>Tradeoffs</li>
  <li>xv6: good for teaching, but slow and limited toolchain</li>
  <li>FreeBSD: comprehensive docs, dtrace is great, big tho</li>
  <li>
    <p>macOS: see your implementations and stuff</p>
  </li>
  <li>No nice abstractions like objects n stuff</li>
  <li>Instead, bit fields and such</li>
  <li>CPU reads/writes bytes from memory, moves them around</li>
  <li>Important jobs of OS: virtualization and memory protection</li>
  <li>Seg fault is because you’re trying to access part of the stack that
you haven’t asked for before (NOT because you’re trying to access
another program’s memory, since we’re virtualized)</li>
  <li>Container: just virtualizes the disk, you can read/write to new areas
and stuff</li>
  <li>
    <p>Virtual machine: present to the OS running on top of it what looks
like real hardware and it will run on top of that hardware</p>
  </li>
  <li>Unix</li>
  <li>Unix is command line operating system</li>
  <li>Difference between Unix/Linux/Posix</li>
  <li>Multics is an early OS from Bell, used for mainframe time sharing.
Multi process stuff</li>
  <li>
    <p>Unix was a side project from Thompson/Ritchie (1969). Everyone bought in
because C was so portable, could run easily on so many machines</p>
  </li>
  <li>v6 source got distributed a bunch, but AT&amp;T didn’t like it so they had
a lawsuit out so people stopped using “their” software</li>
  <li>Berkeley people took the source code and made BSD (Berkeley Software
DIstribution). AT&amp;T took offense. But BSD had already changed a bunch
of stuff around, so they just changed the remaining AT&amp;T code and
released a new version without any AT&amp;T code</li>
  <li>Stallman at MIT did the same thing and started the GNU project. Wrote
GNU in user land and a HURD microkernel in kernel land</li>
  <li>HURD sucked though (very slow), so Linus Torvalds took Stallman’s
userland programs (cd, ls, etc.) and wrote the Linux kernel for it</li>
  <li>NeXT took FreeBSD and renamed userland Darwin and renamed kernel Mach,
then Apple acquired them so that’s the basis for MacOS</li>
  <li>POSIX standardizes so you can reduce ifdefs in your C code
    <ul>
      <li>e.g. signature of a <code class="language-plaintext highlighter-rouge">read</code> call</li>
    </ul>
  </li>
</ul>

<h3 id="2---processes-and-the-process-api">2 - Processes and the Process API</h3>

<h4 id="ostep-ch-3-6">OSTEP Ch 3-6</h4>

<h5 id="ch-4-intro-to-processes">Ch 4: Intro to Processes</h5>

<ul>
  <li>Process is a fundamental abstraction. Definition? A running program</li>
  <li>OS creates illusion that there are many CPUs by <em>virtualizing</em> the
CPU: run one process, stop and run another, etc etc. This technique is
called <em>time sharing</em>
    <ul>
      <li>Time sharing: let resource be used for a little while by one entity,
then another, then another, it can be shared by many</li>
      <li>Corollary is space-sharing, e.g. memory</li>
    </ul>
  </li>
  <li>Time sharing is a <em>mechanism</em>; mechanisms are low-level methods or
protocols that implement a piece of functionality</li>
  <li><em>Policies</em> live on top of mechanisms. Policies are software for making
decisions in the OS, e.g. scheduling</li>
  <li>
    <p>Mechanism is <em>how</em> you accomplishes something (<em>how</em> do you context
switch?), policy decides <em>which</em> is appropriate (which process should
be executed right now)</p>
  </li>
  <li><em>Process</em>: OS abstraction for running program</li>
  <li>
    <p>What’s in a process? Its machine state. Includes memory (its address
space), PC, registers, I/O information, etc.</p>
  </li>
  <li>The Process API</li>
  <li><em>create</em>: create a process</li>
  <li><em>destroy</em>: kill a process</li>
  <li><em>wait</em>: wait for process to stop</li>
  <li><em>miscellaneous control</em>: suspend and resume, etc.</li>
  <li>
    <p><em>status</em>: how u doin rn</p>
  </li>
  <li>Creation</li>
  <li>First, load program’s code and static data into memory in the
process’s address space. Usually program is on disk in executable
format
    <ul>
      <li>Generally <em>lazy</em> (only load what you need)</li>
      <li>Uses mechanisms of paging and swapping</li>
    </ul>
  </li>
  <li>Then, allocate memory for the stack and heap</li>
  <li>Other misc. initialization, e.g.  set up 0, 1, 2 file descriptors</li>
  <li>
    <p>Now you can go into the main() routine of the program dn begin
execution</p>
  </li>
  <li>What states can a process be in?</li>
  <li><em>Running</em>: it’s running on the processor</li>
  <li><em>Ready</em>: it’s ready to be run, but scheduler holding for some reason</li>
  <li><em>Blocked</em>: waiting on something else to happen first. Commonly,
waiting for i/o request to disk</li>
  <li>State transitions: from running to blocked is initiate I/O, blocked to
ready is done I/O, between running and ready is schedule/deschedule</li>
  <li>When process is blocked, CPU can run another processo</li>
  <li><em>process list</em>: all ready processes, and some metadata on what’s
currently running. Also need to know what’s blocked</li>
  <li>Each process list entry has the register context (what’s in the
registers of the stopped process) for context switching</li>
</ul>

<h5 id="ch-5-process-api">Ch 5: Process API</h5>

<ul>
  <li>
    <p>fork, exec, wait are Unix syscalls for process creation</p>
  </li>
  <li>Fork is really strange at first glance</li>
  <li>Need to do conditional logic on the return value to determine if in
child or parent</li>
  <li>Returns child pid to parent, returns 0 to child, returns -1 if fork
failed</li>
  <li>PID in Unix is the process identifier, used to name/identify the
process</li>
  <li>
    <p>Ordering is non-deterministic of whether child or parent goes first.
Need to call wait() from parent to wait for child to finish, in order
to make fork execution deterministic</p>
  </li>
  <li>exec() calls a different program (whereas fork invokes same program)</li>
  <li>Given the name of an executable, it loads code from that executable,
overwrites its current code/data segments with it, re-initializes heap
and stack, and then run that program with the passed-in args as the ARGV
of that process</li>
  <li>Does <em>not</em> create a new process; instead, transforms current program
into different program</li>
  <li>
    <p>Lampson’s Law: Get it right. Not pretty, simple, abstract, w/e. Right.</p>
  </li>
  <li>Using fork and exec to build a shell: important because shell can run
code after fork() but before exec()</li>
  <li>Redirecting output:</li>
  <li>When creating child, before calling exec(), close STDOUT, open
newfile.txt, and then anything from the program’s STDOUT will be
redirected to file. Wow. Literally close(STDOUT_FILENO) and
open(“./p4_output”)</li>
  <li>Pipes similar to redirect: one process’ output is redirected to an
in-kernel pipe, another process’ input is connected to same pipe</li>
  <li>
    <p>Lots more to learn, this is just scratching the surface</p>
  </li>
  <li>kill() kills process</li>
  <li>top/ps for analyzing current processes</li>
</ul>

<h5 id="ch-6-mechanism-limited-direct-execution">Ch 6: Mechanism: Limited Direct Execution</h5>

<ul>
  <li>
    <p>Some challenges in time sharing. Performance? Control? Security?</p>
  </li>
  <li><em>Limited Direct Execution</em></li>
  <li>Direct execution: just run program on CPU</li>
  <li>Problem with direct execution? <em>Security</em> (need process to be able to
do kernel level stuff without kernel level priveleges) and <em>context
switching</em> (how do?)</li>
  <li>Limited: put clamps on process permissions</li>
  <li><em>trap</em> instruction is what C uses to turn stuff like open() into a
syscall</li>
  <li>Introduce permissions via user mode (restricted) and kernel mode (what
the OS is in)</li>
  <li>Syscalls are interface between user mode and kernel mode</li>
  <li>Kernel code locations and jumps and stuff are configured when the CPU
boots up</li>
  <li>trap will jump into the kernel code and set permissions to kernel mode</li>
  <li>When kernel code done executing, OS calls return-from-trap, which
returns and sets privilege mode back to user</li>
  <li>Process state (PC, flags, registers) saved onto the kernel stack when
kernel code is called</li>
  <li>
    <p>How does kernel know which code is kernel code? Set up a <em>trap table</em>
at boot time, telling CPU what code to run when signals get trapped</p>
  </li>
  <li>How does the OS regain control of the CPU when a process is running,
so that it can switch between processes?</li>
  <li>Cooperative: wait for a syscall from program to take back control.
Doesn’t really work if process doesn’t cooperate. Infinite loop =
restart, oops</li>
  <li>Non-cooperative: <em>timer interrupt</em>. Timer device interrupts every X
milliseconds, and OS interrupt handler runs to see if any changes are
needed. OS tells hardware what to run during timer interrupt at boot
time. OS also must start the timer</li>
  <li>Hardware’s job to save system state before timer interrupt so it can
return from trap</li>
  <li>Context switching is basically switching the registers to those of
another process (stored in process list) and the kernel stack of the
other process</li>
  <li>Maybe come back and look at this later?</li>
  <li>
    <p>How long do context switches take? Sub-microsecond on 2-3 GHz
processors, yay</p>
  </li>
  <li>
    <p>Concurrency? What if you’re in the timer interrupt and another one
happens? Maybe disable interrupts while handling one? Put locks on
internal data structures?</p>
  </li>
  <li>Cool, so limited direct execution!</li>
  <li>Analogous to baby-proofing a room; the OS baby-proofs the CPU :)</li>
</ul>

<h4 id="xv6-ch-5">xv6 Ch 5</h4>

<ul>
  <li>Skim now (before lecture), come back and read later</li>
</ul>

<h4 id="lecture-1">Lecture</h4>

<ul>
  <li>All processes in process table also store ppid (parent process id).
First process started by OS is pid 0, which initially forks as process
1</li>
  <li>Fork shares memory and stuff and lots of stuff in the child</li>
  <li>
    <p>Daemonize: don’t kill the child when the parent dies. Assign the child
to the original process before killing the parent so that it doesn’t
kill itself</p>
  </li>
  <li>
    <p>Data Oriented Programming is how all OS programming works. Need to
increase throughput using data and by remembering how hardware
actually works</p>
  </li>
  <li>dtrace time</li>
  <li>Bryan Cantrill was not pleased with the state of debuggers - either
print debugging or step through debugging, but both of them have their
own costs</li>
</ul>

<h3 id="3---scheduling-strategies">3 - Scheduling Strategies</h3>

<h4 id="ostep-ch-7---12">OSTEP Ch 7 - 12</h4>

<h5 id="ch-7-scheduling-introduction">Ch 7: Scheduling: Introduction</h5>

<ul>
  <li>Context switching a mechanism, scheduling a policy</li>
  <li>
    <p>Q: How do we develop a framework for thinking about scheduling? What
are assumptions/metrics/approaches?</p>
  </li>
  <li><em>workload</em>: all the processes (jobs) running in system. Assumptions:
    <ul>
      <li>Each job runs same amt. of time</li>
      <li>All jobs arrive same time</li>
      <li>Each job runs to completion once started</li>
      <li>All jobs only use CPU</li>
      <li>Run-time of each job is known</li>
    </ul>
  </li>
  <li>
    <p>Unrealistic!</p>
  </li>
  <li><em>Scheduling metric</em>: how to measure stuff. Use <em>turnaround time</em>: time
@ which job completes - time @ which job arrived in system
    <ul>
      <li>This is completeness metric; can also measure fairness</li>
    </ul>
  </li>
  <li>FIFO, or First Come First Served. Like queue</li>
  <li>Simple, not great when you have long-running jobs. Increases average
turnaround by a lot. This is the <em>convoy effect</em>: # of short
jobs get queued behind heavy, long job</li>
  <li>
    <p>Relax assumption that ea. job runs to completion once started</p>
  </li>
  <li>SJF: Shortest Job First. Take shortest one. Used IRL, like express
lines at grocery markets. Solves convoy effect</li>
  <li>Schedulers are <em>preemptive</em> today: will stop in middle of running
process in order to run another. Opposite is only re-scheduling when
current process is done</li>
  <li>
    <p>K, now what if jobs arrive at different times? Can still get convoy
effect if short comes after long</p>
  </li>
  <li>Then use STCF: Shortest Time-to-Completion First. During timer
interrupt, see which one has longest time left</li>
  <li>
    <p>Shit, what about interactivity? Need <em>response</em> time: T(first run of
program) - T(arrival of program)</p>
  </li>
  <li>Round Robin runs job for <em>time slice</em> then switches to next job in
queue. Keep jobs in priority queue. Need to choose a good time slice:
too high means higher response time, too low means context switching
cost will dominate. Want it long enough to amortize switching cost</li>
  <li><em>Fair</em>: evenly divides CPU among active processes on small time scale</li>
  <li>Round Robin = low response, high turnaround. SJF = high response,
low turnaround</li>
  <li>
    <p>What about I/O?</p>
  </li>
  <li>During I/O process is blocked waiting for I/O completion. Should
schedule another job</li>
  <li>After I/O is done, process moved from block to ready by interrupt</li>
  <li>Can treat each separated-by-I/O portion as a sub-job that gets
re-enqueued, and process seperately. You can get overlap this way.
Nice</li>
  <li>Okay, what if you don’t know how long job will take? Shit</li>
</ul>

<h5 id="ch-8-multi-level-feedback-queue">Ch 8: Multi-Level Feedback Queue</h5>

<ul>
  <li>Rule 1: if Priority(A) &gt; Priority(B), A runs and B doesn’t</li>
  <li>Rule 2: If Priority(A) = Priority(B), A &amp; B run in RR</li>
  <li>Rule 3: When job enters system, it gets highest priority</li>
  <li>Rule 4a: If job uses entire time slice, its priority is reduced</li>
  <li>Rule 4b: If job gives up CPU before time slice is up (waiting, I/O),</li>
  <li>Rule 4 (combined): Once a job uses up its time allotment at a given
level (regardless of # of times it has given up CPU), its priority is
reduced</li>
  <li>
    <p>Rule 5: After some time period, move all jobs in system to topmost
queue (Boost)</p>
  </li>
  <li>Multi-level Feedback Queue approach (MLFQ). Won Corbato a Turing award
in 60s</li>
  <li>Problem: optimize turnaround time while minimizing response time</li>
  <li>Scheduler needs to learn through context over time; won’t have perfect
knowledge of job length beforehand.</li>
  <li>
    <p>Learn-from-history approach good when jobs are chunked up and
predictable. Break it down</p>
  </li>
  <li>MLFQ has different <em>queues</em> with different <em>priority levels</em>. Ready
job on one queue at a time</li>
  <li>Set priority using observed behavior heuristics :thinking_face:</li>
  <li>If process waits for keyboard input, priority should be high, want to
prioritize response time</li>
  <li>
    <p>Approximate SJF, since you <em>assume</em> job is short-running until you
have reason to believe it’s long running. Okay</p>
  </li>
  <li>Problem: program behavior can change over time. Processes can
get <em>starved</em>, RIP</li>
  <li>
    <p>Rule 5! Takes out starvation, and addresses changed behavior</p>
  </li>
  <li>Problem: people can game scheduler and take up 99% of CPU time by
never using a whole time slice</li>
  <li>
    <p>Rule 4 combined. Different CPU time <em>accounting</em>. Prevents process
from sticking in top level queue</p>
  </li>
  <li>Bleh, PITA to tune this stuff. How many queues? What’s the time slice?</li>
  <li>Generally high priority queues get low time slice b/c interactive ok</li>
  <li>
    <p>Solaris uses a table of these values that can be alered. FreeBSD uses
algorithms to calculate current job priority based on how much CPU
it’s used</p>
  </li>
  <li>
    <p>Avoid magic numbers/constants</p>
  </li>
  <li>Can also give scheduler advice about how long you’re gonna take and
stuff.</li>
  <li>MLFQ observes behavior patterns of jobs and adjusts accordingly,
since it doesn’t have previous knowledge. This good</li>
</ul>

<h5 id="ch-9-proportional-share">Ch 9: Proportional Share</h5>

<ul>
  <li>Instead of optimizing turnaround/response, try and get all processes
to a certain % of CPOU time</li>
  <li><em>Tickets</em> represent the share of a resource a process should receive.
I.e. A has 75 tix B has 25 tix, A should get 75% of the time</li>
  <li>Random approach. Why is random good?
    <ul>
      <li>Avoids strange corner cases</li>
      <li>Lightweight</li>
      <li>Fast</li>
    </ul>
  </li>
  <li>Ticket mechanisms</li>
  <li><em>Currency</em>: give each user/process a set of global tickets which
they divide up. These are transferred to global tickets at scheduling
time to run lottery on who goes next</li>
  <li><em>Transfer</em>: process can temporarily hand off tickets to another
process, e.g. client passing tix to server to get work done faster</li>
  <li>
    <p><em>Inflation</em>: process that is trusted by others can give itself more
tickets to take priority</p>
  </li>
  <li>Implementation v simple: random number generator, process table, track
total number of tickets. Nice</li>
  <li>
    <p><em>Unfairness</em> (how long after first process ends does second process
end) is negligible over time</p>
  </li>
  <li>
    <p>Optimal ticket assignment is a tough cookie</p>
  </li>
  <li>Stride scheduling is alternate to lottery: each job has a pass value
(counter of how many times it’s run IG), and a stride value (total tix
/ your tix). Increment pass value by stride every time program runs,
run the lowest pass value every time. Ends up being proportional</li>
  <li>Needs to maintain global state though, not the play</li>
  <li>Deterministic</li>
  <li>MLFQ more common</li>
  <li>Use case: virtualizingaaa, where you know you want Windows VM to have
25% of CPU cycles and Linux to have 75%</li>
</ul>

<h5 id="ch-10-multiprocessor-scheduling">Ch 10: Multiprocessor Scheduling</h5>

<ul>
  <li>Skim now, come back later</li>
  <li>Scheduling is hard af</li>
  <li>Kay</li>
</ul>

<h4 id="lecture-2">Lecture</h4>

<ul>
  <li>
    <p>“Not Responding” in activity monitor = d e a d, taking all the cycles
and not responding to events</p>
  </li>
  <li>dtrace</li>
  <li>syscall:freebsd:execve:entry</li>
  <li>provider:package:function_name:name</li>
  <li>
    <p>There are <code class="language-plaintext highlighter-rouge">sched</code> probes but I couldn’t quite get them to work</p>
  </li>
  <li>The process abstraction is quite powerful, scheduling is difficult</li>
</ul>

<h3 id="4---virtualizing-memory">4 - Virtualizing Memory</h3>

<h4 id="ostep-ch-13-address-spaces">OSTEP Ch 13: Address Spaces</h4>

<ul>
  <li>Every user address is virtual. Why? <em>Ease of use</em>. Each process gets
an <em>address space</em> to put its stuff in. Also isolation and protection
:)</li>
  <li>At first, no memory virtualization</li>
  <li>Then <em>multiprogramming</em>; CPU virtualization allowed concurrent
processes. How to share memory between processes as well? Allows stuff
like interactivity :thinking_face:</li>
  <li>Abstraction is <em>address space</em>: running program’s view of memory in
system
    <ul>
      <li>Contains text (code), data, heap, etc.</li>
    </ul>
  </li>
  <li>Problem this solves: multiple running processes need private address
spaces on top of single physical memory</li>
  <li>What are our <em>goals</em>?
    <ul>
      <li><em>Transparency</em>: running program shouldn’t realize anything’s going
on</li>
      <li><em>Efficiency</em>: as little performance impact as possible. Need
hardware support</li>
      <li><em>Protection</em>: processes should be protected from each other</li>
    </ul>
  </li>
  <li>
    <p>This is <em>virtualizing memory</em>: program thinks it’s at an address and
has a lot of accessible memory, but in reality it’s sharing</p>
  </li>
  <li>
    <p>Tip: isolation: one process can fail without affecting another.
Isolation of processes is a better dynamic</p>
  </li>
  <li>Again, <em>mechanism</em>s are low-level protocols or method for implementing
stuff (“how”), <em>policies</em> decide “which” decision to make</li>
</ul>

<h4 id="ostep-ch-14-interlude-memory-api">OSTEP Ch 14: Interlude: Memory API</h4>

<ul>
  <li>Hope some of these concepts are from CompArch</li>
  <li>Yeah I know most of this</li>
  <li>Stack variables are inside scopes. Stack == automatic memory</li>
  <li>
    <p><em>Heap</em> allocations are handled by you, the programmer. <em>malloc</em></p>
  </li>
  <li>
    <p>Don’t need to require #include <stdlib.h> but it allows compiler to
check if you're calling it correctly</stdlib.h></p>
  </li>
  <li>Best practice to cast result of malloc to be concrete about what
you’re doing: (double *) malloc(sizeof(double))</li>
  <li>
    <p>free() reverses malloc, cool</p>
  </li>
  <li>Ooh common errors</li>
  <li>Forget to allocate
    <ul>
      <li>SEGFAULT: tried to access memory you have not allocated yet</li>
    </ul>
  </li>
  <li>Not allocating enough. You’ll overwrite some poor other variable</li>
  <li>Make sure you fill in a value at the pointer you’ve malloc’d</li>
  <li>Forgetting to free. Oops, memory leak</li>
  <li>Free memory before you’re done: results in a dangling pointer, which
can now point to something you have no control over</li>
  <li>
    <p>Double free (freeing something already freed) can wrreck you too</p>
  </li>
  <li>Leaking memory in short-lived processes is “okay” because OS will
reclaim memory after process dies anyways</li>
  <li><code class="language-plaintext highlighter-rouge">brk</code> (set the location of the end of the heap) and <code class="language-plaintext highlighter-rouge">sbrk</code> (increment
heap pointer) are what malloc and free use under the hood. They are
syscalls</li>
  <li>Cool, there goes malloc and free</li>
</ul>

<h4 id="ostep-ch-15-mechanism-address-translation">OSTEP Ch 15: Mechanism: Address Translation</h4>

<ul>
  <li>Mechanism for CPU virtualization was <em>Limited Direction Execution</em></li>
  <li>Crux: How to Efficiently and Flexibly Virtualize Memory
    <ul>
      <li>Flexible: don’t restrict how programs use their own virtual memory
space</li>
    </ul>
  </li>
  <li>
    <p>Tip: <em>interposition</em>: transparently make a change behind the scenes
to make life easier for your client. Address translation is an example</p>
  </li>
  <li>Alright, let’s roll. Variables (start by assuming they’re static):
    <ul>
      <li>Is virtual memory a contiguous block in physical memory?</li>
      <li>Is virtual memory smaller than physical memory?</li>
      <li>Is each address space the same size?</li>
    </ul>
  </li>
  <li>Assume all these are static</li>
  <li>Virtual memory layout: code/text at the top, then heap directly below.
Stack grows up from bottom up to a certain size</li>
  <li>How to translate address 15kb in program to its place in hardware?</li>
  <li>
    <p>Aside: Software-based static relocation (loader rewrites executable to
have physical addresses before it runs) is worse; doesn’t have any
protection, processes can generate bad addresses and overwrite other
processes’ stuff</p>
  </li>
  <li>Dynamically (hardware-based)
    <ul>
      <li><em>base and bounds</em> (dynamic relocation): one CPU register has the
<em>base</em> of the physical memory location of the virtual memory of the
currently-running process, and another has the <em>bounds</em>. Thus,
physical address = virtal address + base</li>
      <li>Dynamic since it happens at runtime</li>
      <li>Bounds register makes sure addresses are within confines of address
space</li>
      <li>Having these values in registers is a big boost to performance</li>
      <li>MMU (memory management unit) is the part of the CPU that contains
this circuitry</li>
    </ul>
  </li>
  <li>Aside: <em>Free list</em> is the data structure the OS has to keep track of
which parts of physical memory have not yet been allocated</li>
  <li>Hardware support
    <ul>
      <li>Must support kernel (privileged) mode and user mode.</li>
      <li>Need the base and bounds registers on the MMU</li>
      <li>Ability to translate virtual addresses to physical ones</li>
      <li>Provide special instructions to modify base/bounds (only allowed in
kernel mode)</li>
      <li>Raise exceptions when program tries to access memory illegally, and
jump to the kernel exception handler</li>
    </ul>
  </li>
  <li>OS requirements
    <ul>
      <li>Memory management: allocate memory for new processes, reclaim memory
from terminated processes. Uses free list</li>
      <li>Base/bounds management: set base/bounds appropriately on context
switch. Keep these values in the process table
        <ul>
          <li>When process is stopped, can move its memory. Just copy the
address space and then update the base value in the process table</li>
        </ul>
      </li>
      <li>Exception handling: provide code to run when CPU raises exception.
Stuff like reclaiming its memory and cleaning up associated data
structures
        <ul>
          <li>The address of the exception handler is configured when trap table
is initialized at boot time</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>This concept <em>builds upon</em> limited direct execution, just save extra
stuff in the process context and add a bit more hardware</li>
  <li>Base and bounds approach
    <ul>
      <li>Efficient: done in hardware</li>
      <li>Protection: no process can access outside memory</li>
      <li>Wastes space that is not used by process. <em>Internal fragmentation</em>:
space inside an allocated unit is not used at all. Solve with
<em>segmentation</em></li>
    </ul>
  </li>
</ul>

<h4 id="ostep-ch-16-segmentation">OSTEP Ch 16: Segmentation</h4>

<ul>
  <li>Crux: How do you support a large address space with lots of space b/t
stack and heap?</li>
  <li>Separate base and bounds pair per logical segment of address space
(code, stack, heap)
    <ul>
      <li>Accomodate sparse address spaces</li>
    </ul>
  </li>
  <li>
    <p>Segmentation fault is when you access segmented machine at illegal
address. RIP</p>
  </li>
  <li>How to know which segment an address belongs two?</li>
  <li>Can reserve first two bits of address as segment ID, then rest as
offset. e.g. 00 = code, 01 = stack</li>
  <li>Can look at how address was generated (if from stack pointer, it’s
in stack, if from PC, it’s in code)</li>
  <li>Need to track whether address space/segment grows positively or
negatively (stack grows negatively). Just use a bit for this</li>
  <li>Add in protection bits to enable sharing. Read-write, read-execute,
read-only, etc. Thus, diff programs can look at same information,
think it’s their own, but in reality it’s shared
    <ul>
      <li>Add support to hardware for checking permission bits as well</li>
    </ul>
  </li>
  <li>Okay, now with segments, how do you allocate memory? Throw out
assumption that each segment is the same size, because they’re
obviously not</li>
  <li>Don’t want small holes of unusable free space (<em>external
fragmentation</em>)</li>
  <li>Compacting physical memory by keeping on rearranging segments is an
option, but bad because costly</li>
  <li>
    <p>Rather, use a free-list management algorithm that tries to keep large
pieces of memory available for allocation. Lots of options; no “best”
way to do this</p>
  </li>
  <li>Segmentation is good!</li>
  <li>Support sparse address spaces</li>
  <li>Performant: still in hardware</li>
  <li>Allows code sharing</li>
  <li>Still not flexible enough to support fully-generalized address space.
Large but sparsely-used heap in a logical segment leads to
fragmentation because entire heap still needs to be in memory</li>
  <li>Kay</li>
</ul>

<h4 id="ostep-ch-17-free-space-management">OSTEP Ch 17: Free-Space Management</h4>

<ul>
  <li>Alrighty. Hard to manage with variable-sized blocks</li>
  <li>How do you manage free space? What strategies and tradeoffs are there?</li>
  <li>Assumptions
    <ul>
      <li>malloc/free-like interface for users to manage memory</li>
      <li>free list data structure to keep track of free space
        <ul>
          <li>Literally a linked list of the contiguous blocks of free memory</li>
        </ul>
      </li>
      <li>Once memory is givent o client, it can’t be relocated to another
spot in memory</li>
      <li>No brk or sbrk - assume each region is a single fixed size
throughout its life</li>
    </ul>
  </li>
  <li>Mechanisms</li>
  <li>Splitting and coalescing: When you get a request for less memory than
one of your free chunks, split it up, return first part to the
requester, second part replaces previous chunk in free list
    <ul>
      <li><em>Coalesce</em>: when memory is freed and is right next to another free
chunk, merge then together</li>
    </ul>
  </li>
  <li>Allocator stores a header before the pointer it allocates that
identifies it so free(void *) can just take a pointer, doesn’t need to
know its length
    <ul>
      <li>Header has <em>size</em> and <em>magic</em> number to provide integrity checking</li>
      <li>Must search for space of size header + N bytes when allocating</li>
    </ul>
  </li>
  <li>Where do you keep free list in memory?</li>
  <li>Allocate a heap with mmap, set up your list, whenever you add stuff
you just move along your list
    <ul>
      <li>head points to the first free node. This location moves as you
allocate memory, <em>before</em> freeing it. This is contiguous</li>
      <li>When memory freed, library figures out size of free region, adds it
back to the free list by inserting at the head or something</li>
    </ul>
  </li>
  <li>How does OS grow the heap?</li>
  <li>Sometimes fail</li>
  <li>Sometimes find free physical pages, map them into address space of
requesting process, return value of end of new heap. Tight</li>
  <li>Skim some basic strategies for allocating memory</li>
  <li>All these strategies trade off cost of scaling (searching list) for
more complex in memory data structures and stuff. Simplicity for
performance</li>
</ul>

<h3 id="5---paging">5 - Paging</h3>

<h4 id="ostep-ch-18-intro-to-paging">OSTEP Ch 18: Intro to Paging</h4>

<ul>
  <li>If you use different sized chunks of memory you get fragmenting. So
why not use fixed-sized pieces? These are <em>pages</em>.</li>
  <li>View physical memory as array of page frames, each of which can
contain a single virtual-memory page</li>
  <li>So, how to virtualize memory with pages to avoid fragmentation? With
minimal time/space overhead</li>
  <li>Paging provides flexibility in the virtual memory abstraction :)</li>
  <li>
    <p>Also simplicity - OS just tracks free list of pages, not a bunch of
different types of free space</p>
  </li>
  <li>Use <em>page table</em> to track where each virtual page of address space is
placed in physical memory. This is per-process. Role of page table is
to store address translations for each page</li>
  <li>How to translate?</li>
  <li>First, get a virtual page number and an offset in the page. Can just
use separate bits in the virtual address to indicate these</li>
  <li>
    <p>Use the page table to translate the virtual page number into the
physical page number (PFN), and use that same offset, you can now go
fetch the data from physical memory</p>
  </li>
  <li>Where do you put page tables? They can get pretty darn big to do all
the necessary address translations</li>
  <li>Gotta put em in memory</li>
  <li>Linear page table: use virtual page number to index into array, looks
up the page-table entry (PTE) at that index, which should point to the
desired physical frame number. Ezpz</li>
  <li>Each page table entry can have some bits
    <ul>
      <li>Valid bit: is your transition valid? E.g. have you asked for this
heap</li>
      <li>Protection bits: permissions on read/write</li>
      <li>Present bit: is data on memory or on disk (swapped)</li>
      <li>Reference bit: has this page been accessed? Used for swapping and
such</li>
    </ul>
  </li>
  <li>This too slow and takes up too much space! Some pseudo-code here for
virtual memory paging</li>
  <li>Lots of extraneous memory accesses and such</li>
  <li>Okay, don’t fully understand the diagram</li>
</ul>

<h4 id="ostep-ch-19-paging-faster-translations-tlbs">OSTEP Ch 19: Paging: Faster Translations (TLBs)</h4>

<ul>
  <li>How do you speed up address translation and have it take up less memory?</li>
  <li>Add a <em>translation-lookaside buffer (TLB)</em> as part of the chip’s MMU,
which is a cache of virtual-to-physical address translations. Could
call it an address-translation cache</li>
  <li>Hardware first checks TLB before doing any computation to translate
addresses</li>
  <li>If it gets a hit, you can do the same checks on permissions and
validity and whatnot</li>
  <li>If no hit, then proceed as usual and also update the TLB</li>
  <li>Try to get as many hits as possible!</li>
  <li>e.g. sequential array accesses on the same page as memory are good.
This is spacial locality</li>
  <li>Hit rate: % of accesses that are TLB hits</li>
  <li>
    <p>If you re-reference the same stuff closely in time to each other, you
get temporal locality</p>
  </li>
  <li>Caching is a great performance technique in general :)</li>
  <li>At first hardware managed TLBs; had to know where on disk the page
tables were, and their format, to be able to do this. x86 did this
originally :)</li>
  <li>Nowadays we have software-managed TLBs. Hardware jumps to specific
spot in kernel code when TLB miss happens</li>
  <li>How to avoid infinite TLB? Have some permanently-valid translations in
the TLB (<em>wired</em>)</li>
  <li>
    <p>Software-managed TLBs are more flexible (any data type can be used)
and simple (hardware has less to do)</p>
  </li>
  <li>TLB contents are <em>fully associative</em>: any given translation can be
anywhere in the TLB, and hardware searches entire thing at any given
time</li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>Each entry: VPN</td>
          <td>PFN</td>
          <td>other bits</td>
        </tr>
      </tbody>
    </table>
    <ul>
      <li>Other bits can be stuff like <em>valid bit</em> (contrast with page table
valid bit; page table one indicates whether program has access to
that page, while TLB valid bit indicates whether the translation is
“real” . When system first boots, no TLB translations are valid :)</li>
    </ul>
  </li>
  <li>What do when you context switch? Need to pull in new TLB for new
process</li>
  <li>You could just flush the TLB whenever you context switch, which sets
all the valid bits to 0</li>
  <li>This works, but you have to re-populate the TLB whenever you context
switch; if context switches happen often, you screwed</li>
  <li>
    <p>Hardware can add an <em>address space identifier</em> to the TLB, and each
process gets its own ASID. Then you only map VPNs that match your ASID
to the correct PFN. Cool</p>
  </li>
  <li>How do you decide which entry to replace when your TLB fills up?</li>
  <li>Could just do LRU</li>
  <li>Could also be random to avoid corner-case behaviors like “loop over n
    <ul>
      <li>1 pages with TLB of size n”, cause the one you want is always the
last thing removed so you have to fetch it</li>
    </ul>
  </li>
  <li>
    <p>They use an example of the MIPS TLB, cool</p>
  </li>
  <li>Summary: TLB on chip increases performance a lot :)</li>
  <li>But if you overrun the TLB (exceed TLB coverage) you may be fukked</li>
  <li>To get around this you can use larger page sizes; common in DBMS</li>
  <li>Cool</li>
</ul>

<h4 id="ostep-ch-20-paging-smaller-tables">OSTEP Ch 20: Paging: Smaller Tables</h4>

<ul>
  <li>Okay, page tables are very large (they have to map all possible
virtual page numbers to physical page numbers for every process!)</li>
  <li>Linear page tables suck</li>
  <li>
    <p>One solution is just having bigger page sizes, buuuut that leads to
internal fragmentation :/</p>
  </li>
  <li>What about combining paging and segmentation? <em>Hybrid</em></li>
  <li>Have one page table per logical segment (code, heap, stack)?</li>
  <li>Still use base and bounds for the segments</li>
  <li>Top two bits of virtual address refer to segment, then VPN number,
then offset number</li>
  <li>Keep a bounds register per segment :) because it’s separate from pure
page table by having different bounds at each segment</li>
  <li>
    <p>This hybrid approach is pretty good in general</p>
  </li>
  <li>Okay, how about an approach that doesn’t rely on segmentation, but
attacks same problem: how to get rid of all invalid regions in the
page table instead of keeping them all in memory? This is multi-level,
turns page table into a tree</li>
  <li>Chop up page table into page-sized units</li>
  <li>If entire page of page table entires is invalid don’t allocate that
page of the table</li>
  <li>Use a <em>page directory</em> to track whether each page of the page table is
valid or not</li>
  <li>Page directory has one entry per page table page. Each page directory
entry (PDE) has a valid bit and a page frame number (PFN). Is
pretty much like a page table entry</li>
  <li>Only allocates space in proportion to # of addresses you’re using</li>
  <li>Each portion of page table fits into one page, so you can manage the
memory easier :) just get next free page to find space more another
PDE</li>
  <li>Adds a level of indirection (cost) to improve space usage (benefit)</li>
  <li>First N bits of the VPN can be used as page directory index :)</li>
  <li>Use page directory index to find which page table you’re looking at,
then get your physical address</li>
  <li>Can use a multi-level page directory if the situation calls for it
:) pretty much just the same thing recursively</li>
  <li>We want the page directory to fit into one page of memory too!</li>
  <li>Cool that’s pretty much the process of translation here: use a page
table and have a TLB, nice</li>
  <li>
    <p>Teaser: page tables can be swapped to disk</p>
  </li>
  <li>Cool, so this is how real page tables are built, not just linear!</li>
  <li>All about dat time-space tradeoff; bigger page table = faster
servicing of TLB misses, but more space</li>
</ul>

<h4 id="ostep-ch-21-beyond-physical-memory-mechanisms">OSTEP Ch 21: Beyond Physical Memory: Mechanisms</h4>

<ul>
  <li>How can the OS make use of larger, slower device to transparently
provide the illusion of a large virtual address space?</li>
  <li>Why do this? For convenience + ease of use of the userland program</li>
  <li>Also multiprogramming: run multiple programs concurrently</li>
  <li>Reserve space on disk for moving pages back and forth: <em>swap space</em></li>
  <li>(since we swap pages out of and into memory from this space)</li>
  <li>
    <p>Need disk address of a page that has been swapped!</p>
  </li>
  <li>What do we need to add up above to support swapping?</li>
  <li>Add <em>present bit</em> to each page table entry. If 1, then page is in
physical memory. If 0, then page is swapped out</li>
  <li>If you access a page not in physical memory, it’s a page fault</li>
  <li>When this happens, hardware jumps to OS page fault handler</li>
  <li>Why does OS handle page faults instead of hardware? Accessing disk so
slow that the OS overhead isn’t the bottleneck. Also, hardware doesn’t
want to have to know about swap space/disk I/O, etc.</li>
  <li>OS may need to swap page back into physical memory. How sway</li>
  <li>
    <p>In the part of the PTE normally used for memory address, put a disk
address. Then OS just fetches from that address, puts it somewhere in
physical memory, flips valid bit, and replaces value in PTE with the
physical memory address</p>
  </li>
  <li>
    <p>Oh dear, how to swap in when memory is full? There’s a very good
page-replacement policy :)</p>
  </li>
  <li>Alright family, with page faults you obvz add to the flow control.
Some code examples here :zzz:</li>
  <li>When do you replace stuff? Want to do it proactively to help w/
performance</li>
  <li>Hgh watermark: minimum number of free pages you want available
whenever swap daemon runs</li>
  <li>Low watermark: when fewer free pages than this watermark, swap daemon
runs and evicts until you reach high water mark</li>
  <li>
    <p>Doing work in the background is good for efficiency :)</p>
  </li>
  <li>Cool, so we have a way to swap memory. Use a present bit, if page
isn’t present run the page-fault handler, this all happens
transparently to the process!</li>
</ul>

<h4 id="ostep-ch-22-beyond-physical-memory-policies">OSTEP Ch 22: Beyond Physical Memory: Policies</h4>

<ul>
  <li>
    <p>How does OS decide which page(s) to evict from memory? This decision
is made by the replacement policy of the system, which usually follows
some general principles but also includes certain tweaks to avoid
corner-case behavior</p>
  </li>
  <li>Let’s view main memory as a cache for virtual memory pages in system</li>
  <li>Thus, we want to minimize cache misses</li>
  <li>Average memory access time (AMAT) is the metric of choice. Computed
from hit rate, miss rate, cost of accessing memory, cost of accessing
disk</li>
  <li>“Optimal” replacement policy is to evict wpage that will be accessed
farthest in the future (obviously can’t do this ourselvs, but can
compare our implementations against this to benchmark)</li>
  <li>Quickly, cache miss types
    <ul>
      <li>Compulsory: because nothing in the cache yet</li>
      <li>Capacity: No space in the cache!</li>
      <li>Conflict: limits on where item can be in hardware cache, oops</li>
    </ul>
  </li>
  <li>
    <p>FIFO is first-in first-out (like a queue). Simple! 36% hit rate</p>
  </li>
  <li>
    <p>Random is simple as well…</p>
  </li>
  <li>LRU? Least Frequently Used? Let’s use historical data</li>
  <li>Stuff like frequency a page is accessed, recency of access</li>
  <li>These use <em>principle of locality</em>: stuff tends to get accessed
frequently and close by :)</li>
  <li>
    <p>Compare approaches by looking at different workloads. Some of these
workloads result in ugly corner cases :/</p>
  </li>
  <li>How do you implement a historical approach like LRU?</li>
  <li>Approximating easier than doing the real thing :)</li>
  <li>
    <p>Can use a <em>use bit</em> which is associated with a page table entry. Set
to 1 by processor if that page in memory is accessed. And
then have a “clock hand” that goes around all the page table entries
in a circle. When time to evict, if currently-pointed-at entry has a
use bit of 1, set it to 0, and track until you find one that’s 0. If
0, evict it</p>
  </li>
  <li>
    <p>Dirty pages suck to evict because you have to write them back to disk
first. Can use a <em>modified bit</em> similar to use bit that indicates
whether page has been modified, and try not to evict those</p>
  </li>
  <li>
    <p>Other policies: change up how you decide when to pull pages into
memory, or cluster writes to disk. All help with VM</p>
  </li>
  <li><em>Thrashing</em>: systems running don’t have stuff that fit into physical
memory, so you’re constantly swapping :(</li>
  <li>
    <p>Deal with it by choosing a subset of processes to get done with first?</p>
  </li>
  <li>Cool so those are policies for swapping</li>
</ul>

<h4 id="ostep-ch-23-the-vaxvms-virtual-memory-system">OSTEP Ch 23: The VAX/VMS virtual memory system</h4>

<ul>
  <li>Just read, no notes</li>
</ul>

<h4 id="lecture-3">Lecture</h4>

<ul>
  <li>
    <p><em>Cache pollution</em>: you keep doing disparate reads from memory, keep
having to flush and replace the cache, very bad</p>
  </li>
  <li>
    <p>Benefits of paging</p>
    <ul>
      <li>Code sharing for shared libraries</li>
      <li>Page caching. Cache code blocks that are frequently used by
processes!</li>
    </ul>
  </li>
</ul>

<h3 id="6---concurrency">6 - Concurrency</h3>

<h4 id="ostep-ch-26-concurrency-an-introduction">OSTEP Ch 26: Concurrency: An Introduction</h4>

<ul>
  <li>Multi-threaded processes! Need to manage memory accesses and whatnot</li>
  <li>
    <p>OS needs to deal with <em>locks</em> and <em>condition variables</em>, OS itself is
concurrent</p>
  </li>
  <li><em>Thread</em>: process that is multi-threaded has multiple instruction
pointers. They do share memory</li>
  <li>Each thread has its own set of registers to work from (need to do a
context switch when switching threads)</li>
  <li>Save execution state to a thread control block (TCB) for each thread</li>
  <li>Thread context switch does not need to switch address spaces :)</li>
  <li>
    <p>Multi-threaded address space has different spaces for each thread.
Called <em>thread-local</em> storage</p>
  </li>
  <li>Why use threads?</li>
  <li>Parallelism: have multiple running processes at the same time on
different processors</li>
  <li>
    <p>Avoid blocking due to I/O; threading enables overlap of I/O within a
single program (analogous to what multiprogramming does for processes)</p>
  </li>
  <li><code class="language-plaintext highlighter-rouge">pthread_create</code> to start a thread, <code class="language-plaintext highlighter-rouge">pthread_join</code> to wait for thread
to finish</li>
  <li>No guarantees on execution order of threads! This gets sad and
complicated :(</li>
  <li>Uh oh, shared data</li>
  <li><code class="language-plaintext highlighter-rouge">Pthread_create</code> (capital P) prints an error message if the thread
doesn’t create successfully</li>
  <li>Oh dear…accessing shared data (e.g. a shared counter) produces
unreliable, incorrect results</li>
  <li>Yikes, if you get a timer interrupt before persisting the saved
counter to the stack, you get screwed. So you can run the loop twice
but only increment the counter once :(</li>
  <li>This is what a <em>race condition</em> is; results in <em>indeterminate</em>
computation when multiple threads enter a critical section at the same
time</li>
  <li>Code where multiple threads are executing is a <em>critical section</em>.
Accesses a shared resource</li>
  <li>
    <p>What we want is <em>mutual exclusion</em>: if one thread is in the critical
section, it should be able to complete its work “as intended”</p>
  </li>
  <li><em>Atomic</em> operation: all updates happen at once time (as a unit, all or
none). Grouping of many actions into an atomic action is a
<em>transaction</em></li>
  <li>Start with <em>synchronization primitives</em> in the hardware</li>
  <li>Dis should make your head hurt</li>
  <li>
    <p>Another problem: one thread is dependent on another to complete action
before it continues</p>
  </li>
  <li>The OS is the first concurrent program, so that’s why this concern is
related to the OS
    <ul>
      <li>Example: two processes both want to write to a file at the same
time. How do you accomodate this? Untimely interrupt throws
everything off</li>
    </ul>
  </li>
</ul>

<h4 id="ostep-ch-27-interlude-thread-api">OSTEP Ch 27: Interlude: Thread API</h4>

<ul>
  <li>pthread_create(pthread_t * thread, const pthread_attr_t * attr, void *
(<em>start_routine)(void</em>), void *arg);</li>
  <li>Ezpz</li>
  <li>Pass pthread_t pointer to function to interact with thread</li>
  <li>Attr built with pthread_attr_init</li>
  <li>start_routine is a <em>function that takes one void pointer argument and
returns a void pointer</em>. Left side is return, right side is argument</li>
  <li>Void pointer means anything can be passed in/returned</li>
  <li><code class="language-plaintext highlighter-rouge">Pthread_join</code> waits for thread to complete</li>
  <li>Never return a pointer which refers to something allocated on the
thread’s call stack! It’ll be a seg fault next time you try to access
it</li>
  <li>Mutual exclusion comes by way of <em>locks</em>:
<code class="language-plaintext highlighter-rouge">pthread_mutex_lock(pthread_mutex_t *mutex)</code> and corresponding unlock
function</li>
  <li>Initialize a lock, lock before critical section, unlock after critical
section, nice. See man pages for more</li>
  <li><em>Condition variable</em>: use when you must signal between threads, if
one is waiting for another to finish something before it can
continue. Like <code class="language-plaintext highlighter-rouge">flag</code></li>
  <li><code class="language-plaintext highlighter-rouge">pthread_cond_wait()</code> takes a cond_t and a lock mutex, puts calling
thread to sleep until it gets a <code class="language-plaintext highlighter-rouge">pthread_cond_signal</code> from another
thread that lets it continue. Use global variable <code class="language-plaintext highlighter-rouge">ready</code> for this
signaling
    <ul>
      <li>wait() takes a lock because it needs to release lock before going to
sleep. pthread_cond_wait() re-acquires lock before returning</li>
    </ul>
  </li>
  <li>Cool, the pthread library is just built in to C, hooray. Some
guidelines:
    <ul>
      <li>Keep it simple</li>
      <li>Minimize thread interactions</li>
      <li>Initialize locks and condition variables correctly</li>
      <li>Check return codes!!</li>
      <li>Be careful with how you pass arguments to, and return values from,
threads</li>
      <li>Each thread has its own stack!</li>
      <li>Use condition variables to signal between threads</li>
      <li>Use man pages</li>
      <li>zzz</li>
    </ul>
  </li>
  <li>Cool, get an idea for locks, condition variables, etc. by exploring
thread API in C</li>
</ul>

<h4 id="ostep-ch-28-locks">OSTEP Ch 28: Locks</h4>

<ul>
  <li><em>Lock variable</em> holds the state of the lock at any instant in time.
Lock can be <em>available</em> (unlocked, free) or <em>acquired</em> (locked, held)</li>
  <li>
    <p>One thread <em>owns</em> the lock at a time. If another thread calls lock(),
it will not return until the owner relinquishes control</p>
  </li>
  <li><em>mutex</em> provides mutual exclusion</li>
  <li>
    <p>Each lock is unique based on passed-in var, so you can have multiple
locks going on at a time</p>
  </li>
  <li>How do you build an efficient lock? Hardware? OS?</li>
  <li>Basic task: mutual exclusion</li>
  <li><em>Fairness</em>: each thread contending for lock get fair share at it?
    <ul>
      <li>Flip side: does any thread <em>starve</em> (never get a chance)?</li>
    </ul>
  </li>
  <li><em>Performance</em>: time overhead using a lock adds</li>
  <li>Naive: disable interrupts during lock
    <ul>
      <li>Many disadvantages</li>
      <li>Need to trust that locking thread is well-behaved</li>
      <li>Only works on single processor</li>
      <li>Interrupts (i.e. I/O done) can get lost if this runs for a long
time; leads to big problems</li>
      <li>Inefficient; masking interrupts is not easy</li>
    </ul>
  </li>
  <li>Okay, what about <em>test-and-set</em> instruction? Also called atomic
exchange</li>
  <li>Simplest: use a <code class="language-plaintext highlighter-rouge">flag</code> var that gets set to 1 while a thread is n
critical section. Unfortch, this still suffers from
concurrency/interrupt issue. Sad!</li>
  <li><code class="language-plaintext highlighter-rouge">test-and-set</code> instruction returns an old pointer value and updates
that pointer value, <em>atomically</em></li>
  <li>Implement lock: <em>test</em> old lock value to see if you can get the lock,
<em>set</em> new value at the same time</li>
  <li>Spin if you get an “old value” of 1, meaning that another thread had
the lock</li>
  <li>To frame concurrency problems, imagine you are a malicious scheduler
:)</li>
  <li>
    <p>Spin lock: correct, unfair, nonperformant on single CPU ‘cause you can
have a lot of spinning processes</p>
  </li>
  <li>Compare-and-swap? Pass in an expected and a new; set to new if actual
== expected</li>
  <li><code class="language-plaintext highlighter-rouge">lock</code> method just expects 0, sets 1. Cool</li>
  <li>
    <p>Similar to test and set now</p>
  </li>
  <li>Load-linked and store-conditional</li>
  <li>Acquire lock by spinning until loading flag is 0, doing a store conditional
to the lock address for the value 1 (make sure this returns 1! If it
doesn’t, someone else snuck in and got the lock</li>
  <li>Unlock by setting flag to 0, duh</li>
  <li>
    <p>Lauer’s Law: more code is worse. Less code is better</p>
  </li>
  <li><code class="language-plaintext highlighter-rouge">Fetch-and-add</code> atomically increments a value while returning old
value at the address</li>
  <li><code class="language-plaintext highlighter-rouge">Ticket lock</code>: to acquire lock, do an atomic fetch-and-add on the
ticket value. That’s the thread’s turn. Then, the <code class="language-plaintext highlighter-rouge">lock-&gt;turn</code>
determines which thread’s turn it is</li>
  <li>Unlock by incrementing the turn</li>
  <li>
    <p>This introduces a tad bit of fairness :)</p>
  </li>
  <li>How do you avoid spinning?</li>
  <li>
    <p>Just yield? Better, but can still do N context switches before
continuing your thread, where N is the number of threads trying to
acquire lock</p>
  </li>
  <li>Queue? Sleep, don’t spin</li>
  <li><code class="language-plaintext highlighter-rouge">park</code> puts calling thread to sleep, <code class="language-plaintext highlighter-rouge">unpark</code> wakes a thread</li>
  <li>Use a queue of lock waiters, unlock pops off the queue and hands off
control</li>
  <li>Spin locks suffer from <em>priority inversion</em>: higher priority thread
becomes the one that runs the most, but is not the one we want to run!</li>
  <li>All about addressing edge cases and stuff. setpark() just in case you
get interrupted during a park</li>
  <li>
    <p>Linux uses <em>futex</em>: each futex has a physical memory location,
futex_wait and futex_wake are the interface to get yourself onto the
queue and schedule the next thing on the queue, respectively</p>
  </li>
  <li>All kinds of different lock types! Details differ and stuff; this is
hard!</li>
</ul>

<h4 id="ostep-ch-29-lock-based-concurrent-data-structures">OSTEP Ch 29: Lock-based Concurrent Data Structures</h4>

<ul>
  <li>
    <p>How to add locks to data structures? Making them <em>thread-safe</em></p>
  </li>
  <li>Counter?</li>
  <li>Can just add a single lock, invoke whenever you do anything with the
data structure</li>
  <li>Scales poorly; we want <em>perfect scaling</em>, where a bunch of work is
done in parallel so we can scale without a performance cost</li>
  <li><em>Sloppy counting</em>: four local counters (one per CPU), one global
counter, each has its own lock. Increment local counter when your code
runs. Local values periodically transferred to global counter by
acquiring global lock and incrementing by local counter value; local
counter then set to 0</li>
  <li>Threshold S (for sloppiness) is how often the local-to-global transfer
occurs</li>
  <li>
    <p>Accuracy/performance tradeoff</p>
  </li>
  <li>List?</li>
  <li>Side note: exceptional control flow sucks</li>
  <li>Basically can just try to lock/unlock around inserts</li>
  <li>Side note: simple is usually fine!! If you don’t need to scale a ton</li>
  <li>General design tip: be wary of control flow changes that lead to
returns/exits that halt function execution. You probably left some
cleanup not done :/</li>
  <li>
    <p>Hand-over-hand: Add a lock per list node. But you don’t really see a
performance benefit. Maybe a hybrid? Where you grab a lock every few
nodes</p>
  </li>
  <li>Queues?</li>
  <li>Like everything, could add a big lock</li>
  <li>
    <p>Could maybe have separate locks for head and tail. :zzz:</p>
  </li>
  <li>Hash table?</li>
  <li>
    <p>Use a lock per hash bucket! Each bucket is a linked list, so we can
lean on that implementation. Cool</p>
  </li>
  <li><em>Avoid premature optimization</em>!!!</li>
  <li>Okay, lists, queues, counters, hash tables, all good stuff that can be
concurrentized</li>
</ul>

<h4 id="ostep-ch-30-condition-variables">OSTEP Ch 30: Condition Variables</h4>

<ul>
  <li>How do you wait or a condition before proceeding in a thread?</li>
  <li><em>Condition variable</em>: explicit queue threads can put themselves on
when some state of execution is not as desired (<em>waiting</em> on the
condition); some other thread, when it changes state can then wake one
or more of these waiting threads and let them continue (by <em>signaling</em>
on the condition)</li>
  <li><code class="language-plaintext highlighter-rouge">pthread_cond_t</code> declares c as a condition variable. Has wait() and
signal() operations, yee</li>
  <li><em>Always hold the lock when calling signal or wait</em>, so that you can be
sure about your operations. Otherwise, you can get infinite loops and
such</li>
  <li>
    <p>Got it, parent join()ing on child does a wait(), child does a signal()
when it’s done. Need to also keep a <code class="language-plaintext highlighter-rouge">done == 0</code> state between parent
and child to ensure you don’t end up with infinitely running thread</p>
  </li>
  <li><em>Producer/consumer</em> or <em>Bounded buffer</em> problem</li>
  <li>Producers generate data items and place them in a buffer, consumers
grab items from buffer and consume them. E.g. a Unix pipe</li>
  <li>Producer only puts onto buffer when count is 0 (empty), Consumer reads
from buffer when count is 1</li>
  <li><em>Mesa semantics</em>: signaling a thread wakes it up (hint that world
state has changed), but no guarantee that the state is still as
desired when the woken thread runs!!
    <ul>
      <li>So if you have two consumers, and one sneaks in after other is
scheduled but not run yet, then the second one will raise assertion
when it tries to read from empty buffer</li>
    </ul>
  </li>
  <li>With Mesa, <em>always use while loops</em> so you know about state fo sho</li>
  <li>Need to handle multiple producers and consumers - more direct
signaling, not just one universal condition variable</li>
  <li>Producer waits on “empty”, signals on “fill”; consumer does the
opposite. So producer never wakes producer, consumer never wakes
consumer</li>
  <li><em>Correct</em> solution: allow buffer to fill up past 1 to be empty or
full, in buffer put() and get() set the fill_ptr and use_ptr to make
sure neither get up past the maximum you want, but otherwise, producer
can fill up a bit more and buffer can read out until <code class="language-plaintext highlighter-rouge">count</code> reaches
    <ol>
      <li>Cool</li>
    </ol>
  </li>
  <li>Condition checking in multi-threaded programs should always use
<code class="language-plaintext highlighter-rouge">while</code>
    <ul>
      <li>Avoids lots of bugs, such as when you get spuriously woken up. Make
sure to check on your state whenever waking up!</li>
    </ul>
  </li>
</ul>

<h4 id="ostep-ch-31-sempahores">OSTEP Ch 31: Sempahores</h4>

<ul>
  <li>Gg</li>
  <li><em>Semaphore</em>: synchronization primitive that can be used instead of
locks and condition variables</li>
  <li>Semaphore is an object wth an integer value that we can manipulate
with sem_wait() and sem_post()</li>
  <li>Must be initialized (e.g. to 1)</li>
  <li>sem_wait() decrements value of semaphore by one, waits if value is
negative</li>
  <li>sem_post() increments value of semaphore by one, if there are one or
more threads waiting, wake one by e.g. signaling on condition variable</li>
  <li>Value of semaphore == number of waiting threads if negative</li>
  <li>Wait before ciritcal section, post after critical section
    <ul>
      <li>Use as locks is simple: initialize to 1. This is a <em>binary
semaphore</em> because the only two states are held and unheld</li>
    </ul>
  </li>
  <li>Can be used as condition variables</li>
  <li>Parent calls sem_wait(), child calls sem_post() when it’s done. Cool</li>
  <li>Initialize to 0; will go to -1 when parent calls, wait, when child
calls post() it will go to 0 and wake up the parent</li>
  <li>
    <p>Even if child comes first, it will increment to 1, then parent sees
value &gt;= 0 when it runs so it just doesn’t wait in sem_wait()_</p>
  </li>
  <li>Bounded buffers?</li>
  <li>Can have separate full and empty semaphores, both used as condition
variables</li>
  <li>Issue with this: no mutual exclusion! Critical section of filling
buffer and incrementing index isn’t guarded. Add a binary sempahore to
use as lock :)</li>
  <li>Welp, deadlock: consumer runs, waits on full signal, producer runs,
waits on empty signal, they’re both stuck. Deadlock occurs when all
processes are stuck in a lock at the same time</li>
  <li>
    <p>Just change order of ops: check on binary semaphore <em>after</em> checking
on empty/full :)</p>
  </li>
  <li>Reader/writer lock: writes must have an exclusive lock, but reads can
be concurrent as long as there is no write happening</li>
  <li>Only a single writer can acquire the lock at a time</li>
  <li><em>First</em> reader acquires write lock too, so anyone who wants to write
has to wait for all readers to finish</li>
  <li>Okay, kinda yucky, readers can starve writers</li>
  <li>Implement semaphores with one condition variable and one lock</li>
  <li>
    <p>Tip: be careful when generalizing! There are subtle differences that
will bite you in the ass, and it’s rarely even needed</p>
  </li>
  <li>Semaphores are a nice primitive for concurrency, okay</li>
</ul>

<h4 id="ostep-ch-32-concurrency-bugs">OSTEP Ch 32: Concurrency Bugs</h4>

<ul>
  <li>Mostly skim, come back later</li>
  <li>What concurrency bugs to look out for? Can divide into non-deadlock
and deadlock</li>
  <li>Non-deadlock: <em>atomicity violation</em> and <em>order violation</em></li>
</ul>

<h4 id="lecture-4">Lecture</h4>

<ul>
  <li>
    <p>Realtime API/functionality allows you to run a block of code every N
ms, but you will get interrupted, must finish within N ms</p>
  </li>
  <li>
    <p>C convention to capitalize functions and wrap syscalls with uniform
error handling</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">ifndef</code> header guard in C programs makes sure you don’t include same
stuff twice</p>
  </li>
  <li>
    <p>When you use a lock, you claim that <em>everything else</em> outside of the
critical section can be interleaved with no issues</p>
  </li>
  <li>
    <p>Struct with two void pointers and array with two void pointers take up
the exact same amount of space</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">volatile</code> keyword tells the compiler “don’t reason about this value,
let it be”</p>
  </li>
</ul>

<h3 id="7---io-devices-hard-disks-and-flash-based-ssds-and-introduction-to-file-systems">7 - I/O devices, hard disks and flash based SSDs, and introduction to file systems</h3>

<h4 id="ostep-ch-36-io-devices">OSTEP Ch 36: I/O devices</h4>

<ul>
  <li>I/O is important. How should it be integrated into systems? What are
the general mechanisms? How can we make them efficient?</li>
  <li>CPU&lt;-&gt; memory by memory bus. Other devices by <em>I/O bus</em>
    <ul>
      <li>Could be PCI (graphics), or lower down like SCSI, SATA, USB</li>
      <li>It’s a hierarchy because shorter buses are more performant</li>
    </ul>
  </li>
  <li>Two parts of device: hardware interface, internal structure
    <ul>
      <li><em>Firmware</em>: software within hardware device</li>
    </ul>
  </li>
  <li>Say a device presents an interface with a status register, command
register, and data register (to pass data to device)</li>
  <li>First instinct is to have the OS poll the status register to see if
the device can receive data, but that is inefficient
    <ul>
      <li>When CPU involved with I/O directly, it’s programmed <em>I/O</em></li>
    </ul>
  </li>
  <li>Duh, interrupt. Overlap computation and I/O</li>
  <li>Interrupt has a context switching cost; if device is responsive, maybe
polling is ok
    <ul>
      <li><em>Coalesce</em> by holding onto interrupts for a little bit in hopes of
batching up multiple completed ops in one interrupt</li>
    </ul>
  </li>
  <li>We hate PIO because it’s costly, how do we eliminate?</li>
  <li>Use DMA: <em>Direct Memory Access</em></li>
  <li>DMA engine is a device that facilitates memory&lt;-&gt;device without CPU
help</li>
  <li>
    <p>OS just tells DMA engine address of data in memory that should be sent
to device, and DMA carries out request, then DMA controller raises
interrupt to tell OS that transfer is complete</p>
  </li>
  <li>How should hardware communicate with device?</li>
  <li>Can used privileged hardware I/O instructions (e.g. <code class="language-plaintext highlighter-rouge">in</code>/<code class="language-plaintext highlighter-rouge">out</code>,
specifying CPU registers with data and port)</li>
  <li>
    <p>Also can do <em>memory-mapped I/O</em>, where OS issues load/store to
specific address to communicate with ddevice</p>
  </li>
  <li>How to keep OS mostly device-neutral, hiding device interaction
details?</li>
  <li><em>Device driver</em> abstraction: software that tells OS how to interact
with device</li>
  <li>Device drivers make up 70% of Linux kernel! Also sometimes written by
scrubs, cause a lot of kernel crashes</li>
  <li>
    <p>OS code to interact with these devices just uses calls as you’d
expect, based on the driver interface</p>
  </li>
  <li>This chapter: interrupt and DMA for device efficiency, I/O
instructions and memory-mapped I/O for device communication</li>
</ul>

<h4 id="ostep-ch-37-hard-disk-drives">OSTEP Ch 37: Hard Disk Drives</h4>

<ul>
  <li>
    <p>How do hard disk drives store data? What is the interface? How is the
data laid out and accessed? How does disk scheduling improve
performance?</p>
  </li>
  <li>Modern disk</li>
  <li>Atomic 512-byte operations. <em>Torn write</em> when you want to do a larger
write but you die in the middle</li>
  <li><em>Platter</em>: one circular hard surface on which data is stored
persistently by inducing magnetic changes to it</li>
  <li>Disk can have multiple platters, each with two surfaces</li>
  <li>Platters bound together around <em>spindle</em>, connected to motor that
spins it around</li>
  <li>RPM: platter rotations per minute</li>
  <li><em>Track</em>: one of the many concentric circles on each surface</li>
  <li><em>Disk head</em>: reads/writes magnetic patterns</li>
  <li>
    <p><em>Disk arm</em>: moves across surface to position disk head over desired
track</p>
  </li>
  <li>Request processing</li>
  <li><em>Rotational delay</em>: how long it takes for desired sector to rotate
under disk head</li>
  <li><em>Seek time</em>: moving disk arm to the correct track :). Takes an
acceleration, coasting, deceleration, settling</li>
  <li>After rotation and seek, <em>transfer</em> can happen</li>
  <li>Disks have caches to hold some small amt of data, ez</li>
  <li>
    <p>Blah blah, doing some fraction simplification</p>
  </li>
  <li>I/O time?</li>
  <li>Size of transfer / time transfer took = rate of I/O</li>
  <li>Two scenarios: random workload, sequential workload</li>
  <li>
    <p>Order of magnitude difference. Use sequential whenever possible!</p>
  </li>
  <li><em>Disk scheduler</em> schedules disk operations</li>
  <li>Estimate seek and rotational delay, greedily pick the one that will
take the shortest amount of time :)</li>
  <li>SJF (shortest job first)</li>
  <li>This stuff is easier to estimate on disk than job scheduling</li>
  <li>Want to seek as few times as possible
    <ul>
      <li>Need to avoid starvation though, where you get a steady stream of
local requests and a request farther away never executes</li>
    </ul>
  </li>
  <li>SCAN goes from inner to outer tracks in order, ez?</li>
  <li>Doesn’t account for rotation :/</li>
  <li>End up at SPTF (shortest positioning time first) (also shortest access
time first)</li>
  <li>Estimate seek delay and rotation delay, go to the smallest one</li>
  <li>
    <p>Can age requests to help with starvation</p>
  </li>
  <li>Some issues</li>
  <li>Merging disparate I/O  from the same origin</li>
  <li>How long should system wait before issuing I/O request? Wait a lil bit
just in case you get a “better” request, or so that you can do
<em>vectored</em> interrupts</li>
  <li>
    <p>:thik</p>
  </li>
  <li>Good intro to hard disk drives :)</li>
  <li>Outdated a bit, but need the foundation</li>
</ul>

<h4 id="ostep-ch-38-redundant-arrays-of-inexpensive-disks-raids">OSTEP Ch 38: Redundant Arrays of Inexpensive Disks (RAIDs)</h4>

<ul>
  <li>Large, fast, reliable disk?</li>
  <li>RAID is super complicated</li>
  <li>Advantages:
    <ul>
      <li>Performance. Parallel access super fast</li>
      <li>Capacity. Can store lots</li>
      <li>Redundancy. Can tolerate loss :)</li>
    </ul>
  </li>
  <li>
    <p><em>Transparency</em> is a darn good principle - can you add functionality
without imposing more of a burden on your user/client?</p>
  </li>
  <li>System issues <em>logical</em> I/O to RAID, which does some calculation and
then does the rgiht corresponding <em>physical</em> I/O</li>
  <li>
    <p>RAID can be thought of as a specialized computer system running
special disk access software</p>
  </li>
  <li>Fault model critical to understanding these things</li>
  <li>
    <p><em>Fail-stop</em>: disk can be working or failed. Working = do stuff, failed
= assume permanently lost</p>
  </li>
  <li>Properties:</li>
  <li>Capacity (total capacity - redundant copies)</li>
  <li>Reliability</li>
  <li>
    <p>Performance (workload-dependent :/)</p>
  </li>
  <li>Patterson/Gibson/Katz at Berkeley came up with important RAID designs</li>
  <li>Keep in mind <em>mapping problem</em>: how to translate logical I/O request
to exact disk and offset in RAID</li>
  <li>Level 0: <em>striping</em>: stripes, 0 1 2 3, 4 5 6 7, etc. across disks</li>
  <li>0 1 2 3 is a stripe there</li>
  <li>Chunk size is how much of one stripe is on one disk before moving to
next one</li>
  <li>Level 0: perfect capacity, wacko reliability (any failure leads to
loss), performance is great since all disks are used :)</li>
  <li>Some metrics: single-request latency (how long one request takes),
steady-state throughput (total bandwidth of many concurrent requests;
how much can you handle?)</li>
  <li>Same random/sequential access measurements as before</li>
  <li>Raid-0 has same single request latency as one disk :)</li>
  <li>
    <p>Okay</p>
  </li>
  <li>Level 1: Mirroring, make one extra copy of each block in system, on a
separate disk</li>
  <li>Half capacity</li>
  <li>Decent reliability (can handle one disk failure, cool)</li>
  <li>Reaad latency is good, write latency is up to double since it has to write
to two places. IRL writes are parallelized, but still have to wait for
longer one</li>
  <li><em>Consistent-update problem</em> in RAIDs: if crash in between write 1 and
write 2 of same data, you screwed.</li>
  <li>To fix, use a write-ahead log that keeps track of operations you were
about to do if you lose power at a bad time. When you recover, just
apply those transactions</li>
  <li>
    <p>Most of these performance metrics are intuitive :)</p>
  </li>
  <li>Level 4: Disk with parity!</li>
  <li>You have a parity disk that has the xor of the stripe from all the
other disks</li>
  <li>If one disk goes down, you can recover what it had by returning to the
same xor values</li>
  <li>Better capacity than level 1</li>
  <li>But can only tolerate one disk failure</li>
  <li>
    <p>Boring performance analysis, zzz</p>
  </li>
  <li>Level 5: Rotating parity</li>
  <li>Parity block for each stripe is now rotated across the disks, in order
to remove the parity-disk bottleneck from RAID-4</li>
  <li>Better random read performance</li>
  <li>Most of analysis is the same :)</li>
  <li>This is dominant now</li>
  <li>
    <p>Cool, table of performances here</p>
  </li>
  <li>Transform independent disks into large, more capacious, more reliable
single entity <em>transparently</em> :) :)</li>
  <li>More of art than science to pick correct RAID layout and such</li>
  <li>Cool</li>
</ul>

<h4 id="ostep-appendix-flash-based-ssds">OSTEP Appendix: Flash-based SSDs</h4>

<ul>
  <li>Pretty applicable. Solid-state storage, with no moving parts</li>
  <li>Retains info during power loss</li>
  <li>Write a <em>flash page</em> by erasing a <em>flash block</em> first; writing same
page too often will <em>wear it out</em></li>
  <li>How sway</li>
  <li>Hierarchy: block-&gt;page-&gt;content</li>
  <li>Operations: read page, erase block (must happen before writing),
program page</li>
  <li>States: invalid (start), erased (after erase), valid (after
programmed)</li>
  <li>
    <p>Okay. Read is easy, write is harder. Must copy data we care about
somewhere else first, and also have to deal wit wear out</p>
  </li>
  <li>Evaluate flash</li>
  <li>Latency is p good; reading is superfast, programming is okay, erasing
takes a ton of time</li>
  <li>More reliable than hard disk since no moving parts</li>
  <li>
    <p>Can have disturbances when you write to one page and bits get flipped
elsewhere. dang</p>
  </li>
  <li>How to use this as storage?</li>
  <li>Flash chips for persistent storage :)</li>
  <li>Must provide standard block interface on top of your flash chips</li>
  <li><em>Flash translation layer</em> satisfies client reads and writes and turns
them into flash operations if need be</li>
  <li>Performance achieved by parallel flash chip usage
    <ul>
      <li>Reduce write amplification (total write traffic from flash chips to
FTL / total write traffic)</li>
    </ul>
  </li>
  <li>Direct mapping of logical page to physical page sucks. Tons of erases
and writes. Wear out of hot paths is RIP</li>
  <li>Log structure is better</li>
  <li>On a logical write, write appended to next free spot in
currently-being-written-to block (this is logging)</li>
  <li>Mapping table stores physical address of each logical block</li>
  <li>Okay, example. Think I get it. Compact stuff so you can avoid wear
out, do as few erases as possible, avoid program disturbance</li>
  <li>
    <p>Big improvement :)</p>
  </li>
  <li>Garbage collection</li>
  <li>Get garbage when you have old versions of data around the drive (stuff
that’s been overwritten elsewhere)</li>
  <li>Find a block that contains one or more garbage pages</li>
  <li>Read live pages from that block</li>
  <li>Write those pages to the log</li>
  <li>Reclaim entire block for use in writing</li>
  <li>
    <p>Each block needs metadata on whether or not data in page is live</p>
  </li>
  <li>Mapping table gets big; page-based mapping is impractical. Maybe try
with block-level FTL? Akin to having bigger page sizes in virtual
memory :)</li>
  <li>Bleh, lose granularity so you need to do a copy and stuff on every
write</li>
  <li>Issue when writes are smaller than physical block size. Sigh</li>
  <li><em>Hybrid mapping</em>: reserve specific blocks for writing, keep a page
mapping for those. Keep a block mapping for everything else</li>
  <li>Page mapping = log table, block mapping = data table</li>
  <li>Look at log table adn then page table when searching for a logical
block</li>
  <li>Okay</li>
  <li>
    <p>All this time, make sure to keep wear leveling in account</p>
  </li>
  <li>Is everything flash chips? Where do you keep the other stuff
persistently?
    <ul>
      <li>Flash chips for persistent storage, cool. Tricky part is just
knowing that stuff can get moved around, got it</li>
    </ul>
  </li>
  <li>More performant, more expensive than hard disk drives</li>
  <li>State of the art is a doozy</li>
</ul>

<h4 id="lecture-5">Lecture</h4>

<ul>
  <li>Device drivers suck :( hardest part of kernel development</li>
  <li><em>Livelock</em> is opposite of deadlock: so many interrupts that you can’t
tell the machine to stop accepting them!!</li>
  <li>DMA: devices don’t map to virtual addresses, they map to physical
memory when the kernel boots up</li>
  <li><em>inode</em>: struct that represents a file or directory object</li>
  <li>time updated, time created, type (file/dir)</li>
  <li>blocks[64], where the blocks to get this file at are from?</li>
</ul>

<h3 id="8---file-systems">8 - File Systems</h3>

<h4 id="ostep-ch-39-file-systems-introduction">OSTEP Ch 39: File Systems: Introduction</h4>

<ul>
  <li>
    <p>How should the OS manage a persistent device? What are the APIs?</p>
  </li>
  <li><em>File</em>: linear array of bytes, each of which can be read or written
    <ul>
      <li>Has a low-level name (number of some kind): its <em>inode number</em></li>
      <li>FS doesn’t know what type of file, it just stores the bytes</li>
    </ul>
  </li>
  <li><em>Directory</em>: contents are a list of &lt;user name, inode name&gt; pairs
    <ul>
      <li>Has an inode number of its own</li>
      <li>Each entry refers to a file or other dir</li>
      <li>Results in directory tree</li>
    </ul>
  </li>
  <li><em>Root directory</em> is start of the hierarchy on Unix
    <ul>
      <li>Separator like “/” names subdirectories until desired subdir or file
is named</li>
    </ul>
  </li>
  <li>
    <p>Naming is hard!! Everything on Unix can be named on file system, which
is a handy abstraction</p>
  </li>
  <li>File system ops</li>
  <li><code class="language-plaintext highlighter-rouge">open()</code> to create or open file. Returns a <em>file descriptor</em>
    <ul>
      <li>A private per-process integer used to access files. It’s an opaque
handle giving you power to perform certain operations</li>
      <li>0 is stdin, 1 is stdout, 2 is stderr, so the first open() gives you
3</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">strace</code> handy! Checks system calls made by program while it runs</li>
  <li><code class="language-plaintext highlighter-rouge">lseek</code> to move the <em>file offset</em> to a specific place. Doesn’t
actually move disk head! Just changes value in software</li>
  <li><code class="language-plaintext highlighter-rouge">fsync</code> persists writes that are in-flight, :zzz:</li>
  <li><code class="language-plaintext highlighter-rouge">rename</code> is <em>atomic</em> op to rename a file</li>
  <li><code class="language-plaintext highlighter-rouge">stat &lt;file&gt;</code> gives you info about file</li>
  <li><code class="language-plaintext highlighter-rouge">unlink</code> to remove a file. Why “unlink”?
    <ul>
      <li>Opposite of <code class="language-plaintext highlighter-rouge">link</code> which creates another way to refer to same file.
Remove yourself from list of links from that file == “delete”. File
deleted when <em>reference count</em> becomes 0, sigh</li>
    </ul>
  </li>
  <li><em>Symbolic link</em> different from hard link
    <ul>
      <li>Has pathname of linked-to file as data of symlink file</li>
      <li>If original file removed, you have a <em>dangling reference</em>, oops</li>
    </ul>
  </li>
  <li>
    <p>Finally, <code class="language-plaintext highlighter-rouge">mount</code> takes existing dir as a target <em>mount point</em> and
pastes a new file system into directory tree at that point. Many diff
file systems on your system!</p>
  </li>
  <li>Then directory stuff</li>
</ul>

<h4 id="ostep-ch-40-file-systems-implementation">OSTEP Ch 40: File Systems: Implementation</h4>

<ul>
  <li>
    <p>How can we build a simple file system? What structures are needed on
disk? What do they need to track? How are they accessed?</p>
  </li>
  <li>Mental models of filesystems</li>
  <li><em>Data structures</em>: what types of on-disk structures are utilized by
the file system to organize data and metadata?</li>
  <li>
    <p><em>Access methods</em>: how does it map calls made by process
(open/read/write) onto its structures? What data structures do you
read/write from to make this stuff happen?</p>
  </li>
  <li>Start FS by dividing disk into 4kb blocks</li>
  <li><em>Data region</em> is blocks for actual stuff, majority of our space should
be for this</li>
  <li><em>Inode table</em> stores all of our inodes
    <ul>
      <li>Inode table size limits # of files you can have on disk!</li>
      <li>Inode short for <em>index node</em></li>
    </ul>
  </li>
  <li>Need a <em>free list</em> or <em>bitmap</em> to track free space in inode table/data
region
    <ul>
      <li>Bitmap: each bit is 1 or 0 to indicate whether block at that index
is free or nah</li>
    </ul>
  </li>
  <li>Finally, <em>superblock</em> has metadata about FS; # of inodes, # of data
blocks, where inode table lives, etc.
    <ul>
      <li>OS reads this when first mounting a filesystem</li>
    </ul>
  </li>
  <li>Index into inode table to find your inode, then you can jump to place
on disk where your file lives!
    <ul>
      <li>Bunch of data on the inode - permissions, size, owner, etc.</li>
    </ul>
  </li>
  <li>Can have <em>direct pointer</em> from inode to location on disk</li>
  <li>Say you have 12 direct pointers and run out - keep one <em>indirect
pointer</em> that points to a separate block that contains many more
pointers which point to user data. Indirection hooray
    <ul>
      <li>Can also do an extent (pointer+length), but whatever</li>
      <li>Also you can nest all of these pointers, of course…</li>
    </ul>
  </li>
  <li>
    <p>Why this design? Most files are small, so can be covered by the direct
pointers :)</p>
  </li>
  <li>Directories! Store info about each child file/dir
    <ul>
      <li>inode number, record length (length of name + padding), string length
(actual length of name), and name itself</li>
    </ul>
  </li>
  <li>
    <p>Stored in the same way as files! Inode has direct pointer to space on
block for dir</p>
  </li>
  <li>
    <p>Free space management is a doozy as usual. Our bitmap works for simple
filesystem though. Could get fancy with B tree</p>
  </li>
  <li>Now let’s consider access methods</li>
  <li>Data structures to be touched for reading /foo/bar:
    <ul>
      <li>Data bitmap</li>
      <li>inode bitmap</li>
      <li>Root inode</li>
      <li>Foo inode</li>
      <li>Bar inode</li>
      <li>Root data</li>
      <li>foo data</li>
      <li>bar data[0]</li>
      <li>bar data[1]</li>
      <li>bar data[2]</li>
    </ul>
  </li>
  <li>File read timeline is straightforward</li>
  <li>Write to the /foo/bar inode with the last access time whenever you
continue your read</li>
  <li>
    <p>Allocation structures only accessed for allocations (writes, creates),
not reads</p>
  </li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>As you can tell, this is a LOT of I/O :</td>
          <td>how fix?</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>Keep a fixed-size LRU cache in memory for frequently accessed files
and such</li>
  <li>Can use <em>write buffering</em> to batch up writes close together, wait to
see if maybe file gets deleted so no write needed, etc.</li>
  <li><em>Durability/Performance tradeoff</em>: think of the types of applications
you are servicing, and make the pragmatic decision. E.g. databases
need durability</li>
  <li>Cool beans, this is filesystems!</li>
</ul>

<h4 id="ostep-ch-41-locality-and-the-fast-file-system">OSTEP Ch 41: Locality and the Fast File System</h4>

<ul>
  <li>
    <p>First file system as outlined last chapter was slow, got slower as
disk filled up, treated disk like it was RAM (BAD!), got fragmented :/</p>
  </li>
  <li>
    <p>How do you organize file system data structures to improve
performance? What type of allocation policies should live on top of
those data structures? How do we make the file system “disk aware”?</p>
  </li>
  <li>First pass: FFS (Fast File System)</li>
  <li>Keep same interface, but with different implementation</li>
  <li>Divide disk into <em>block groups</em> or <em>cylinder groups</em>, basically for
spacial locality of data on disk</li>
  <li>In each group, keep a supernode, inode bitmap, data bitmap, inodes,
and data!</li>
  <li>Aside: file creation is a lot of work! Need to update data bitmap,
data block, directory, inode of directory, whew</li>
  <li><em>Keep related stuff together</em>
    <ul>
      <li>dirs: balance across groups by finding a group with low # of dirs</li>
      <li>files: allocate data blocks of file in same group as its inode, put
all files in same directory in the same group as their directory.
Cool</li>
    </ul>
  </li>
  <li>These aren’t research heuristics :) they are simply based on <em>common
sense</em>: files in same dir are often accessed together</li>
  <li><em>Large file exception</em>: instead of filling all space in one group with
large file, spread across multiple groups.
    <ul>
      <li>Performance hit :/ but try to make the cost of moving b/t groups
<em>amortized</em>; if you spend most of your time transferring data from
disk (since it’s a large file), cost of seeking is amortized</li>
    </ul>
  </li>
  <li>For small files: use a set of 512B sub-blocks, allocate those, when
you allocate a 4kb page worth of sub-blocks, copy to a new location
and free the sub-blocks :). Can also buffer small file writes. Cool</li>
  <li>
    <p>Lesson for all CS: FFS was <em>usable</em>, included several nicety features
that can’t necessarily be researched (symlinks, long file names,
atomic rename), which drove adoption</p>
  </li>
  <li>FFS was a big step. Major takeaway: <em>treat the disk like it’s a disk</em></li>
</ul>

<h4 id="ostep-ch-42-crash-consistency-fsck-and-journaling">OSTEP Ch 42: Crash Consistency: FSCK and Journaling</h4>

<ul>
  <li>
    <p>System may crash/lose power between writes, leaving on-disk state
partially updated. Given that crashes occur at arbitrary points in
time, how do we ensure that the file system keeps the on-disk image in
a reasonable state?</p>
  </li>
  <li>Take one write. Must write to the inode, the bitmap, and the data
block. At minimum</li>
  <li>When can you crash?
    <ul>
      <li>Just data block written todisk</li>
      <li>Just inode written to disk</li>
      <li>Just updated bitmap is written to disk</li>
      <li>Any combination of two of these</li>
      <li>Sigh</li>
    </ul>
  </li>
  <li>
    <p><em>Crash consistency problem</em>: How can you make this write <em>atomic</em>,
even though disk only commits one write at a time?</p>
  </li>
  <li>Naive/early: <code class="language-plaintext highlighter-rouge">fsck</code> (File system checker). Run before file system is
mounted/made accessible
    <ul>
      <li>Sanity check superblock. If bad, maybe use a copy</li>
      <li>Check free blocks - if inodes/bitmaps inconsistent, trust the inodes</li>
      <li>Check inode state - valid enums, etc. Suspect inodes cleared</li>
      <li>Check inode link count by building its own link count map and
comparing to values in inodes</li>
      <li>Check duplicate inodes pointing to same block. Can copy or clear</li>
      <li>zzzzz</li>
    </ul>
  </li>
  <li>
    <p>Doesn’t scale well. Also inefficient - basically,
search-the-entire-house-for-keys instead of doing a smarter search</p>
  </li>
  <li><em>Write-ahead logging</em>, called <em>journaling</em> in file systems. We’ve seem
this before :)</li>
  <li>When updating disk, before overwriting structures, write a log entry
describing what you’re about to do</li>
  <li>If crash during update, go back and look at node and see exactly what
needs fixing and how to fix it</li>
  <li>Tradeoff: adds work during updates to reduce work during recoveries</li>
  <li>Each entry is associated with a <em>transaction identifier</em>. Naive
approach is to have each log entry keep the exact contents of blocks
(<em>physical logging</em>) that you are updating</li>
  <li><em>Checkpointing</em> is looking at the log and applying the actions. If all
actions complete, you’ve successfully checkpointed and are basically
done. So the two steps are <em>journal write</em> and <em>checkpoint</em></li>
  <li>What if you crash when writing to journal?
    <ul>
      <li>First, write everything except TxnEnd block to journal</li>
      <li>When the writes complete, write the TxnE block</li>
      <li>If you see that there’s no TxnE block, you know that the journal
write was incomplete</li>
      <li>This <em>journal commit</em> step is b/t journal write and checkpoint</li>
    </ul>
  </li>
  <li>Simple recovery: <em>redo logging</em>, just replay all the things in the
log. A few redundant writes don’t hurt, since you don’t do this often
(hopefully)</li>
  <li>
    <p>Buffering helps avoid excessive write traffic again - if you have two
close-by file creates, can batch them into one transaction :)</p>
  </li>
  <li>What do about journal size?</li>
  <li>Similar to a <em>ring buffer</em>, make it circular by just keeping a pointer
to the first non-garbage transaction :)</li>
  <li>After checkpointing, mark the transaction free in the journal by
updating the journal superblock</li>
  <li>What about cost of <em>data journaling</em>, basically dual writing
everything?
    <ul>
      <li>Try <em>metdata journaling</em> instead (this is more common!)</li>
      <li>Journal only keeps inode and block info, do the <em>data write</em> before
you do anything to the journal. Ensure pointer never points to
garbage</li>
    </ul>
  </li>
  <li>
    <p>Tricky corner case: if you reuse a block in your log that used to be a
dir but is now a file, your metadata log contains info about writing
dir info but not user data (since dir info considered metadat). If you
add a <em>revoke</em> entry to your log, recovery will look for all entries
that have been revoked and not apply them</p>
  </li>
  <li>
    <p>Lots of other approaches to this problem! Cool beans ig</p>
  </li>
  <li>If you don’t wanna write “COMMIT”, you can write a checksum of the
journal entry contents at the beginning and end of the entry instead.
Saves one step</li>
</ul>

<h4 id="ostep-ch-43-log-structured-file-systems">OSTEP Ch 43: Log-structured File Systems</h4>

<ul>
  <li>New file system. Why?
    <ul>
      <li>System memory growing, more space for cache</li>
      <li>Large gap between random and sequential I/O is felt more</li>
      <li>Existing FS perform poorly on common workloads; simple write takes a
lot of I/O</li>
      <li>FS aren’t RAID-aware; to do small amount of parity writing, yucky
amount of I/O takes place</li>
    </ul>
  </li>
  <li><em>Log-structured file system</em>: buffer all updates in an in-memory
<em>segment</em>; when segment is full, it is written to disk in one long,
sequential transfer to unused part of disk
    <ul>
      <li>Always to a free location</li>
      <li>Large segment = efficient disk use</li>
    </ul>
  </li>
  <li>How can a file system transofrm all writes into sequential writes?
Can’t do this for reads since you don’t decide, but can control for
writes!</li>
  <li>Basically, instead of writing inodes and data in separate places,
write it all in a row</li>
  <li>
    <p><em>Write buffering</em>: LFS keeps track of updates in memory before writing
to disk. When it has enough stuff, it writes the entire segment at
once, which is efficient</p>
  </li>
  <li>How much to buffer?
    <ul>
      <li>Every time you write, you pay a fixed overhead of positioning cost.
Need to make write big enough to amortize that cost. Wait too long
though, and you may be screwed</li>
    </ul>
  </li>
  <li>How do you find an inode? Use <em>inode map</em> (imap). Take inode number as
input and produces disk address of most recent version of inode</li>
  <li>Imap is also written sequentially!! How tho <strong>ask</strong></li>
  <li>Now how to find these disparate imap locations? With the disk’s
(fixed) <em>checkpoint region</em>
    <ul>
      <li>Pointers to latest pieces of inode map so you can start to find your
way around</li>
      <li>Only update this every 30 seconds or so</li>
      <li>Can be read into memory first, following checkpoint region all the
way down</li>
    </ul>
  </li>
  <li>Directory structure basically identical to other FS - &lt;name, inode
number&gt; pairings</li>
  <li>To access /tiger/foo, first look up location of tiger dir in imap,
readthe dir inode, which gives you location of dir data, which gives
you mapping of name to inode number, then look up the inode for foo,
once you find it you can get to foo. Cool</li>
  <li><em>Recursive update problem</em>: happens if FS doesn’t update in place, but
rather moves to a new spot
    <ul>
      <li>When inode updated, location on disk changes, which changes the dir
pointing to that file, which causes changes all the way up the tree</li>
      <li>To solve: rather than updating the dir itself, update the imap
structure to point to new location:)</li>
    </ul>
  </li>
  <li>Garbage collection? Old versions are hanging around because you only
write new versions of files
    <ul>
      <li>Done by <em>compacting</em> M existing segments (with mixed live and dead
data) into a smaller number N new segments with just the live data.
Can then clean all of M</li>
    </ul>
  </li>
  <li>
    <p>Use <em>segment summary block</em> at head of segment describing inode number
and offset of each data block in the segment. Look up inode of file
from imap, if the offset in your segment matches the data that is in
the imap, you know your data is live</p>
  </li>
  <li>Recovery?</li>
  <li>Crash during CR write: a) keep two copies of CR, one at each end of
file system, for atomicity. b) When writing to CR, write a header with
timestamp, then update, then a footer with timestamp - if header
present but not footer, you don’t have a complete picture</li>
  <li>
    <p>Lose stuff since last checkpoint though? Not quite. Try a <em>roll
forward</em> using log stored in the CR, try to apply any of the changes
you can</p>
  </li>
  <li>This <em>copy-on-write</em> approach enables highly efficient writing :)</li>
</ul>

<h4 id="ostep-ch-44-data-integrity-and-protection">OSTEP Ch 44: Data Integrity and Protection</h4>

<ul>
  <li>Basically, new storage mechanisms open up new types of faults, and we
need to come up with new solutions</li>
</ul>

<h4 id="xv6-ch-6">xv6 ch 6:</h4>

<h4 id="lecture-6">Lecture:</h4>

<ul>
  <li>Really great problem solving here by journaling, folks</li>
  <li>Everything hinges on <em>commit</em> keyword</li>
</ul>

<h3 id="9---review">9 - Review</h3>

<h4 id="lecture-7">Lecture</h4>

<h5 id="gary-bernhardt---the-birth-and-death-of-javascript">Gary Bernhardt - The Birth and Death of JavaScript</h5>

<ul>
  <li>https://www.destroyallsoftware.com/talks/the-birth-and-death-of-javascript</li>
  <li>JavaScript sucked in the beginning</li>
  <li>Yikes, at first you get a ton of weeeeeeeird language stuff</li>
  <li>Then ASM.js which allows you to get native integer adds and stuff, if
you type annotate your code (i.e. x|0 (bitwise or) casts to integer)
finally in JavaScript
    <ul>
      <li>An extraordinarily optimizable, low-level subset of JavaScript. NOt
bad. Helps run games and terminals in browser</li>
      <li>C programs can compile to asmjs</li>
    </ul>
  </li>
  <li>Digression: how computers actually work</li>
  <li>Virtual Memory: ez</li>
  <li>Protection: Ring 3 protection (userland, can’t manipulate physical
memory and stuff)
    <ul>
      <li>Kernel runs in Ring 0, which has these permissions</li>
    </ul>
  </li>
  <li>Function calls - jump around in instruction pointer</li>
  <li>Finally, syscalls
    <ul>
      <li>Userland pushes registers, firest interrupt</li>
      <li>Kernel traps interrupt, switch to ring 0, switch Virtual Memory
Table, jump to syscall code
        <ul>
          <li>Context switch is overhead</li>
          <li>If you compile to JS, you can have your VM in the kernel and no
context switches plz</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>ASM goes through VM still -20%; on metal, you get 20% performance gain</li>
  <li>His definition of metal: Kernel + asm.js + DOM at native speed</li>
</ul>

<h5 id="booting-up">Booting Up</h5>

<ul>
  <li>Press power button, current flows, detect RAM
    <ul>
      <li>No RAM? Gotta do some beeps, cause can’t display anything without
RAM</li>
    </ul>
  </li>
  <li>Load program from BIOS into RAM and run (512kb)
    <ul>
      <li>Basic Input/Output Sytem (Read-only memory)</li>
      <li>Checks for connected devices</li>
      <li>Comes with computer</li>
    </ul>
  </li>
  <li>Look for boot sector - this is on desk
    <ul>
      <li><em>Contains</em> boot loader (512 bytes)</li>
      <li>Must find one on one of the disks</li>
      <li>Pick a kernel to boot up into</li>
    </ul>
  </li>
  <li>Kernel is loaded
    <ul>
      <li>Climb to long mode (go up from 16 bit instructions to 64)</li>
      <li>Configure CPU
        <ul>
          <li>Interrupt handlers - syscall, etc.</li>
          <li>How often to do a timer interrupt. Can have multiple!</li>
          <li>Configure page table</li>
          <li>Configure protection rings</li>
        </ul>
      </li>
      <li>Configure other hardware</li>
      <li>Load kernel threads into schedule table</li>
      <li>Load process 0</li>
      <li>Execute process 0
        <ul>
          <li>
            <h2 id="start-daemon-processes-will-run-forever-in-dependency-order">Start daemon processes (will run forever) in dependency order</h2>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Check out Mozilla OS Guide?</li>
</ul>

<h3 id="extras">Extras</h3>

<ul>
  <li>Inode has id, type, blocks, permissions, times (modified, created),
nlinks, size</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2017/03/26/bradfield-operating-systems/</guid>
                <description>
                    
                    Lecture notes from Bradfield's operating systems class
                    
                </description>
                <pubDate>Sun, 26 Mar 2017 00:00:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Computer Networking</title>
                <link>http://tigerthinks.com/2017/03/26/bradfield-networking/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<h3 id="misc">Misc</h3>

<ul>
  <li>Book PDFs: https://people.cs.clemson.edu/~jmarty/courses/kurose/</li>
  <li>More: http://jpkc.ncwu.edu.cn/jsjwl/zjxx.asp?id=2</li>
  <li>Slides: https://people.cs.clemson.edu/~jmarty/courses/kurose/</li>
</ul>

<h3 id="1-the-big-picture-layers-of-protocols">1: The big picture: layers of protocols</h3>

<h4 id="kr-ch-1-computer-networks-and-the-internet">K&amp;R Ch 1: Computer Networks and the Internet</h4>

<ul>
  <li>Start at the Internet and go down into the links and switches</li>
  <li>
    <p>After survey of implementations, look at things more abstractly -
models for throughput, delay, transmission, propagation, queueing,
architecting, etc.</p>
  </li>
  <li>Nuts and bolts of Internet</li>
  <li>Internet is a network that interconnects a bunch of devices all over
the world</li>
  <li>Each device is a <em>host</em></li>
  <li>Connections made by <em>communication links</em> (cables, wires, fibers,
etc., each with different transmission rates) and <em>packet switches</em>
(takes a packet arriving on communication link and forwards packet on an
outgoing communication link)</li>
  <li>Commonest packet switchers are <em>routers</em> (in network core) and
<em>link-layer switches</em> (in access networks)</li>
  <li>Sequence of communication links and packet switches from start to end
is the <em>route</em> through the network</li>
  <li>Mental model: similar to networks of highways, roads, intersections.
Packets are trucks, links are highways/roads, switches are
intersections, end systems are buildings</li>
  <li>Each ISP (internet service provider) is a network of switches and
links. Conform to conventions so that they can all access internet
similar way</li>
  <li>Protocols control send/receive info. TCP (Transmission Control) and IP
(Internet) are very important. Together, TCP/IP</li>
  <li>
    <p>Standards come from the IETF (Internet Engineering Task Force), whose
RFCs define protocols and stuff</p>
  </li>
  <li>Services of Internet</li>
  <li>It’s an infrastructure that provides services to applications like web
apps, social networks, IMs, etc.</li>
  <li>How do these apps communicate? By following an API (Application
Programming Interface). Set of rules that sending program mnust follow
so that the Internet can deliver data to the destination program
    <ul>
      <li>Postal service API: stamp, from address, return address, post
office, etc.</li>
    </ul>
  </li>
  <li>Protocols</li>
  <li>Human analogy: when meeting someone, “Hi how are you my name is
Tiger”, etc etc.</li>
  <li>There are specific messages we send and actions we take in response to
the received reply messages or other events (like no reply)</li>
  <li>Human analogy: “Got a question?” “Yes” “Yay, what is it?”</li>
  <li>All Internet activity is governed by a protocol. <em>Protocol</em> defines
the format and order of messages exchanged between two or more
communicating entities, as well as the actions taken on the transmission
and/or receipt of a message or other event</li>
  <li>
    <p>Mastering networking === understanding what/why/how of protocols</p>
  </li>
  <li>What’s on the edge of the network? Hosts and what they immediately
talk to</li>
  <li>Hosts can be clients (ask for stuff) and servers (return stuff)</li>
  <li><em>Access network</em>: network that physically connects edge router (first
router) on a path from one host to a distant host. Can be home
network, mobile network, ISP network, or enterprise network</li>
  <li>DSL (digital subscriber line) piggybacks off the telephone company’s
access, at different frequencies</li>
  <li>Cable internet access piggybacks off of the cable TV company’s
infrastructure. Bit faster. Shared network, so it’s slow if everyone’s
downloading video files at the same time</li>
  <li>Ethernet is a switch that is custom and connected to internet. Common
for corporate/university/home networks</li>
  <li>Finally, wireless LAN connects to access point that is in turn
connected to the wired internet. Based on 802.11 tech, more
colloquially known as WiFi</li>
  <li>
    <p>Wide-area access in the form of 3G and LTE. Use same tech as cell
phones to send/receive packets through cell towers</p>
  </li>
  <li>Overview of physical media</li>
  <li>Whenever you go from transmitter to receiver, you go through physical
medium</li>
  <li>Guided media: waves guided along solid medium. Fiber, twister-pair
copper wire, coaxial cable</li>
  <li>Unguided media: waves propagate in the atmosphere and outer space,
such as in wireless communication</li>
  <li>Cost of materials dwarfed by cost of labor, so in buildings you’ll lay
down all three of twisted pair, fiber, and coaxial just in case
another gets used in the future</li>
  <li>Twister-pair copper: least expensive, most common, used by phones. Up
to 10Gbps</li>
  <li>Coaxial: used in cable TV. Shared medium</li>
  <li>Fiber optics: up to hundreds of gigabits per second. Immune to
electromagnetic interference, used for overseas links and stuff. Cost
a lot tho</li>
  <li>
    <p>Satellites and terrestrial radio channels don’t require physical wire
to be installed, can receive signals over the air</p>
  </li>
  <li>Okay, now the core of the network</li>
  <li>Packet switching</li>
  <li>Message broken down by source into chunks called packets</li>
  <li>Packets transmitted as fast as the communication link can do it</li>
  <li><em>store-and-forward</em>: packet switch waits until it has the entire
packet before it begins transmitting it</li>
  <li>Each switch has an output buffer for each attached link. This stores
packets while the link is busy. Output buffer time is a <em>queuing
delay</em></li>
  <li>If you get new packet and output buffer is full, oops you got packet
loss</li>
  <li>How does router know which link to forward packet onto? Each router
has a forwarding table that maps destination addresses (or portions of
them) to the outbound links. When packet arrives, router examines the
destination and forwards to correct outbound link
    <ul>
      <li>Analogy: car driver that keeps asking for directions of more and
more specific parts of his destination address (Florida -&gt; Orlando
-&gt; 145 Lakeside Dr)</li>
    </ul>
  </li>
  <li>How are forwarding tables set? Using the Internet’s standard routing
protocols. Use shortest path or something</li>
  <li>
    <p>Packet switching is how internet operates</p>
  </li>
  <li>Circuit switching e.g. for telephone lines. Analogous to making a
reservation at restaurant so you have dedicated space (vs. packet
switching using available resources)</li>
  <li>Packet switchers say it makes better use of resources and is easier to
implement
    <ul>
      <li>Way more resource efficient!</li>
    </ul>
  </li>
  <li>Packet switchers say circuit switching is wasteful during dead periods</li>
  <li>
    <p>Circuit switchers say packet switchers can’t do real time stuff b/c
it’s unreliable</p>
  </li>
  <li>Where are we now? <em>The internet is a network of networks.</em> Gotta
connect everyone to everyone else!</li>
  <li>Build up from the bottom!</li>
  <li>https://gyazo.com/d1d1155212f7f875754566fbf96ab207</li>
  <li>
    <p>Consists of a dozen or so tier-1 ISPs and hundreds of thousands of
lower-tier ISPs. They have diverse coverage all over the globe. Low
tier ISPs connect to higher tier ISPs, which interconnect to one
another. Users are customers of lower-tier ISPs, who are customers of
higher-tier ISPs. Sometimes the Googles of the world also create their
own networks and connect to lower-tier ISPs</p>
  </li>
  <li>Delay/loss/throughput in packet switching :’(</li>
  <li>
    <p>Constraints make it so that we can’t always have the throughput we
want</p>
  </li>
  <li>How do you get delayed?</li>
  <li>Nodal processing: time to examine packet header and determine where to
direct packet, error checking. Microseconds. Negligible</li>
  <li>Queuing: wait for space on the outbound link. Micro to milliseconds.
If traffic arrive much faster than output speed, this is large.
    <ul>
      <li><em>Traffic intensity</em>: average rate at which bits arrive divided by
the transmission rate</li>
      <li>Don’t have traffic intensity greater than 1! Exponential curve as
traffic intensity approaches 1 too, so be carefuls</li>
      <li>Higher traffic intensity = packet loss = sad face</li>
    </ul>
  </li>
  <li>Transmission: time to push all packet’s bits from switch onto link.
Micro to milliseconds. Can be significant if slow link</li>
  <li>Propagation: time to move along the link. Supertiny, speed of light
often? if a long area though, can be milliseconds. Longer for further
away stuff</li>
  <li>All of these make up the total nodal delay. Get a feel for how much
each of them affect things</li>
  <li>
    <p>Total end-to-end delay is nodal delay for allll of the nodes in the
path</p>
  </li>
  <li>
    <p>Traceroute used to see your network path. Sends special packets that
get a return message from every router along the way, so you can build
up the path you took to get to your destination</p>
  </li>
  <li>
    <p>Some stuff on network constraints. Today, it’s generally the access
network that creates a bottleneck because of lower capacity</p>
  </li>
  <li>
    <p>Okay, lots of words</p>
  </li>
  <li>Protocol layers and service models. Important!</li>
  <li>Layers is best way to conceptualize complex systems</li>
  <li>Analogy of traveling by plane</li>
  <li>Layers are ticket, baggage, gate, takeoff/landing, and airplane
routing. Each layer implements some functionality or service. Each
layer has stuff happen below it that brings it back to that layer</li>
  <li>Okay, now bring back to networking</li>
  <li>Each network protocol belongs to a layer. What’s important is the
<em>service model</em> of a layer: what service does the layer offer to the
layer above it?</li>
  <li>
    <p>Layer performs service via actions and using services of layer below
it</p>
  </li>
  <li><em>Five layers</em>: Application &gt; Transport &gt; Network &gt; Link &gt; Physical</li>
  <li>Application and transport in softwaare, link and physical in hardware,
network is mixed</li>
  <li>All of these layers are distributed across hosts. One piece of each of
these layers found in hosts</li>
  <li>Together, this is the protocol stack</li>
  <li>Application: HTTP/SMTP/FTP. Distributed over multiple hosts, protocol
used to exchange messages with application layer in another host</li>
  <li>Transport: transport application-layer messages between endpoints. TCP
and UDP. A transport-layer packet is a segment. TCP important for
reliability and sequencing and throttling. Doesn’t solve security. UDP
has no reliability or sequencing or throttling. UDP is basically IP with
the ability to address ports. UDP used for stuff like streaming games
and video</li>
  <li>Network: move network-layer packets (datagrams) from one host to
another. Takes a transport-layer segment and a destination address
from transport layer, then provides the service of delivering segment to
transport layer in the destination host. Generally uses IP here</li>
  <li>Link: routes datagram through routers between source and destination.
At each node, network layer passes datagram to link layer, which
delivers datagram to the next node along the route. They differ -
could be Ethernet, WiFi, custom cable protocol. Link layer packets are
<em>frames</em></li>
  <li>Physical: move individual bits within a link layer frame from one node
to the next. Dependent on which link layer is used. Depend on the
actual physical medium as well. E.g. ethernet has a protocol for each
physical layer - copper wire, coax, fiber, etc.</li>
  <li>
    <p>OSI model has two additional layers: presentation and session. If an
app developer needs these for the Internet, they gotta build them into
the application</p>
  </li>
  <li>
    <p>Encapsulation is important. Applicatio-layer message sent to transport
layer, which adds some information so it becomes a transport-layer
segment. Thus, the segment encapsulates the message. Datagram
encapsulates segment, and frame encapsulates datagram. Each layer adds
its own headers</p>
  </li>
  <li>Shpeel on some security stuff. What can go wrong?</li>
  <li>Malware can come across the Internet and do bad stuff to our device</li>
  <li>Maybe it becomes part of a botnet, which is a bunch of devices
controlled by bad guys to send spam or something</li>
  <li><em>Viruses</em> require some kind of user interaction to infect device.
<em>Worms</em> can get in without user interaction (e.g. you’re on a bad
network and stuff gets in the side door)</li>
  <li>DDos: make a host unusable by legitimate users by slamming it with
traffic
    <ul>
      <li>Vulnerability: send carefully-formed messages to a host to make it
crash</li>
      <li>Bandwidth flooding: send a shitt on of traffic so the host can’t
keep up</li>
      <li>Connection flooding: lots of half-open or slow TCP connections
established, host too bogged down to accept real traffic</li>
    </ul>
  </li>
  <li>Packet sniffers can listen on your router or something and copies all
the packets that flow through. Can deconstruct those later to see if
there’s anything useful</li>
  <li>
    <p>Spooky</p>
  </li>
  <li>Okay time for some history</li>
  <li>Packet switching as an alternative to circuit switching came up in the
60s. ARPANet also conceived with packet switchers. By 1972 ARPAnet had
15 nodes and was demo’d. It was a single, closed network</li>
  <li>Now in the 70s lots more networks from lots more places</li>
  <li>TCP, UDP, IP concepts in place by end of 70s. Ethernet protocol as
well</li>
  <li>In the 80s, more stuff developed, ARPANet grew. French Minitel was a
public packet-switched network that a bunch of French people had and
that had a decent amount of good stuff</li>
  <li>
    <p>Internet explodes in the 90s. Invented by da god Tim Berners-Lee.
Developed HTML, HTTP, web server, and browser. We get email, the web,
IMs, p2p file share. A ton of shit now of course</p>
  </li>
  <li>Summary time</li>
  <li>Lots of stuff in the Internet</li>
  <li>Edge of the network: end systems, applications, and the service
provided to those applications
    <ul>
      <li>Link and physical media in the access network: routers, cables, and
such</li>
    </ul>
  </li>
  <li>Now in the core, we’ve got different switches and the
network-of-networks concept</li>
  <li>Then we got to delays/throughput/packet loss</li>
  <li><em>Key</em> architectural principles of protocol layering and service models</li>
</ul>

<h4 id="lecture">Lecture</h4>

<ul>
  <li>OS abstractions for communication</li>
  <li>File: file descriptor, basic read/write/offset functionality.
Permanent storage. Seekable - you can jump around at different offsets</li>
  <li>Pipe: returns two file descriptors, one for reading and one for
writing. When you write to one the bytes are available for reading on
the other end. No offset, once you read stuff it’s gone</li>
  <li>Socket: Unix Domain Socket. Server process can bind to a socket address (e.g.
/tmp/postgres.5123). Now clients can interact with that socket, and
they get a r/w file descriptor to interface with
    <ul>
      <li>Like a phone call, cool</li>
      <li>Does NOT specify connector vs. listener as client vs. server</li>
      <li>The connector is usually the client, but doesn’t have to be. It can
make a connection and then serve requests. K. Connector/listener are
fundamental roles, client/server are “technical”, implemented roles</li>
    </ul>
  </li>
  <li>More history</li>
  <li>
    <p>Military needs to connect stuff better, relay stuff</p>
  </li>
  <li>
    <p>Why is there a need for layers above IP? No security, no reliability</p>
  </li>
  <li>Kernel is between the application and transport layers</li>
  <li>
    <p>SSL sits between application and transport, but don’t write your own.
Use a reliable one instead</p>
  </li>
  <li>Use <code class="language-plaintext highlighter-rouge">file</code> to get file info for binary</li>
</ul>

<h3 id="2---application-layer-http">2 - Application Layer: HTTP</h3>

<h4 id="kr-21---22">K&amp;R 2.1 - 2.2</h4>

<ul>
  <li>See slides</li>
</ul>

<h4 id="lecture-1">Lecture</h4>

<ul>
  <li>Why is text bad?</li>
  <li>Parsing sucks</li>
  <li>Wasted space</li>
  <li>How do you transmit non-text??
    <ul>
      <li>Content-Type: octet-stream</li>
      <li>Base64 encoding</li>
    </ul>
  </li>
  <li>
    <p>Upside: human-parseable. -_-</p>
  </li>
  <li>Alternatives to request/response (HTTP model)</li>
  <li>push/pull: client pushes messages onto a stream, many hosts pull from
the stream</li>
  <li>
    <p>pub/sub: server publishes to a stream where the client is subscribed
and can pull stuff off</p>
  </li>
  <li>Why do you need to include the Host header? Isn’t it redundant?</li>
  <li>Two ppl sharing a webserver and IP address</li>
</ul>

<h3 id="3---application-layer-dns-ftp-smtp-etc">3 - Application Layer: DNS, FTP, SMTP, etc.</h3>

<h4 id="kr-23---25">K&amp;R 2.3 - 2.5</h4>

<ul>
  <li>See slides</li>
</ul>

<h4 id="lecture-2">Lecture</h4>

<ul>
  <li>What does DNS solve? People have a bunch of addresses but the
addresses keep changing (they’re treated like home addresses), so we
need a way to map names onto addresses</li>
  <li>What is DNS? It’s a protocol for a distributed database</li>
  <li>No forced cache invalidation is a tradeoff</li>
  <li>Feature: extensible record types (hierarchical)</li>
  <li>
    <p>Who has authority?</p>
  </li>
  <li>
    <p>There’s one root DB, but it pretty much just has NS records for the
TLD’s</p>
  </li>
  <li>
    <p>Dig is for looking at DNS</p>
  </li>
  <li>DNS requests happen in parallel with HTTP. Uses UDP because everything
fits in one packet</li>
</ul>

<h3 id="4---transport-layer-tcp-and-udp">4 - Transport Layer: TCP and UDP</h3>

<h4 id="kr-ch-3">K&amp;R Ch 3</h4>

<ul>
  <li>See slides</li>
</ul>

<h4 id="lecture-3">Lecture</h4>

<ul>
  <li>
    <p>UDP always needs to fill source port field</p>
  </li>
  <li>SYN flood by forcing server to allocate a ton of resources that’ll
never be used</li>
  <li>Fix with Syn cookie - on initial SYN, don’t allocate anything, make a
cookie. This cookie needs to come on the next ACK (since it’s on the
SYN of the SYN ACK response) or else you won’t actually allocate resources</li>
</ul>

<h3 id="5---network-layer-ip">5 - Network Layer: IP</h3>

<h4 id="kr-ch-4">K&amp;R Ch 4</h4>

<ul>
  <li>See slides</li>
</ul>

<h4 id="lecture-4">Lecture</h4>

<ul>
  <li>How does a router’s forwarding table get established?</li>
  <li>Procedures convert routing algorithm into forwarding table at each
router</li>
  <li>Why have a “transport protocol layer” in the IP datagram header? So
you know which code to jump to after parsing out the IP header!</li>
  <li><em>Risk-based</em> problem-solving: where’s the biggest risk? Can I mitigate
that first? If I can’t, there’s no point in continuing</li>
</ul>

<h3 id="6---link-layer-ethernet">6 - Link Layer: Ethernet</h3>

<h4 id="kr-ch-5">K&amp;R Ch 5</h4>

<ul>
  <li>See slides</li>
</ul>

<h4 id="lecture-5">Lecture</h4>

<ul>
  <li>Didn’t go over much, there was a wireshark lab. See mostly stuff in
slides. This is a protocol that operates over hardware /shrug</li>
</ul>

<h3 id="7---multimedia-streaming-and-realtime-communication">7 - Multimedia streaming and realtime communication</h3>

<h4 id="kr-ch-7">K&amp;R Ch 7</h4>

<ul>
  <li>See slides</li>
</ul>

<h4 id="lecture-6">Lecture</h4>

<ul>
  <li>Switching adds less noise to hubs, because not everything is broadcast</li>
  <li>MAC address can identify a node as being on a specific VLAN</li>
  <li>VLAN makes it even quieter, need specific translators between VLANs
though</li>
  <li>VPN tries to interpose one network over a set of other subnets, okay</li>
  <li>
    <p>If you TCP connect to a VPN, you can send requests from that VPN and
it looks like your computer is just having one TCP connection /shrug</p>
  </li>
  <li>Streaming stored video time</li>
  <li>TCP control channel for stuff like “start halfway through, send at
this rate”, UDP channel for the actual data</li>
</ul>

<h3 id="8---security">8 - Security</h3>

<h4 id="kr-ch-8">K&amp;R Ch 8</h4>

<ul>
  <li>See slides</li>
</ul>

<h4 id="lecture-7">Lecture</h4>

<ul>
  <li>Everything is bolted on!</li>
  <li>To brute force decrypt: helps to have a ciphertext-plaintext pair</li>
  <li>Cipher block: not byte by byte, but chunk by chunk</li>
  <li>Chaining: Start with just one random seed, XOR with first message
block, encrypt that block, then XOR next with (first xor’d w/
random) then so on and so forth</li>
  <li>So if you have symmetric encryption, how do you exchange keys?</li>
  <li>Use asymmetric public/private key exchange <em>to exchange symmetric keys
for the rest of the session</em></li>
  <li>
    <p>RSA is 300x slower than AES to encrypt!</p>
  </li>
  <li>So now:
    <ul>
      <li>From Alice (plain)</li>
      <li>Alice makes message key</li>
      <li>Alice encrypts message with message key</li>
      <li>Alice encrypts message key with Bob public key</li>
      <li>Alice encrypts ^ with Alice public key</li>
      <li>Alice hashes ^^ and encrypts the hash with her own public key and
puts it at the end of the message (this is <em>signing</em>)</li>
      <li>First thing Bob does is take the encrypted hash off the end of the
payload, decrypt with Alice’s public key, and compare to hashing the
payload</li>
    </ul>
  </li>
  <li><em>Certificate</em>: 3rd party certificate authority gets <em>your</em> public key
with a proof of identity. CA verifies this, and if you pass, they
verify your public key by hashing it and signing it with <em>their</em>
(super secret) private key, which becomes your <em>certificate</em></li>
</ul>

<h3 id="9---the-future-of-networking">9 - The Future of Networking</h3>

<h4 id="ipfs-white-paper">IPFS White Paper</h4>

<ul>
  <li>See PDF in 09_future</li>
  <li>In business, a white paper is closer to a form of marketing
presentation, a tool meant to persuade customers and partners and
promote a product or viewpoint</li>
</ul>

<h4 id="van-jacobson-on-a-new-way-to-look-at-networking">Van Jacobson on A New Way to Look at Networking</h4>

<ul>
  <li>Network research is dead end</li>
  <li>
    <p>Everything is about paths</p>
  </li>
  <li>Phone number is a <em>program</em> for directing your line on a switchboard</li>
  <li>How do you amortize setup cost and worry about reliability?</li>
  <li>But everyone thought telephony was the only model for networking</li>
  <li>But then people came along with packet switching: focus on endpoints,
not paths</li>
  <li>Lots of paths from one endpoint to another. Split data into packets</li>
  <li>
    <p>But just overlayed over telco</p>
  </li>
  <li>Then Stanford peeps came up with TCP/IP stack
    <ul>
      <li>To concatenate paths</li>
    </ul>
  </li>
  <li>Reliability increases exponentially with system size (more failure
correction)</li>
  <li>No call setup - high efficiency</li>
  <li>No hot spots because topology can self adjust</li>
  <li><em>Connecting</em> is binary: either connected or not</li>
  <li>
    <p>Man I can’t take no notes, just listen</p>
  </li>
  <li>TCP/IP rescued us from plumbing at the wire level but we still have to
do it at the data level. A dissemination based architecture would fix
this</li>
  <li>Many ad-hoc dissemination overlays have been created (CDN, BitTorrent,
etc.) - there’s a need!</li>
</ul>

<h4 id="lecture-8">Lecture</h4>

<ul>
  <li>Packet switching had great diagrams, but how to implement?</li>
  <li>At first had to piggyback on the telephone lines
    <ul>
      <li>Objection: “it’s basically the same thing”</li>
    </ul>
  </li>
  <li>Key: <em>dissemination</em>. Internet is designed for conversations, not for
<em>dissemination</em> (disseminate information and stuff)</li>
  <li>Bad at broadcast</li>
  <li>
    <p>Binary connection - 2 participants</p>
  </li>
  <li>Ideas: address <em>data</em> not machines. Sign/Auth data</li>
  <li>Big buffers/caches</li>
  <li>Immutable data</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2017/03/26/bradfield-networking/</guid>
                <description>
                    
                    Lecture notes from Bradfield's networking class
                    
                </description>
                <pubDate>Sun, 26 Mar 2017 00:00:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Mathematics for Computing</title>
                <link>http://tigerthinks.com/2017/03/26/bradfield-math/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<p>Schedule: Wednesdays 6pm-9pm and Saturdays 10am-4pm.</p>

<h3 id="1---counting-things">1 - Counting Things</h3>

<h4 id="ll-ch-2-let-us-count">LL Ch 2: Let us count!</h4>

<h5 id="sets-and-the-like">Sets and the like</h5>

<ul>
  <li>Gg, combinatorials and permutations, okay</li>
  <li>Formalize these counting operations using a <em>set</em>, made up of
<em>elements</em>. Deck of cards, people in a group are both sets</li>
  <li><em>R</em> for real numbers, <em>Q</em> for rational numbers, <em>Z</em> for all integers,
<em>Z+</em> for all non-negative integers, <em>N</em> for all positive integers, 0
for empty set</li>
  <li>b ∈ A if b is in A</li>
  <li>
    <table>
      <tbody>
        <tr>
          <td><em>Cardinality</em> of A (number of items) is</td>
          <td>A</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>Denote items in set with curly braces</li>
  <li>B is <em>subset</em> of C if every element of B is also an element of C. Would
say B ⊆ C</li>
  <li><em>Intersection</em> is set consisting of elements that are in both sets
    <ul>
      <li><em>Disjoint</em> sets have the empty set as their intersection</li>
    </ul>
  </li>
</ul>

<h5 id="the-number-of-subsets">The number of subsets</h5>

<ul>
  <li><strong>A set with n elements has 2^n subsets</strong></li>
  <li>Can use a binary representation of integers (on/off) to represent
whether or not item is in a given subset. Helps you prove the above
theorem</li>
  <li>Useful to play around with powers of 2 and 10 to get a ballpark
estimate of the order of magnitude of a number or set</li>
</ul>

<h5 id="sequences">Sequences</h5>

<ul>
  <li><strong>Number of strings of length n composed of k given elements is k^n</strong></li>
  <li><strong>Suppose that we want to form strings of length n so that we can use
any of a given set of k1 symbols as the first element of the string,
any of a given set of k2 symbols as the second element of the string,
etc., any of a given set of kn symbols as the last element of the
string. Then the total number of strings we can form is k1 ·k2
·…·kn</strong></li>
</ul>

<h5 id="permutations">Permutations</h5>

<ul>
  <li><em>Permuting</em> an ordered list of n objects is rearranging it in a
different order. Each rearrangement is a <em>permutation</em></li>
  <li><strong>The number of permutations of n objects is n!</strong></li>
  <li><strong>Stirling’s Formula: n! ∼  (n/e)^n(√2πn)</strong></li>
</ul>

<h4 id="lecture">Lecture</h4>

<ul>
  <li>When in doubt about naive set theory/properties, draw the venn diagram
inside the universe and look at it</li>
</ul>

<h3 id="2---advanced-counting-things">2 - Advanced counting things</h3>

<h4 id="--ll-book-ch-4---binomial-theorem">- LL Book Ch 4 - Binomial Theorem</h4>

<h5 id="binomial-stuff">Binomial stuff</h5>

<ul>
  <li><strong>The number of ordered k-subsets of an n-set is n(n-1)…(n-k+1)</strong>
    <ul>
      <li>Or, n! / (n-k)!</li>
    </ul>
  </li>
  <li><strong>The number of k-subsets of an n-set is n! / (k!(n-k)!)</strong>
    <ul>
      <li>Call this n choose k</li>
      <li>We overcounted by k!, duhhhhhhh</li>
    </ul>
  </li>
  <li>N choose K are <em>binomial coefficients</em></li>
  <li><strong>The Binomial Theorem</strong>:
https://gyazo.com/231b62be4247dc22294f42387d585611</li>
</ul>

<h5 id="distributing-presents">Distributing presents</h5>

<ul>
  <li>What if you need to distribute things</li>
  <li><strong>Number of ways to distribute n things between k children is n! /
(n1!n2!…nk!)</strong>. You overcounted all of the permutations (n!) where
each child still got the same set of presents</li>
</ul>

<h5 id="distributing-money">Distributing money</h5>

<ul>
  <li>Presents are <em>distinguishable</em>, pennies are not. Thus, fewer distinct
ways to distribute pennies</li>
  <li><strong>The number of ways to distribute n identical pennies to k children,
so that each child gets at least one, is (n-1 choose k-1)</strong>
    <ul>
      <li>n-1 points where you can swap out a child for another child, we have
to select k-1 of those points (since first child always starts at
beginning)</li>
      <li>** The number of ways to distribute n identical pennies to k
children is (n+k-1 choose k-1)</li>
    </ul>
  </li>
  <li>Man, my poor brain</li>
</ul>

<h4 id="ll-book-ch-5---pascals-triangle">LL Book Ch 5 - Pascal’s Triangle</h4>

<ul>
  <li>I’ve seen this before</li>
  <li>Formula for finding the proportion between the middle entry and the
entry at index t</li>
</ul>

<h5 id="identities">Identities</h5>

<ul>
  <li>Every number is the sum of the two numbers immediately above it</li>
</ul>

<h5 id="birds-eye-view">Bird’s-Eye View</h5>

<ul>
  <li>It’s symmetrical</li>
  <li>Entries increase until middle, then decrease</li>
  <li>Identity: (n choose k+1) / (n choose k) = (n-k) / (k+1)</li>
  <li>This got real deep real fast fam</li>
</ul>

<h4 id="lecture-1">Lecture</h4>

<ul>
  <li>Draw out the combinations thing by with m or n = 3
    <ul>
      <li>Every time you choose down first, you’re double-counting blah blah</li>
    </ul>
  </li>
  <li>Note: function in math and function in programming are NOT equivalent
    <ul>
      <li>Function is mapping of inputs to outputs; programming “functions”
are more like procedures</li>
      <li>Function maps each item from set X to precisely one value of set Y</li>
      <li>X is domain, Y is range</li>
      <li><em>Surjective</em> “on to”: every value of X maps <em>on to</em> a value of Y.
The entire output range is covered/reachable</li>
      <li><em>Injective</em> “one to one”: every value of X maps one-to-one to Y
        <ul>
          <li>Real numbers-&gt;Real numbers for a squaring function is injective
but not surjective - it’s a one to one mapping, but negative real
numbers in the range are not reachable</li>
        </ul>
      </li>
      <li><em>Bijective</em>: both surjective and injective</li>
    </ul>
  </li>
  <li>Bijection: a one-to-one mapping that covers the entire output space</li>
</ul>

<h3 id="3---probability">3 - Probability</h3>

<h4 id="ll-book-ch-7">LL Book Ch 7</h4>

<ul>
  <li><em>Probability theory</em>: way of modeling dependence of outcomes on chance</li>
  <li><em>Probability space</em> or <em>sample space</em> is the set of possible outcomes
    <ul>
      <li>We only consider <em>uniform spaces</em>, where each outcome has the same
probability</li>
    </ul>
  </li>
</ul>

<h5 id="independent-repetition">Independent repetition</h5>

<ul>
  <li><em>Independence</em> of events: information about one doesn’t influence
probability of other</li>
  <li>Null set independent from every event</li>
</ul>

<h5 id="the-law-of-large-numbers">The Law of Large Numbers</h5>

<ul>
  <li><strong>Let 0 ≤ t ≤ m. Then the probability that out of 2m independent coin
tosses, the number of heads is less than m − t or larger than m + t,
is at most m/t2.</strong></li>
  <li>Corollary: <strong>With probability at least .99, the number of heads among
2m independent coin tosses is between m − 10√m and m + 10√m.</strong>
-</li>
</ul>

<h4 id="lecture-2">Lecture</h4>

<ul>
  <li>New information updates your model of the world!</li>
  <li>Bayes Bayes Bayes</li>
</ul>

<h3 id="4---logic">4 - Logic</h3>

<h4 id="mcs-ch-1-25-pages">MCS Ch 1 (25 pages)</h4>

<ul>
  <li>A <em>mathematical proof</em> of a proposition is a chain of logical
deductions leading to the proposition from a base set of axioms</li>
  <li>A <em>proposition</em> is a statement (communication) that is either true or
false.
    <ul>
      <li>Up to us to prove or disprove</li>
    </ul>
  </li>
  <li>For programmers, very important to be able to prove correctness of
programs and systems if possible</li>
  <li>A <em>predicate</em> can be understood as a proposition whose truth depends on
the value of one or more variables
    <ul>
      <li>e.g. “n is a perfect square”</li>
    </ul>
  </li>
  <li><em>Axioms</em> are things that are accepted as true</li>
  <li><em>Theorems</em> are important true propositions</li>
  <li><em>Lemmas</em> are preliminary propositions useful for proving later
propositions</li>
  <li>
    <p><em>Corollaries</em> are propositions that follow in just a few logical steps
from a theorem</p>
  </li>
  <li>Hard to tell if you should or should not be assuming something, so
best practice is to be very up front about your assumptions</li>
  <li><em>Inference rules</em>, or logical deductions, are used to prove new
propositions using previously proved ones</li>
  <li><em>Modus ponens</em>: a proof of P + proof that P implies Q equals a proof
of Q</li>
  <li>Written fraction-like, where <em>antecedents</em> are above the line and
<em>conclusion</em> is below the line</li>
  <li><em>Sound</em> inference rule: assignment that makes all antecedents true
must also make the conclusion true</li>
  <li>Woohoo, some proof templates. See book</li>
  <li>You’ll often need to do some scratchwork while you’re trying to
figure out the logical steps of a proof. Your scratchwork can be as
disorganized as you like—full of dead-ends, strange diagrams, obscene
words, whatever. But keep your scratchwork separate from your final
proof, which should be clear and concise.</li>
  <li>Proofs typically begin with the word “Proof” and end with some sort
of de- limiter like [square]  or “QED.” The only purpose for these
conventions is to clarify where proofs begin and end.</li>
  <li>Read through the different types of proofs
    <ul>
      <li>Proof by contradiction, by cases, etc.</li>
    </ul>
  </li>
  <li>Proofs are tough. Some tips:
    <ul>
      <li>State your game plan</li>
      <li>Keep a linear flow</li>
      <li>A proof is an essay, not a calculation</li>
      <li>Avoid excessive symbolism</li>
      <li>Revise and simplify</li>
      <li>Introduce notation thoughtfully</li>
      <li>Structure long proofs</li>
      <li>Be wary of the “obvious”</li>
      <li>Finish!</li>
    </ul>
  </li>
  <li>Come back and do problems?</li>
</ul>

<h4 id="mcs-ch-3---logical-formulas-21-pages">MCS Ch 3 - Logical Formulas (21 pages)</h4>

<ul>
  <li>Need a special language for precise communication because of
ambiguities in other written/spoken language</li>
  <li>Not/And/Or change or combine propositions, just like in boolean logic</li>
  <li><em>iff</em> is if and only if: true if both sides are the same</li>
  <li>An <em>implication</em> is true exactly when the if-part is false or the
then-part is true. Okay
    <ul>
      <li>“If pigs could fly, then your account won’t get hacked” is a valid
mathematical implication, but remember that it <em>ignores causal
connections</em> :)</li>
    </ul>
  </li>
  <li>This stuff comes up all the time as boolean (or otherwise) logic in
computer programs
    <ul>
      <li>Simplifying these boolean expressions is nice</li>
    </ul>
  </li>
  <li>Bleh, some cryptic notation</li>
  <li>Implications and their contrapositives are logically equivalent - “If
I am hungry, then I am grumpy” == “If I am not grumpy, then I am not
hungry”
    <ul>
      <li><em>Converse</em> (If I am grumpy, then I am hungry) is not necessarily
true though</li>
    </ul>
  </li>
  <li>Formula is <em>valid</em> iff it is equivalent to T</li>
  <li>Formula is <em>satisfiable</em> if it can be equivalent to T under certain
circumstances
    <ul>
      <li>E.g. if you need to fit all of the specs, the set of specs must be
satisfiable (the &amp;&amp; of all specs must be achievable)</li>
    </ul>
  </li>
  <li><em>Disjunctive form</em> of a propositional formula is pretty much the most
naive way to write it - expand all of its terms and write it as ORs of
all the AND terms: (true evaluation) || (true evaluation) …</li>
  <li><em>Conjunctive form</em> is the expansion of all terms that evaluate to
false: (false evaluation) || (false evaluation) …</li>
  <li>Using truth tables works for small expressions, but for larger ones
may need to use algebra to prove equivalence</li>
  <li>Use properties of booleans and such</li>
  <li>Problem of deciding whether a proposition is satisfiable is <em>SAT</em>
    <ul>
      <li>This is np-hard</li>
    </ul>
  </li>
  <li>“For all”, “sometimes”  are statements that quantify how often a
predicate is true. An assertion that a predicate is always true is a
<em>universal quantification</em>, assertion that predicate is sometimes true
is <em>existential quantification</em>
    <ul>
      <li>Changing order of quantifiers changes meaning of proposition most of
the time</li>
    </ul>
  </li>
  <li>Ayyah, okay, lots of this was over my head, but at least I got a
somewhat general idea</li>
</ul>

<h4 id="lecture-3">Lecture</h4>

<ul>
  <li>All the set stuff translates to logic: the truth set is the set of
values that satisfy a predicate or something</li>
</ul>

<h3 id="5---induction">5 - Induction</h3>

<h4 id="ll-ch-3-p21-p27">LL Ch 3 (p21-p27)</h4>

<ul>
  <li><em>Mathematical induction</em>: say you want to prove a property of positive
integers, and you can prove:
    <ul>
      <li>1 has the property</li>
      <li>Whenever n - 1 has the property (n &gt;= 1), then n has the property as
well</li>
    </ul>
  </li>
  <li><em>Principle of induction</em> says that if you meet these two criteria
every positive integer fits these criteria</li>
  <li>Process: try to prove statement for n, allowing to use that the
statement is true if n is replaced by n - 1. If can’t do this, can’t
prove :)</li>
  <li>Do exercises</li>
  <li>Okay, walkthrough of counting regions
    <ul>
      <li>The +1 comes from the bottom of the blackboard - if 4 intersections,
5 regions</li>
    </ul>
  </li>
</ul>

<h4 id="lecture-4">Lecture</h4>

<ul>
  <li>Reason through stuff! Use more rigor than “hackers” might</li>
  <li><em>Rational numbers</em>: basically, every possible pair of integers that
can be expressed as a fraction</li>
  <li><em>Isomorphic</em>: bijection between these two things</li>
  <li>Induction: prove base case + continuation over anything that’s
countable
    <ul>
      <li><em>Countable</em>: bijection with natural numbers</li>
    </ul>
  </li>
  <li>Aliph naught (X0) is the size of a countably infinite set</li>
  <li>
    <p>Can use induction to prove things about aliph naught sets</p>
  </li>
  <li>Proof format</li>
  <li>Theorem:  blah blah</li>
  <li>Proof: we use mathematical induction</li>
  <li>Base case: …..</li>
  <li>
    <p>Inductive case: suppose that [base case]. Then, [prove inductive case
using inductive hypothesis] as required. Therefore, the theorem holds
true</p>
  </li>
  <li>Strong induction: basically, prove more stuff</li>
  <li>Induction step: If P(m), P(m+1), P(m+2)… P(k) is true then  P(k+1) is
true as well for some k &gt; m.</li>
  <li>Prove more stuffs</li>
  <li>Use strong induction if P(m-1) doesn’t directly help you solve P(m)</li>
  <li>Graph with K connected components, number of edges is bounded by Sum
from 1 to k of (ni choose 2) where ni is the cardinality of the ith
copmonent’s vertices</li>
</ul>

<h3 id="6---graph-theory">6 - Graph Theory</h3>

<h4 id="ll-ch-9-p73-p81">LL Ch 9 (p73-p81)</h4>

<ul>
  <li><em>Graph</em> is <em>nodes</em> connected by <em>edges</em>
    <ul>
      <li>Each edge is a set {u, v}</li>
    </ul>
  </li>
  <li>Use graphs whenever you have a “relation” between certain objects
(atoms, connections, descendence, etc.)</li>
  <li><strong>In every graph, the number of nodes with odd degree is even</strong></li>
  <li><strong>The sum of degrees of all nodes in a graph is twice the number of
edges</strong></li>
  <li><em>Empty graph</em>: nodes but no edges</li>
  <li><em>Complete graph</em> (clique, strongly connected component): make all th
edges</li>
  <li><em>Cycle</em>: connect consecutive nodes until you get back to the first</li>
  <li>H is <em>subgraph</em> of G if you can get H from G by deleting notes</li>
  <li><em>Connected</em> graph: every 2 nodes can be connected by  apath</li>
  <li>Cool, playing around with graphs and such</li>
</ul>

<h4 id="ll-ch-12-p98-p110">LL Ch 12 (p98-p110)</h4>

<ul>
  <li>Ok</li>
  <li><em>Bipartite graph</em> has two sides, connected from side to side in a
given way, nodes on the same side don’t have connections
    <ul>
      <li><em>Perfect matching</em>: set of edges in bipartite graph such that each
node is incident with exactly one of them</li>
      <li><em>Degree</em> is how many nodes each node is connected to</li>
    </ul>
  </li>
  <li><strong>If every node of a bipartite graph  has the same degree d&gt;=1, then
it contains a perfect matching</strong>
    <ul>
      <li>Or, for every k nodes on the left, there must be at least k nodes on
the right connected to at least one of them (see below)</li>
    </ul>
  </li>
  <li><em>Marriage Theorem</em>: <strong>A bipartite graph has a perfect matching if and
only if |A| = |B| and for any subset of k nodes of A there are at
least k nodes in B that are connected to one of them</strong></li>
  <li>Proof: try and prove that <em>if a “good” (satisfying conditions of
marriage theorem) bipartite graph then it can be partitioned into two
good bipartite graphs</em>, broken down so on and so forth</li>
  <li>Ayyah, okay</li>
  <li>Okay, now you can see if a bipartite graph has a perfect matching -
but how to actually find it?</li>
  <li><em>Matching</em>: a set of edges that have no endpoint in common
    <ul>
      <li>Becomes perfect when edges cover all the nodes as well, but regular
matchings can be much smaller</li>
    </ul>
  </li>
  <li><em>Augmenting path</em>: path that starts and ends at nodes that are
unmatched by your matching M; every second edge of P belongs to M
    <ul>
      <li>If we find one, delete edges of P that are in M an dreplace them by
edges of P that are not in M</li>
      <li>Keep doing augmenting path until you find perfect matching or
there’s no more augmenting path
        <ul>
          <li>If no more augmenting path, no perfect matching!</li>
        </ul>
      </li>
      <li><em>Almost augmenting</em>: everything but the last edge in augmenting
path; ends with a node in M</li>
    </ul>
  </li>
  <li><em>Hamiltonian cycle</em> is a cycle that contains all nodes of a graph
    <ul>
      <li>In perfect matching every node belongs to one edge, in Hamiltonian
cycle every node belongs to two edge</li>
    </ul>
  </li>
  <li>np-hard to find them</li>
  <li>Not a ton known</li>
</ul>

<h3 id="7---linear-algebra-crash-course">7 - Linear algebra crash course</h3>

<h4 id="essence-of-linear-algebra-videos-1-7">Essence of Linear Algebra Videos 1-7</h4>
<p>https://www.youtube.com/watch?v=kjBOesZCoqc&amp;list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab&amp;index=1</p>

<ul>
  <li>People end up understanding linear algebra on a numerical level (i.e.
how to do a matrix multiplication from memory), but you’d rather have
a geometric understanding so that you have an intuition for which
tools to use when</li>
  <li>Core visual intuitions underlie the subject</li>
</ul>

<h5 id="vectors-what-even-are-they">Vectors, what even are they?</h5>

<ul>
  <li>Physics definition: arrow pointing in space; defined by length +
direction</li>
  <li>CS definition: ordered list of numbers, i.e. [square footage, price]
tuple for houses</li>
  <li>Math definition: generalizes both of these; anything that can be
sensibly joined or added. Use more concrete setting most of the time</li>
  <li>When you hear <em>vector</em>, think about arrow in coordinate system
starting at the origin
    <ul>
      <li>Then, coordinates can be used to translate into a list of numbers :)</li>
    </ul>
  </li>
  <li>Pair of numbers is a bijection with vectors: (x, y)
    <ul>
      <li>In 3D, just add one more number</li>
    </ul>
  </li>
  <li>Every topic in linear algebra centered around vector addition and
multiplication by numbers</li>
  <li>To add: move tail of 2nd to head of 1st, then draw new vector from
tail of 1st one to new head of 2nd one, new vector is the sum. Cool.
Visual :)</li>
  <li>To multiply: Stretch out to be a multiple of original length
    <ul>
      <li>Called “scaling” –&gt; <em>scalar</em> is the factor you stretch out by</li>
    </ul>
  </li>
  <li>Visual visual</li>
</ul>

<h5 id="linear-combinations-span-and-basis-vector">Linear combinations, span, and basis vector</h5>

<ul>
  <li>Subtlety to thinking about vector coordinates: think of both the x and
y coordinates as scalars on the ^i (1, 0) and ^j (0, 1) vectors
    <ul>
      <li>Cool</li>
      <li>^i and ^j are the <em>basis vectors</em> (the things that are scaled by the
coordinates zzz)</li>
    </ul>
  </li>
  <li>Can reach any possible vector from any basis vectors</li>
  <li><em>Linear combination</em> is scaling and then adding</li>
  <li><em>Span</em> of two scalars is the set of all their linear combinations
    <ul>
      <li>Span of most pairs of 2D vectors is all 2D vectors</li>
      <li>Unless they line up, then it’s all vectors whose tip lines on that
line</li>
    </ul>
  </li>
  <li>Tip: <strong>Think of individual vectors as lines, think of sets of vectors
as points</strong></li>
  <li>What is the span of two 3D vectors?
    <ul>
      <li>A 2D plane? Yes</li>
    </ul>
  </li>
  <li>Span of three 3D vectors is the entire 3D space</li>
  <li><em>Linearly dependent</em> vectors: one vector in a set of three can be
expressed in terms of the linear combinations of the other two vectors
    <ul>
      <li>If this isn’t the case, they’re <em>linearly independent</em></li>
    </ul>
  </li>
  <li>The <em>basis</em> of a vector space is a set of linearly independent vectors
that span the full space
    <ul>
      <li>okay</li>
    </ul>
  </li>
</ul>

<h5 id="linear-transformations-and-matrices">Linear transformations and matrices</h5>

<ul>
  <li>Linear transformations* relationship to matrices :thinking_face:</li>
  <li><em>Linear transformation</em>
    <ul>
      <li>Tranformation analogous to function; in linear algebra,
generally a vector input and vector output
        <ul>
          <li>In 2D: think of transformation as operation on the entire 2D grid</li>
        </ul>
      </li>
      <li>Linear ones: all lines must remain lines, origin remains fixed in
place</li>
    </ul>
  </li>
  <li>How to describe linear transformation numerically? Just give the new
basis vectors :)</li>
  <li>Ez visualization</li>
  <li>Any 2D linear transformation is described by the coordinates of new ^i
and new ^j, woohoo</li>
  <li>Whoa, matrix-vector multiplication explained :)
    <ul>
      <li>Any transformation can be described by a 2x2 matrix</li>
      <li>This is intuitive! Columns in 2x2 matrix are the new basis vectors,
and the 2x1 vector is just the original coordinates</li>
    </ul>
  </li>
  <li>Matrices transform space!!!!!!!!!!!!</li>
</ul>

<h5 id="matrix-multiplication-as-composition">Matrix multiplication as composition</h5>

<ul>
  <li><em>Composition</em> can be defined by recording where ^i and ^j land
after two successive transformations</li>
  <li>This is matrix multiplication: applying one transformation after
another</li>
  <li>How to get composition without looking at animation? 2x2 matrix
multiplication. zzz. Ayyah</li>
  <li>Apply first transformation to ^i, then multiply by second to get the
final spot for ^i</li>
  <li>Order doesn’t matter</li>
  <li><strong>Good explanation &gt; symbolic proof</strong></li>
</ul>

<h5 id="three-dimensional-linear-transformations">Three-dimensional linear transformations</h5>

<ul>
  <li>Whew, [3x3][3x1]. Okay</li>
  <li>Zuggly</li>
</ul>

<h5 id="the-determinant">The determinant</h5>

<ul>
  <li>¿Cuál es?</li>
  <li>How are areas squished or scaled by a linear transformation?
    <ul>
      <li>Measure factor by which area of given region increases or decreases</li>
      <li>If the area bounded by the basis vectors goes from 1-&gt;6, then you
say the transformation scaled the space by 6</li>
      <li>Whatever happens to one square must happen to every other square!</li>
    </ul>
  </li>
  <li>The <em>determinant</em> is the scaling factor of a transformation</li>
  <li>If determinant is 0, you got squeezed into a smaller dimension</li>
  <li>Focus on 1x1x1 cube for 3 dimensions, focus on 1x1 square for 2
dimensions
    <ul>
      <li>In 3D, slant object that cube turns into is <em>parallelepiped</em></li>
    </ul>
  </li>
  <li>How to compute determinant?
    <ul>
      <li>ad - bc where matrix is [a b, c d]</li>
      <li>With 3D, :zzz:</li>
    </ul>
  </li>
  <li>Why does det(M1M2) = det(M1)det(M2)
    <ul>
      <li>Basis vectors end up in same place, so the area scale is the same</li>
    </ul>
  </li>
</ul>

<h4 id="lecture-5">Lecture</h4>

<ul>
  <li>Don’t get too attached to geometric or non-geometric definitions of
vector - still need to conceptualize a 26-dimensional vector
sometimes!</li>
  <li>Dot product is the projection of one vector onto another (using right
angle yaya)</li>
  <li>Fractal is an object with infinite surface area, bounded volume</li>
</ul>

<h3 id="8---cryptography">8 - Cryptography</h3>

<h4 id="ll-ch-8-integers-divisors-and-primes-p55-73">LL Ch 8: Integers, divisors, and primes (p55-73)</h4>

<ul>
  <li>Properties of integers, AKA <em>Number Theory</em></li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>*1</td>
          <td>a* means a is divisible by 1</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li><em>Primes</em> are not divisible by any other integer than 1, -1, p, and -p</li>
  <li>Lots to understand still!</li>
  <li>Every number has a unique basic prime factoring :)</li>
  <li>Difficulty of prime factorization and finding new primes is still
ridiculous</li>
  <li><strong>Fundamental Theorem of Number Theory: Every positive integer can be
written as the product of primes, and this factorization is unique up
to the order of the prime factors</strong>
    <ul>
      <li>No integer can have two different prime factorizations</li>
    </ul>
  </li>
  <li><strong>The number sqrt(2) is irrational (cannot be written as the ratio of
two integers)</strong></li>
  <li><strong>There are infinitely many primes</strong></li>
  <li><strong>For every positive integer k, there exist k consecutive composite
integers</strong>
    <ul>
      <li>Big gaps between primes!</li>
    </ul>
  </li>
  <li><em>Composite Integer</em>: integer n &gt; 1 that is not a prime</li>
  <li><em>Twin primes</em>: primes that are two apart</li>
  <li><strong>Prime number theorem: number of primes among 1, 2, …n is ~ (n/ln(n))</strong>
    <ul>
      <li>Sketchy</li>
    </ul>
  </li>
  <li>More, more, more!</li>
  <li>
    <p><strong>Fermat’s Little Theorem</strong>: If p is a prime and a is an integer, then
a^p - a is divisible by p</p>
  </li>
  <li>So what do we do with these primes and prime factors?</li>
  <li>Find the <em>GCF</em> (greatest common factor) - biggest thing that is a
common factor
    <ul>
      <li><em>Relatively prime</em> numbers have a GCF of 1</li>
    </ul>
  </li>
  <li><em>LCD</em> is the least common divisor, can get it from the common prime
factors, okay</li>
  <li>Ugh I remember this shitty way to find the GCD using Euclidean
algorithm. Fine maybe it’s not shitty I just didn’t much enjoy doing
it</li>
  <li>
    <p><strong>The number of steps of the euclidean algorithm, applied to two
positive integers a and b, is at most log2(a) + log2(b)</strong></p>
  </li>
  <li>How to test number for primality?</li>
  <li>Whew</li>
</ul>

<h4 id="ll-ch-15-a-glimpse-of-cryptography-p117">LL Ch 15: A glimpse of cryptography (p117)</h4>

<ul>
  <li><em>Cryptography</em>: the science of secret communication</li>
  <li>Message to send is <em>plaintext</em></li>
  <li><em>Key</em> is what unlocks the translation from ciphertext to plaintext</li>
  <li>Naive/simple: <em>substitution code</em>, replace each letter of alphabet
with another one :)</li>
</ul>

<h4 id="ll-ch-16-one-time-pads-p117-123">LL Ch 16: One-time pads (p117-123)</h4>

<ul>
  <li>Safer cryptography</li>
  <li><em>One-time pad</em> is randomly generated string of 0’s and 1’s</li>
  <li>Both parties share the pad, do a bitwise operation on the plaintext to
produce ciphertext, and vice versa</li>
  <li>Chess move example, read and intake please</li>
  <li>Primes!</li>
  <li>
    <p><strong>It is easy to test whether a number is a prime (and thereby it is
easy to compute the encryption), but it is difficult to find the prime
factors of a composite number (and so it is difficult to break the
cryptosystem)</strong></p>
  </li>
  <li>RSA encryption</li>
  <li>K</li>
</ul>

<h4 id="lecture-6">Lecture</h4>

<ul>
  <li>Use a clock metaphor for modulo arithmetic</li>
  <li>
    <p>The multiplicative inverse of a(mod b) exists if gcd(a, b) is 1</p>
  </li>
  <li>Oz walking through RSA</li>
  <li>“RSA is computer science’s most successful bijection”; function from
set of all possible plaintext messages to all ciphertext messages
    <ul>
      <li>D(E(m)) = m; for there to be an equivalent D for E, E must be a
bijection</li>
    </ul>
  </li>
  <li>Generaate two large primes p and q</li>
  <li>n = p * q</li>
  <li>Message will be integer m so that 0 less than m less than n</li>
  <li>Encryption: E(m) = x; x = rem(m^e, n)</li>
  <li>Decryption: D(x) = m; m = rem(x^d, n)</li>
  <li>GCD: tiling problem (biggest tiles you can use to perfectly tile a
rectangular space?)</li>
  <li>Fermat: you can always construct a bijection because if p is prime,
then a and p must be coprime. Now you can check if a number is prime
    <ul>
      <li>a^(p-1) ~= 1 (mod p)</li>
    </ul>
  </li>
  <li>Okay, now for RSA</li>
  <li>Rewrite Fermat: a^((k)(p-1)) = 1 (mod p)
    <ul>
      <li>Because 1^(anything) is 1</li>
    </ul>
  </li>
  <li>Then a^((k)(p-1) + 1) = a (mod p)</li>
  <li>Can’t find private key given public key!</li>
  <li>Used extended Euclid (GCD) algorithm (or the Pulverizer) to find the
multiplicative inverse of e, which is d, which is part of the private
key</li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>Need to show that n</td>
          <td>(m^(ed) - m)</td>
        </tr>
      </tbody>
    </table>
    <ul>
      <li>Know that n is the product of two primes p and q</li>
      <li>So if p and q both individually divide into that expression, then n
must divide into that expression</li>
      <li>Remember, ed ~= 1 (mod (p-1)(q-1))</li>
      <li>So, ed = k(p-1)(q-1)</li>
    </ul>
  </li>
  <li>Combine all this, need to prove:
    <ul>
      <li>
        <table>
          <tbody>
            <tr>
              <td>p</td>
              <td>m^(k(p-1)(q-1)+1) - m</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>q</td>
              <td>m^(k(p-1)(q-1)+1) - m</td>
            </tr>
          </tbody>
        </table>
      </li>
    </ul>
  </li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2017/03/26/bradfield-math/</guid>
                <description>
                    
                    Lecture notes from Bradfield's math class
                    
                </description>
                <pubDate>Sun, 26 Mar 2017 00:00:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Languages, Compilers and Interpreters</title>
                <link>http://tigerthinks.com/2017/03/26/bradfield-languages/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<h3 id="1-overview-and-history">1: Overview and History</h3>

<ul>
  <li>Moving up in abstraction</li>
  <li>Binary-&gt;hex-&gt;ASM-&gt;compilers</li>
  <li>Need something cross-platform, enter C</li>
  <li>Compiler compiles an “object file” that includes assembly code and
metadata. Run separately</li>
  <li>Interpreter takes source code and produces a running program, without
giving you an intermediary runnable object</li>
  <li>Phases of interpreting/compiling code:
    <ul>
      <li>Lex(ical analysis): Get the array of characters and build pairs
with categories (i.e. 1 + 1 -&gt; (num “1”) (op “+”) (num “1”)). Pairs
of class and lexeme</li>
      <li>Parsing: Build an AST with instructions</li>
      <li>Semantic analysis: Hey, you declared this type but try to use
something different here, what’s up with that. Validate stuff</li>
      <li>Optimize: Make stuff faster</li>
      <li>Code generation: Output machine language</li>
    </ul>
  </li>
  <li>Overengineering: Domain is wider in your head than it is in reality!</li>
  <li>Apple language toolchain
    <ul>
      <li>Start with microprocessors (i5, i7, a5, a6, a7, a8)
        <ul>
          <li>Different instruction sets (ISA = Instruction Set Architecture)</li>
        </ul>
      </li>
      <li>C language targeting both? From C straight to the architecture
        <ul>
          <li>Insert LLVM IR, which is for no machine in particular. And so if
your code can run on LLVM IR, you don’t have to care about the
underlying CPU/hardware since LLVM will make it run there.</li>
          <li>So now C programs compile to this Intermediate Representation</li>
          <li>You’ve got a bunch of fancy new processors but can’t make use of
them cause you have to have backwards compatibility. Solution:
another intermediate step! Add a “bitcode compiler” that interprets
bitcode, no-ops on older generations, adds optimizations to newer
generations</li>
        </ul>
      </li>
      <li>So now Apple has stuff written in C++/Obj-C/C, it is parsed out by
the Clang compiler, which goes down to LLVM IR instructions</li>
      <li>Later down the line, Swift-&gt;Swift IR-&gt;LLVM IR
(optimized!)-&gt;bitcode-&gt;hooray</li>
      <li>This is a crazy toolchain. Previously, it was just C-&gt;gcc-&gt;wtf this
is just for one CPU</li>
    </ul>
  </li>
  <li>Ambiguity in nouns and stuff is solved by very strict rules</li>
  <li>Nowadays optimization takes up the bulk of the stuff</li>
</ul>

<h3 id="2-lexical-analysis-and-fsas">2: Lexical analysis and FSAs</h3>

<h4 id="students-should-understand">Students should understand</h4>

<ul>
  <li>The value of treating lexical analysis as a distinct concern</li>
  <li>The difference between lexemes and tokens</li>
  <li>How input buffering is used to scan ahead on input</li>
  <li>The concepts of transition diagrams and finite automata</li>
  <li>The relationship between deterministic and nondeterministic finite automata</li>
  <li>The technical definition of regular languages (and regular expressions)</li>
  <li>How a finite automata is implemented</li>
  <li>An intuition for how a program like lex/flex/jison-lex works</li>
</ul>

<h4 id="students-should-be-able-to">Students should be able to</h4>

<ul>
  <li>Draw state transition diagrams for simple tokenization problems</li>
  <li>Write simple regular expressions</li>
  <li>Given a simple transition diagram or regular expression, convert by hand to
the other form</li>
  <li>Use <a href="https://github.com/zaach/jison-lex">zaach/jison-lex</a> (or lex/flex) to
generate lexical analyzers from Bison’s lexical grammar format</li>
</ul>

<h4 id="aiken-videos">Aiken videos</h4>

<ul>
  <li>Lexical analysis: <em>recognize</em> lexical units (place dividers) and then
<em>classify</em> elements according to their roles (identifier, keyword, variable,
etc)
    <ul>
      <li>Identifier: string of letter or digits starting with a letter (like Foo or
B17)</li>
      <li>Integer</li>
      <li>Keyword</li>
      <li>Whitespace</li>
    </ul>
  </li>
  <li><em>Goal</em>: Classify substrings of program according to role/class and communicate
these tokens to the parser
    <ul>
      <li>Sends tuples to parser</li>
    </ul>
  </li>
  <li>Lookahead may be required to decide where one token ends and the next begins</li>
  <li>More FSM stuff:
https://www.youtube.com/watch?v=dmgX0jKoUJw&amp;list=PLLH73N9cB21VSVEX1aSRlNTufaLK1dTAI</li>
</ul>

<h4 id="lets-look-at-aiken-videos-for-regexes-and-fsm">Let’s look at Aiken videos for regexes and FSM</h4>

<ul>
  <li>Lexical spec helps you lex stuff</li>
  <li>Maximal munch: when you have a choice between two different both valid
tokens take the bigger one</li>
  <li>Error is anything that doesn’t match any rule</li>
  <li>Good algos known</li>
  <li>Choose highest priority, longest match if there are ambiguities</li>
  <li>Regexes are good!</li>
  <li>Regex = specification, finite automata = implementation</li>
  <li>Finite automata:
    <ul>
      <li>Input alphabet</li>
      <li>Set of states</li>
      <li>Start state</li>
      <li>Set of accepting states</li>
      <li>Set of transitions</li>
    </ul>
  </li>
  <li>Notations and stuff</li>
  <li>If end of input and in accepting state -&gt; accept that thing and move
on
    <ul>
      <li>Otherwise, reject</li>
    </ul>
  </li>
  <li>Can draw out finite automata as graphs</li>
  <li>Language of FA = set of accepted strings</li>
  <li>Can have self-loops :)</li>
  <li>Epsilon-move means state can change without changing input pointer
    <ul>
      <li>Free move</li>
      <li>It’s a choice :)</li>
    </ul>
  </li>
  <li>DFA (deterministic) only have one transition per input per state. No
epsilon moves. :)
    <ul>
      <li>Only one path through state graph per input</li>
    </ul>
  </li>
  <li>NFA (nondeterministic) can hvae multiple transitions for one input in
a given state, can have epsilon moves
    <ul>
      <li>Accepts if <em>some</em> choices lead to acceptance at end of input</li>
    </ul>
  </li>
</ul>

<h3 id="3-parsing">3: Parsing</h3>

<h4 id="recursive-descent-parsing">Recursive Descent Parsing</h4>

<ul>
  <li>Top-down
    <ul>
      <li>Parse tree constructed top to bottom, left to right</li>
    </ul>
  </li>
  <li>Start with a grammar for E and T</li>
  <li>Start with top-level non-terminal E</li>
  <li>Keep going as long as you have unexpanded non-terminals</li>
  <li>Try rules for E in order
    <ul>
      <li>Keep trying decisions, undo if wrong, keep going until right</li>
      <li>Possibilities when you see something??</li>
    </ul>
  </li>
  <li>Keep going till you get to something you accept ._.</li>
  <li>Ok let’s try an algorithm</li>
  <li>First define a bunch of boolean functions that check for matches
    <ul>
      <li>Given token terminal?</li>
      <li>nth production of a non-terminal?</li>
      <li>Try all productions of a non-terminal</li>
      <li>Backtracking: save the pointer to the next token so that you can go
back</li>
    </ul>
  </li>
  <li>Starting parser
    <ul>
      <li>Initialize next to point to first token</li>
      <li>Invoke the top thingy, E()</li>
    </ul>
  </li>
</ul>

<h4 id="bottom-up-parsing">Bottom-up parsing</h4>

<ul>
  <li>More general than top-down parsing</li>
  <li>Just as efficient, uses similar ideas. Used more</li>
  <li><em>reduces</em> a string to the start symbol by inverting productions</li>
  <li>Reduction is the opposite of production</li>
  <li>To get back, keep doing the rightmost non terminal
    <ul>
      <li>Bottom-up parser traces a rightmost derivation in reverse</li>
    </ul>
  </li>
  <li>Reduction: replace the children of the right hand side of a production
with its parent?</li>
</ul>

<h4 id="lecture">Lecture</h4>

<ul>
  <li>Parts of a language
    <ul>
      <li>Reader
        <ul>
          <li>Just takes stuff in</li>
        </ul>
      </li>
      <li>Generator
        <ul>
          <li>Creates things that have been read</li>
        </ul>
      </li>
      <li>Translator
        <ul>
          <li>Changes generated output to some other output</li>
        </ul>
      </li>
      <li>Interpreter
        <ul>
          <li>Actually produces output</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Regular vs. context-free language
    <ul>
      <li>Regular language can be recognized with regular expression (e.g.
emails)</li>
      <li>Context-free language canNOT be recognized with regular expression</li>
    </ul>
  </li>
  <li>Deterministic vs. Non-deterministic
    <ul>
      <li>Deterministic: can be parsed in one pass. Can tell you how long
it’ll take to parse just by looking at length</li>
      <li>Non-deterministic: Cannot determine how long it’ll take to parse
just by looking at the length</li>
    </ul>
  </li>
  <li>So, JS is context-free and non-deterministic</li>
  <li>LL vs LR are two types of parsers
    <ul>
      <li>First L is for read left-to-right, second char is whether you read
from top or bottom</li>
      <li>LL = top-down recursive descent
        <ul>
          <li>Use if backtracking required</li>
        </ul>
      </li>
      <li>LR = bottom up, faster
        <ul>
          <li>Use if no backtracking required</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>All parsers come from EBNF</li>
</ul>

<h3 id="4-semantic-analysis">4: Semantic Analysis</h3>

<h4 id="compilers-as-assistants">Compilers as Assistants</h4>

<ul>
  <li>http://elm-lang.org/blog/compilers-as-assistants</li>
  <li>Compilers as assistants not adversaries
    <ul>
      <li>Good error messages</li>
      <li>Incomplete pattern matches
        <ul>
          <li>If there’s no else branch for an if, for example</li>
        </ul>
      </li>
      <li>Tail-call optimization
        <ul>
          <li>Some recursive functions can be turned into while loops which is a
huge performance benefit</li>
        </ul>
      </li>
      <li>Remove unneeded syntax and code</li>
    </ul>
  </li>
  <li>Explicit type errors and helpful messages and whatnot</li>
  <li>Cool, fancy stuff</li>
</ul>

<h4 id="aiken-stuff-9-1-9-4-9-5">Aiken Stuff (9-1, 9-4, 9-5)</h4>

<ul>
  <li>Lexing detects inputs with illegal tokens, parsing detects inputs with
bad parse trees, now Semantic Analysis is the last “front end” phase
and catches remaining errors</li>
  <li>Does checks
    <ul>
      <li>Declared identifiers</li>
      <li>Type checking</li>
      <li>Check inheritance</li>
      <li>Check single definitions for classes/methods</li>
      <li>Check that keywords aren’t misused</li>
    </ul>
  </li>
  <li>Let’s look at types</li>
  <li><em>Type</em> is a set of values and a set of operations on those values
    <ul>
      <li>Type system <em>specifies which operations are valid for which types</em></li>
      <li>Type checking <em>ensures that operations are used only with the
correct types</em></li>
    </ul>
  </li>
  <li>Static vs dynamic
    <ul>
      <li>Static catches errors at compile time instead of runtime, also more
efficient because don’t need to type check at runtime</li>
      <li>Dynamic typing more flexible and restricts development speed</li>
    </ul>
  </li>
  <li>Distinguish some terms
    <ul>
      <li><em>Type checking</em> is process of verifying fully typed programs</li>
      <li><em>Type inference</em> is filling in missing type information :)</li>
    </ul>
  </li>
  <li>Type checking bois</li>
  <li>Start with simple system, add features</li>
  <li>Notations
    <ul>
      <li>^ is and</li>
      <li>=&gt; is “if-then”</li>
      <li>x:T is “x has type T”</li>
      <li>Turnstile is “it is provable that”</li>
    </ul>
  </li>
  <li>Soundness in type system
    <ul>
      <li>If it is provable that e is of type T, then e should always
evaluate to type T</li>
    </ul>
  </li>
  <li>In he type rule used for e:
    <ul>
      <li>Hypotheses are the proofs of type e’s subexpressions</li>
      <li>Conclusion is the type of e</li>
      <li>Thus, types must be computed bottom up from the AST</li>
    </ul>
  </li>
</ul>

<h4 id="lecture-1">Lecture</h4>

<ul>
  <li>SemAn can be done throughout compilation process. Can be done before
or after AST
    <ul>
      <li>Lex time enforcement: “can’t have star followed by snowman token”</li>
      <li>Parse time enforcement: “let foo == bar”, can’t use equality like
dat</li>
    </ul>
  </li>
</ul>

<h3 id="5-stack-based-virtual-machines">5: Stack-based virtual machines</h3>

<h4 id="python-interpreter-in-python">Python interpreter in python</h4>

<ul>
  <li>Take compiled machine code and run it!</li>
  <li>Byterun is a python interpreter in python :)</li>
  <li>Disadvantage is speed</li>
  <li>Goal is to understand the interpretation process</li>
  <li>Most modern VM’s are stack-based cool</li>
  <li>Test your interpreter vs. reference implementation :) test stdout,
exception state, etc.</li>
  <li>Stack machine means it manipulates stacks to do everything</li>
  <li>Interpreter needs a stack, and a way to interact with that stack :)
    <ul>
      <li>Value loader is what interacts with the stack</li>
    </ul>
  </li>
  <li>Arguments to instructions are packed into bytecode. Okay</li>
  <li>Disassembler gives you information about the instructions in bytecode:
name, index, arguments. <code class="language-plaintext highlighter-rouge">dis</code> is one for python bytecode</li>
  <li>Call stack is made up of frames. Each frame is a “context” or “scope”;
module, function, etc.</li>
  <li>Actual implementation of C interpreter of Python is just a huuuge
switch statement on opcodes</li>
  <li>Should be one data stack per frame not one for the whole interpreter
    <ul>
      <li>Need this for generators</li>
    </ul>
  </li>
  <li>Whoaa string formatting is done with binary modulo</li>
  <li>“In absence of types, every instruction must be treated as
invoke_arbitrary_method” :feels:</li>
  <li>kool</li>
</ul>

<h4 id="lecture-2">Lecture</h4>

<ul>
  <li>Let’s look at object format for our VM</li>
  <li>Data for string literal in <em>const pool</em></li>
  <li><em>Code</em> is bytes where instruction + arguments are in there (e.g. the
string “Hello World” goes here)</li>
  <li><em>Globals</em> is where global keys are stored. So if you declare “foo =
bar” globally, “foo” is a global and the value for “bar” is in the
const pool</li>
  <li><em>Locals</em> is a map of string to object (we call env)</li>
  <li><em>ip</em> is the instruction pointer</li>
  <li><em>env</em> is environment variables</li>
  <li><em>local stack</em> is what we start up for looking @ what we got</li>
  <li><em>call stack</em> is another thing we start up, for tracking function call
nesting</li>
  <li>It’s much easier to target the JVM than a processor
    <ul>
      <li>Processor has so many physical constraints that instruction set is
limited. Can abstract that away in a virtual machine</li>
      <li>Slower but cross-platform :)</li>
    </ul>
  </li>
  <li>The JVM is a bytecode interpreter in general, but is a just in time
compiler on hot code paths</li>
</ul>

<h3 id="6-code-generation">6: Code Generation</h3>

<ul>
  <li>We basically just worked on converting our AST into a flat list of
instructions. Cool beans</li>
  <li>Basically do a post order depth first traversal to generate set of
instructions</li>
</ul>

<h4 id="dragon-book-81-and-82">Dragon Book 8.1 and 8.2</h4>

<h3 id="7-optimization">7: Optimization</h3>

<h4 id="dragon-book-91">Dragon Book 9.1</h4>

<ul>
  <li>Languages can have a lot of overhead if we naively translate each
construct independently to machine code! Making this better is called
optimization</li>
  <li>Most important thing is to preserve semantics of program</li>
  <li>Most programming languages abstract away stuff like pointer
arithmetic. Compiler can help manage this stuff well :)</li>
  <li>
    <p>Example of array access. Must be transformed by compiler to do pointer
arithmetic to find address of next array element, and then you access
whatever is at that address</p>
  </li>
  <li>Here are some transformations</li>
  <li>Common-subexpression elimination. E.g. if you compute an array index by
doing 4 * (i) a bunch of times, you can just do it once and have
subsequent references use the first calculation. Must be sure the
calculation is the same though!
    <ul>
      <li>Common subexpression is when an expression has been previously
computed and values of variables have not changed since</li>
    </ul>
  </li>
  <li>Copy propagation
    <ul>
      <li>Use original value instead of the copy wherever possible
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>x = t3
a[t2] = t5
a[t4] = x
goto B
</code></pre></div>        </div>
        <p>to</p>
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>x = t3
a[t2] = t5
a[t4] = t3
goto B
</code></pre></div>        </div>
      </li>
      <li>Helps with dead code elimination</li>
    </ul>
  </li>
  <li>Dead-code elimination
    <ul>
      <li>Can eliminate stuff that cannot be reached</li>
      <li>Deducing at compile time that an expression is constant and using
constant instead of variable is called <em>constant folding</em></li>
      <li>Can now eliminate <code class="language-plaintext highlighter-rouge">x = t3</code> after copy propagation above</li>
    </ul>
  </li>
  <li>Loops can def be optimized. <em>Code motion</em> takes an expression that
is constant inside the loop and moves it outside the loop so that it
can only be computed once. <code class="language-plaintext highlighter-rouge">while (i &lt;= limit - 2)</code> -&gt; <code class="language-plaintext highlighter-rouge">t = limit - 2;
while ( i&lt;= t)</code></li>
  <li>Also want to optimize induction variables in loops. Induction
variables change by a constant value in each iteration (e.g. the
iterator)</li>
  <li>Okay maybe these videos will help</li>
</ul>

<h4 id="aiken-videos-14-02-and-14-03">Aiken Videos (14-02 and 14-03)</h4>

<ul>
  <li>Why optimize? Tradeoffs?</li>
  <li>Largest, most complex phase</li>
  <li>When to optimize?
    <ul>
      <li>On AST: machine independent, but too high level</li>
      <li>On assembly: exposes more opportunities, but machine dependent, yuck</li>
      <li>On IR: Machine independent and exposes opportunities. Nice</li>
    </ul>
  </li>
  <li>Basic block: maximal sequence of instructions with no labels (except
first instruction) and no jumps (except last). Good for optimization
    <ul>
      <li>Guaranteed to go from beginning to end with no break</li>
      <li>Single entry single exit straight line code segment</li>
    </ul>
  </li>
  <li>Can look at stuff and try to optimize by hand :)</li>
  <li>Control flow graph is a directed graph with basic blocks as nodes.
Edge goes from A to B if last instruction in A can go to first
instruction in B
    <ul>
      <li>Can always represent method with control flow graph</li>
    </ul>
  </li>
  <li>Mostly want to optimize to improve execution time. But can also
optimize code size, network activity, etc.</li>
  <li>Different granularities of optimization
    <ul>
      <li>Local: occur within one basic block</li>
      <li>“Global”: apply to control flow graph in isolation (just in one
function)</li>
      <li>Inter-procedural: apply across a collection of functions</li>
    </ul>
  </li>
  <li>Most do local, many do global, not many do interprocedural
    <ul>
      <li>Better payoff at more local levels</li>
      <li>Goal: max benefit, min cost :)</li>
    </ul>
  </li>
  <li>Let’s look at local optimizations</li>
  <li>Delete temp vars</li>
  <li>Anything times 0 is 0</li>
  <li>Anything squared is just it times itself (simpler)
    <ul>
      <li>These are algebraic simplifications zzz</li>
    </ul>
  </li>
  <li>Compute constant operation results at compile time not runtime :)
    <ul>
      <li>x = 2 + 2 -&gt; x = 4</li>
      <li>Constant folding</li>
      <li>Dangerous! Don’t mess up the code! If you cross-compile you might
mess something up</li>
      <li>Floating point ops are super messy
        <ul>
          <li>Represent floating point ops as strings and then do operations
with all sig figs, then export with large numbers and let other
architecture figure it out?</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Can also eliminate unreachable basic blocks
    <ul>
      <li>If you have conditional that is always false, can remove one branch</li>
      <li>Also remove unused parts of stdlib or something?</li>
    </ul>
  </li>
  <li>Write intermediate code in single assignment form :) at most assign
one register once</li>
  <li>Explains copy propagation again :)
    <ul>
      <li>Only useful in conjunction with other optimizations</li>
    </ul>
  </li>
  <li>Each optimization does little by itself, but they can interact (one
enables another) and they eventually add up</li>
</ul>

<h4 id="lecture-3">Lecture</h4>

<ul>
  <li>Optimization with cc</li>
  <li>`cc -S -O 1 -masm=intel -o grain-O1.s grain.c</li>
</ul>

<h3 id="8-runtime-environments-stack-management-garbage-collection">8: Runtime environments, stack management, garbage collection</h3>

<h4 id="aiken-videos-171---173">Aiken videos (17.1 - 17.3)</h4>

<ul>
  <li>Storage management and memory management sucks</li>
  <li>Bugs! Forgetting to free, dereferencing dangling pointer, overwriting
parts of data by accident. Hard to find!
    <ul>
      <li>Suck b/c they show themselves far away from the source</li>
    </ul>
  </li>
  <li>Automatic memory management popularized by Java</li>
  <li>Strategy:
    <ul>
      <li>When object created, unused space automatically allocated</li>
      <li>After a while all space is used up</li>
      <li>Some space occupied by objects that will never be used again</li>
      <li>This space “garbage collected” to use later</li>
    </ul>
  </li>
  <li>How to know if object never used again?
    <ul>
      <li>Program can only use objects that it can find…if an object is
unreachable (no more pointers to it), toss it</li>
    </ul>
  </li>
  <li>Object <em>reachable</em> iff a register contains a pointer to x <em>or</em> another
reachable object y contains a pointer to x</li>
  <li>Can find all reachable objects by starting at registers and following
all pointers
    <ul>
      <li>Kinda an approximation for using stuff again. Just because object is
reachable does <em>not</em> mean it will be used again</li>
    </ul>
  </li>
  <li>Unreachable object can never be used, is <em>garbage</em></li>
  <li>Accumulator and stack pointer cover all the pointers you may need</li>
  <li>Some unreachable objects have pointers to them, but those will come
from other unreachable object</li>
  <li>Garbage collector:
    <ul>
      <li>Allocate space as needed for new objects</li>
      <li>When space runs out compute what objects may be used again, free
space used by objects that won’t be used again</li>
    </ul>
  </li>
  <li>Mark and Sweep GC</li>
  <li>Two phases</li>
  <li>Mark: trace reachable objects</li>
  <li>Sweep: collect gargbage objects</li>
  <li>Every obj has extra bit: <em>mark</em> bit
    <ul>
      <li>Reserved for memory management</li>
      <li>Set to 0 originally</li>
      <li>Set to 1 for reachable objects in mark phase</li>
    </ul>
  </li>
  <li>Sweep phase scans heap looking for objects with mark bit 0
    <ul>
      <li>Add items with mark bit 0 to free list</li>
      <li>Objects with mark bit 1 have mark bit reset to 0</li>
      <li>Free list ends up being linked list of free space</li>
    </ul>
  </li>
  <li>Tricky details :( typical!</li>
  <li>Sweep phase starts when we are out of space, but it needs somewhere to
construct the todo list! Sizeof todo list is unbounded oops
    <ul>
      <li>Trick: pointer reversal. When pointer followed, it is turned around
to point to parent</li>
      <li>Move up and down todo list by flipping your pointers</li>
      <li>Keep last pointer I traversed to in one register, so you can go from
there up to the parents and grandparents</li>
    </ul>
  </li>
  <li>Free list is stored in the free objects themselves</li>
  <li>Space for new object comes from free list
    <ul>
      <li>Block with enough size picked</li>
      <li>Area of correct size allocated</li>
      <li>Leftover put back in free list</li>
    </ul>
  </li>
  <li>Mark and sweep can fragment and merge blocks :)</li>
  <li>
    <p>Advantage of mark and sweep: objects not moved during GC. Means no
need to update pointers to objects, can work for C and C++</p>
  </li>
  <li>Stop and Copy</li>
  <li>Old space used for allocation, new space used as reserve for GC.
Program only allowed to use half the space</li>
  <li>Heap pointer points to next free word in old space</li>
  <li>Allocation just advances the heap pointer</li>
  <li>GC starts when old space is full</li>
  <li>Copy all reachable objects from old space to new space
    <ul>
      <li>Garbage left behind</li>
    </ul>
  </li>
  <li>Swap role of new and old space</li>
  <li>Problem: find all reachable objects!</li>
  <li>Difference: <em>copy</em> not mutate. Find and fix all pointers
    <ul>
      <li>As we copy, store in old copy a forwarding pointer to new copy
        <ul>
          <li>When we reach an object with forwarding pointer we know it’s been
copied</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>How to traverse without using extra space? Partition new space in
three regions: start, scan, alloc
    <ul>
      <li>start: copied objects whose pointer fields have been followed all
the way through</li>
      <li>scan: copied objects whose pointer fields have not been followed
yet. “work list”</li>
      <li>alloc: empty working space after scan space. When scan catches up
with alloc we’re done</li>
    </ul>
  </li>
  <li>Step by step</li>
  <li>1: Copy objects pointed to by roots and set forwarding pointers</li>
  <li>2: Follow pointer to next unscanned object in tree. Copy. Fix pointer
in copied version of root. Set forwarding pointer. Keep going until
done?</li>
  <li>Stop and copy generally believed to be fastest</li>
  <li>Allocation is cheap! Just incrememnt heap pointer</li>
  <li>Collection relatively cheap, especially if lots of garbage. Only touch
reachable objects</li>
</ul>

<h4 id="lecture-4">Lecture</h4>

<ul>
  <li>Java OO and GC language :)</li>
  <li>GC tradeoff is dev productivity vs program performance</li>
  <li>Basic manual memory management: brk is a syscall that sets the heap
pointer to different places. malloc/free wrap this syscall</li>
  <li>Reference counting: count how many times an object is referenced by
another object
    <ul>
      <li>Storing the number of references, pointers, or handles to a resource
such as an object, block of memory, disk space or other resource.</li>
      <li>Automatic reference counting: when reference count is 0, then that
space can be reused</li>
    </ul>
  </li>
  <li>Cool this is all background for garbage collection</li>
  <li>Generational: have different object pools with different frequencies
of GC if you can tell that some big objects that won’t need to be
checked for GC much</li>
</ul>

<h3 id="9-language-design-considerations-and-applications">9: Language Design Considerations and Applications</h3>

<h4 id="hamming-on-hamming---software">Hamming on Hamming - Software</h4>

<ul>
  <li>Context of software</li>
  <li>Books/paper with programs handstamped in</li>
  <li>Von neumann reports about software</li>
  <li>Primitive step of programs - Symbolic names for assembly programs
(recognize ADD and convert to binary)</li>
  <li>GG people just wanted to keep using binaries</li>
  <li>Logical languages don’t last long, psychological languages do</li>
  <li>Fortran survived; starts 50’s</li>
  <li>Then Lisp in 60’s</li>
  <li>People who speak first get credit
    <ul>
      <li>Person who discovers something rarely understands it</li>
    </ul>
  </li>
  <li>Everything in  a language is contained in subroutines</li>
  <li>
    <p>Rules for his language: easy to use, easy to learn, easy to debug,
easy to run subroutines</p>
  </li>
  <li>Gotta think about your languages more deeply than “this is literal”
    <ul>
      <li>We say a lot of stuff that isn’t black and white</li>
    </ul>
  </li>
  <li>Must understand the nature of language :)</li>
  <li>
    <p>Two languages: you to machine (want terse), machine to you (want
verbose)</p>
  </li>
  <li>Think before you write!</li>
  <li>Don’t write one line of code until you decide what your acceptance
test is</li>
  <li>
    <p>Good programmers are 10x better. Thanks Hamming</p>
  </li>
  <li>Programming like writing novels</li>
  <li>Most great writers don’t take courses in creative writing. Way to
become a great writer is not to take creative writing courses.</li>
  <li>Experience, using many languages - not good criteria for good
programmer</li>
  <li>Programmer who knows the constraints of problem and fills it in,
<em>thinking first</em>, is good</li>
  <li>Top-down approach - start with everything, fill it in. Cool</li>
  <li>
    <p>Come up with rules for yourself :) Helps with pattern recognition</p>
  </li>
  <li>Team programming very different from individual</li>
</ul>

<h4 id="lecture-5">Lecture</h4>

<ul>
  <li>Egan Understanding Hierarchy:</li>
  <li>Somatic: subconscious training of looking at stuff and recognizing
patterns. Chess players seeing patterns, doctors, etc. Custom
circuitry</li>
  <li>Mythic: big binary distinctions (children); old and young, black and
white. “Mythic” from old Greek/Roman myths that carve up the world
like this</li>
  <li>Romantic: reading and writing forms of communication</li>
  <li>Philosophic: math and stuff. Assign meaning</li>
  <li>Ironic: meta (puns)</li>
  <li>As you move between these levels you lose and gain things!
    <ul>
      <li>Missed goal of programming languages: fix-all languages that try to
not let you think in some of these ways</li>
    </ul>
  </li>
  <li>
    <p>Why is this important?</p>
  </li>
  <li>Language fundamentals</li>
  <li>Data vs code: it’s bad when you conflate code and data. Express what
you can of your program in data (stuff that doesn’t have conditions,
looping, etc.). Data more important! If you had to choose between data
and code, take data every time. Try to move immutable things from code
to data
    <ul>
      <li>Antipattern: Gemfile, gemspec. Package.json better. Gemfile.lock
best</li>
    </ul>
  </li>
  <li>Complexity: don’t confuse complexity/simplicity with
difficulty/easiness</li>
  <li>Primitives: what are the <em>most basic</em> parts of your program? Don’t get
bogged down in anything else until you nail this down</li>
  <li>Tools and tooling: tools and tooling get built up over a long time
    <ul>
      <li>Languages are products of passion, tools products of rage</li>
    </ul>
  </li>
  <li>Comparing languages is apples and oranges and people do it wrong</li>
  <li>Some good ideas in languages</li>
  <li>bash: REPL-first! Interactive, fast feedback. Good for its problems.
Large user base. Systems integration</li>
  <li>C: cross platform assembler! That’s the goal and we did it</li>
  <li>Clojure: it’s a lisp on the JVM. It’s a DSL for immutable data types.
    <ul>
      <li>Parasite language: no runtime of its own. Just uses the underlying
types (int, string, etc.)</li>
    </ul>
  </li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2017/03/26/bradfield-languages/</guid>
                <description>
                    
                    Lecture notes from Bradfield's languages class
                    
                </description>
                <pubDate>Sun, 26 Mar 2017 00:00:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Distributed Systems</title>
                <link>http://tigerthinks.com/2017/03/26/bradfield-distributed-systems/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<p>Slides and stuff: http://people.inf.elte.hu/toth_m/osztott_rendszerek_c/</p>

<h3 id="1---introduction-to-distributed-systems">1 - Introduction to Distributed Systems</h3>

<h4 id="tannenbaum-11---12">Tannenbaum 1.1 - 1.2</h4>

<ul>
  <li>More powerful microprocessors + development of high-speed LANs -&gt; many
machines cooperating to geet work done</li>
  <li><em>Distributed system</em>: collection of independent computers that appears
to its users as a single coherent system
    <ul>
      <li>Computers are autonomous</li>
      <li>Users are dealing with one system</li>
      <li>Means autonomous components need to collaborate</li>
    </ul>
  </li>
  <li>Characteristics
    <ul>
      <li>Differences b/t computers + ways they communicate are hidden from
users</li>
      <li>Interaction with system from user perspective is consistent and
uniform regardless of point of entry</li>
      <li>Maintenance, single node down, etc. shouldn’t be noticed by user</li>
    </ul>
  </li>
  <li>Goals</li>
  <li>Make resources easily accessible
    <ul>
      <li>Resource: printer, computer, data, web pages, etc.</li>
      <li>Stuff like e-commerce enabled by this connectivity</li>
      <li>Connectivity increasing does come with security concerns :/</li>
    </ul>
  </li>
  <li>Reasonably hide fact that resources are distributed across network
(Transparency)
    <ul>
      <li>All types of transparency: access, location, migration, relocation,
replication, concurrency, failure</li>
      <li>In conclusion though, transparency is a nice goal but it needs to be
considered alongside performance and comprehensability</li>
      <li>Getting full transparency can have a high cost</li>
    </ul>
  </li>
  <li>Open
    <ul>
      <li>Offer services according to standard syntax and semantics
(protocols)</li>
      <li>Describe interface via Interface Definition Language</li>
      <li>Interface should be <em>complete</em> and <em>neutral</em>: has everything
necessary to implement interface, but doesn’t push towards any
implementation style</li>
      <li>Should be extensible (add parts easily, run on diff OS or
filesystem, etc.)</li>
      <li>Separate policy (rules/implementation) from mechanism (actual thing
being done), e.g. caching is mechanism, cache usage policy can
differ</li>
    </ul>
  </li>
  <li>Scalable
    <ul>
      <li>Size, geographical, administratively</li>
      <li>Think about decentralizing services, data, and algorithms for size
scalability :)</li>
      <li>Geographic scalability related to size scalability a bit. Need to
get around the clock/time problem :/</li>
      <li>Administrative scalability: conflicting situations in all different
domains, e.g. users installing applets. May not get all the
permissions they need. Distributed systems need to protect
themselves from the new domain, new domain needs to protect
themselves from system. Hard! Need to resolve nontech problems
(humans, orgs, bleh)</li>
      <li>How to scale?
        <ul>
          <li>Hide communication latencies: try to avoid waiting for remote
rservice requests as much as possible (do useful work on my side
while remote request is happening). Async communication</li>
          <li>Distribution: Split up component into different parts and spread
parts across system. Hey check out DNS. Root TLDs make tree, all
the way down the subdomains until you get where you need to go</li>
          <li>Replication: copy your data. Increase availability and balance
load. Caching is a type of replication (but decision made by
client, not server). Leads to consistency problems though :/</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>So many pitfalls!</li>
  <li>Bad assumptions:
    <ul>
      <li>Network is reliable</li>
      <li>Network is secure</li>
      <li>Network is homogeneous</li>
      <li>Topology doesn’t change (ASK)</li>
      <li>Latency is 0</li>
      <li>Bandwidth is infinite</li>
      <li>Transport cost is 0</li>
      <li>There is one administrator</li>
    </ul>
  </li>
  <li>All of these things don’t come up in nondistributed systems, hence the
first rule of distributed systems: don’t distribute your systems</li>
</ul>

<h4 id="lecture">Lecture</h4>

<ul>
  <li>Distributed system is <em>a collection of parts that communicate slowly
and unreliably to do work</em></li>
  <li>Can distribute compute or storage, compute is much more difficult to
do</li>
  <li>First rule of distributed compute: don’t distribute your compute</li>
  <li><em>Open</em>: open for change, open for understanding, publicly</li>
  <li>When something is <em>transparent</em>, the client isn’t doing the
configuring (e.g. specifying exactly which port to go to)</li>
  <li>
    <p>Communication is tough - almost all Wide-Area Network communication
happens point to point, but in the cloud a distributed system wants to
broadcast!</p>
  </li>
  <li><em>Cluster</em>: uniform, homogeneous set of nodes</li>
  <li>
    <p><em>Grid</em>: non-uniform, heterogeneous set of nodes. You would use maybe
your own protocol here if you understood the hardware</p>
  </li>
  <li>Our networks are gonna be <em>asynchronous</em>: no guarantees about lockstep
work and stuff</li>
  <li>Benefit of “immutable” data: you can transfer data between nodes without
a consequence of overwriting data
    <ul>
      <li>Mutable data is not necessarily a performance increase/something you
do if you don’t care about history! Benefit of immutability is also
that you’re writing sequentially :). Can garbage collect to free
space if you don’t care about history</li>
    </ul>
  </li>
  <li>Identity: how do identify data? Want to use them as pointers to
content
    <ul>
      <li>Hard to come up with unique id’s!</li>
      <li>Useful to be able to order identities</li>
      <li>Senior engineer question: design an ID scheme
        <ul>
          <li>40 bits for time (ms granularity, choose your own epoch!), 14 bits
for seq num, 10 bits for node id</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Modern regex: takes a linear time and space to match a string</li>
</ul>

<h3 id="2---communication-models-and-patterns">2 - Communication Models and Patterns</h3>

<h4 id="tannenbaum-41---44">Tannenbaum 4.1 - 4.4</h4>

<ul>
  <li><em>Interprocess communication is at the heart of all distributed
systems</em></li>
  <li><em>Multicasting</em>: general problem of sending data to multiple receivers</li>
  <li>Want more context on background behind RPC</li>
  <li>See slides</li>
</ul>

<h4 id="lecture-1">Lecture</h4>

<ul>
  <li>Even with TCP (reliable transport), you don’t have reliable
application transport!</li>
  <li>
    <p><em>Framing</em>: you need to wrap a message such that the receiver knows
when the message is over</p>
  </li>
  <li>Messaging patterns</li>
  <li>Request/Response
    <ul>
      <li>Uses background processes as an internal application-level queue for
messages. Helps with application-level reliability</li>
      <li>Server replies to the client (conversation)</li>
    </ul>
  </li>
  <li>Push/Pull
    <ul>
      <li>Contract: client creates data, drops it on a predetermined sharing
socket for the server. Client does not actually expect a response
from the server. Shouting in one direction, not a conversation</li>
    </ul>
  </li>
  <li>Pub/Sub
    <ul>
      <li>Pretty much push/pull, but not one to one</li>
      <li>Binding is what creates the socket in the first place, <em>generally</em>
that’s the publisher. Nodes that <em>connect</em> later on are generally
subscribers?</li>
    </ul>
  </li>
  <li>
    <p>You can describe all of your network communication in a system with
these three primitives :) don’t get fancier</p>
  </li>
  <li>Making a chat protocol</li>
  <li>Naively: each client needs 3 sockets
    <ul>
      <li>One for fetching archive cmsgs (REQUEST)</li>
      <li>One for sending cmsgs (PUSH)</li>
      <li>One for subscribing to new cmsgs (SUB)</li>
    </ul>
  </li>
  <li>Server:
    <ul>
      <li>Archive (REPLY)</li>
      <li>ADD MSG (PULL)</li>
      <li>SEND MSG (PUB)</li>
    </ul>
  </li>
  <li>How to multiplex these onto one socket?</li>
</ul>

<h3 id="3---consensus-paxos-and-raft">3 - Consensus: Paxos and Raft</h3>

<h4 id="video-introduction-to-raft">Video: Introduction to Raft</h4>

<h5 id="leader-election-demo">Leader Election Demo</h5>

<ul>
  <li>One leader, elected to begin with, everyone else is a follower</li>
  <li>Followers wait for heartbeats from leader, if they don’t receive
within a certain amount of time they time out
    <ul>
      <li>At most 1 leader per turn</li>
    </ul>
  </li>
  <li>Every message includes a term number. If you get one ahead of your
current term, you advance</li>
  <li>To become a leader, you first vote for yourself in an election, then
send out “request vote” RPCs to get votes from other servers
    <ul>
      <li>If you get a majority you’re the leader for that turn</li>
    </ul>
  </li>
  <li>What if you get split votes?
    <ul>
      <li>Two candidates each get half of votes :/</li>
      <li>Just wait an extra timeout :)
        <ul>
          <li>Timeouts are all randomized (like Ethernet, gg)</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h5 id="log-replication-demo">Log Replication Demo</h5>

<ul>
  <li>RPC is “append entry” to catch up to log
    <ul>
      <li>After caught up to log, RPC is “heartbeat”</li>
    </ul>
  </li>
  <li>
    <p>Must commit to majority of servers in order to present uniform
interface to client</p>
  </li>
  <li>How to repair inconsistencies?</li>
  <li>Missing entries: fill in the missing entries if you get an
append-entry with an index too far ahead. Back up until you match</li>
  <li>Extraneous entries: blindly overwrite if you hear from a later-on
leader</li>
</ul>

<h5 id="safety">Safety</h5>

<ul>
  <li>Request for votes includes candidate’s last log entry. Don’t grant any
votes to people with worse logs than you (earlier term, or shorter)</li>
</ul>

<h4 id="lecture-2">Lecture</h4>

<ul>
  <li>Configuration for Raft:
    <ul>
      <li>Addresses</li>
      <li>Snapshot of log</li>
      <li>State machine</li>
    </ul>
  </li>
  <li>Node state:
    <ul>
      <li>Log (array of pairs of [term, data])</li>
    </ul>
  </li>
  <li>Out of scope: each node figuring out who else is in the cluster</li>
  <li>RPC’s can all happen over ZeroMQ req/rep sockets</li>
  <li><em>Non-Byzantine</em> conditions: all nodes are operating under the same
policy</li>
  <li>Term acts as vector clock</li>
  <li>A term is the length of time of one leadership</li>
  <li>Each message has unique ID so that you know not to double-play retried
request to two different leaders</li>
</ul>

<h3 id="4---naming-and-name-services">4 - Naming and name services</h3>

<h4 id="tannenbaum-51---53">Tannenbaum 5.1 - 5.3</h4>

<ul>
  <li>See slides in 04_naming</li>
</ul>

<h4 id="lecture-3">Lecture</h4>

<ul>
  <li><strong>The entity is the identity</strong></li>
  <li>Naming anti-patterns:
    <ul>
      <li>There is a place for random names/identities - it is better to give
something a seemingly nonsensical name (esp. if it plays multiple
roles) than misname it</li>
      <li>False hierarchies where you don’t need them. As soon as you come up
with categories you come up with exceptions :/</li>
    </ul>
  </li>
  <li>Gg</li>
</ul>

<h3 id="5---synchronization-time-and-logical-clocks">5 - Synchronization, time, and logical clocks</h3>

<h4 id="tannenbaum-61---62">Tannenbaum 6.1 - 6.2</h4>

<ul>
  <li>See slides in 05_synchronization</li>
  <li>We asking about vector clocks out of order then I guess</li>
</ul>

<h4 id="lecture-4">Lecture</h4>

<ul>
  <li>NTP synchronizes real time (universally)
    <ul>
      <li>Predicated on belief that there is real time</li>
    </ul>
  </li>
  <li>
    <p>You also have a quartz crystal thingy not related to your CPU clock
rate, used to time things locally</p>
  </li>
  <li>
    <p>Realtime operating systems: can run a function every 50ms, <em>on the
dot</em></p>
  </li>
  <li>
    <p>Causal ordering only matters for multiple machines! Event A fires at 451
on node X, event B fires at 452 on node Y, depending on event A</p>
  </li>
  <li>Vector clocks: each node keeps a map of nodes =&gt; vector clocks. When
you get an update you update your own vector clock state. Whenever you
synchronize with someone else, you send along your vector clock</li>
</ul>

<h3 id="6---replication-and-fault-tolerance-in-depth">6 - Replication and Fault Tolerance in Depth</h3>

<h4 id="tannenbaum-71---73-p273-p295">Tannenbaum 7.1 - 7.3 (p273-p295)</h4>

<ul>
  <li>See slides</li>
</ul>

<h4 id="tannenbaum-85---86-p355-p373">Tannenbaum 8.5 - 8.6 (p355-p373)</h4>

<ul>
  <li>No more slides RIP</li>
  <li>Hmm okay good stuff</li>
</ul>

<h4 id="lecture-5">Lecture</h4>

<ul>
  <li><em>Availability</em>: high availability is all your requests getting good
latency and succeeding; low availablility is failed requests, slow
requests. Nothing to do with uptime! Think of a human being -
responsiveness
    <ul>
      <li>What kind of bank would you want? High availability!</li>
      <li>Alias to responsiveness</li>
    </ul>
  </li>
  <li><em>Reliability</em>: how often a system is up. Can have a highly available
system (10ms response times) that is not reliable (goes down every 20
minutes)
    <ul>
      <li>Maps to people: reliable person can only do something once a day,
but they always do it. Bitcoin doesn’t have this kind of guarantee</li>
      <li>Contract isn’t broken</li>
    </ul>
  </li>
  <li><em>Safety</em>: if a failure occurs, you can’t take the next action. When
one of the components crashes, you’re not in a dangerous/corrupt state
    <ul>
      <li>i.e. in a bungee jumping system, if the failsafes are red, you can’t
step out onto the plank</li>
      <li>Unsafe but reliable: there are bugs that can lead to bad stuff, but
they still do the job</li>
      <li>Safe: never allows you to enter a bad state</li>
    </ul>
  </li>
  <li><em>Consistency</em>: extent to which nodes agree on state, high consistency
means you get the same thing when you ask over and over</li>
  <li><em>Coherency</em>: data that doesn’t make sense according to user-imposed
constraints
    <ul>
      <li>e.g. you add a foreign key constraint but you do a table scan and
see that it’s violated</li>
      <li>If a data store violates an application-level constraint, it can
still be considered safe but it is incoherent</li>
      <li>Related:
        <ul>
          <li>Adherent: believe something despite evidence (not part of one’s
nature). Glue is adhesive</li>
          <li>Inherent: built-in (humans have two legs)</li>
          <li>Coherent: two things fit together. Cohesive is working together
(Lego)</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><em>Monotonic reads</em>: client never gets data older than what it has
already received. Can always trust data you received later more tahn
data you received earlier</li>
  <li><em>Monotonic writes</em>: guarantee that writes occur in the order that the
specific client sent them</li>
  <li>
    <p><em>Read your writes</em>: you always get what you wrote or something later
when you write data</p>
  </li>
  <li>One phase commit: node who services write just commits data locally</li>
  <li>Two phase commit: node who services write first sends new data to
others and waits for acknowledgement of data before doing a hard
commit. Don’t write until you’re satisfied that enough nodes have
received the data</li>
</ul>

<h3 id="7---peer-to-peer-systems">7 - Peer-to-peer systems</h3>

<h4 id="tannenbaum-523">Tannenbaum 5.2.3</h4>

<ul>
  <li>Got slides from before</li>
</ul>

<h4 id="chord-a-scalable-peer-to-peer-lookup-service-for-internet-applications">Chord: A Scalable Peer-to-peer Lookup Service for Internet Applications</h4>

<ul>
  <li>See PDF</li>
  <li>
    <h2 id="look-more-into-the-sha-1-collision-thing">Look more into the SHA-1 collision thing</h2>
  </li>
</ul>

<h4 id="lecture-6">Lecture</h4>

<ul>
  <li>Problem with naive modulo hashing algorithm?
    <ul>
      <li>Have to re-hash everything if you add/delete a node</li>
    </ul>
  </li>
  <li>Still don’t get Chord, RIP</li>
</ul>

<h3 id="8---distributed-file-systems">8 - Distributed file systems</h3>

<h4 id="tannenbaum-111---114-p491---513">Tannenbaum 11.1 - 11.4 (p491 - 513)</h4>

<ul>
  <li>
    <p>Goal: allow multiple processes to share data over long periods of time
in a secure and reliable way</p>
  </li>
  <li>Client-server is most basic</li>
  <li>NFS (Network File System) by Sun is widely used
    <ul>
      <li>Each NFS server provides standardized view of FS, regardless of its
internal storage</li>
    </ul>
  </li>
  <li><em>Remote file service</em> model:
    <ul>
      <li>Client has interface similar to its local file system, server
responsible for implementing that interface</li>
    </ul>
  </li>
  <li><em>Upload/download</em> model:
    <ul>
      <li>Client accesses locally after downloading from server. E.g. FTP</li>
    </ul>
  </li>
  <li>Ayyah, see slides</li>
  <li>Okay</li>
</ul>

<h4 id="lecture-7">Lecture</h4>

<ul>
  <li>Don’t distribute your files fam
    <ul>
      <li>Instead of using files, can we just use flat key-value binary blobs?
Any kind of smaller set of records?</li>
    </ul>
  </li>
  <li>Only reason to distribute filesystem is that all programs already talk
the filesystem API</li>
  <li>The filesystem is made up of <em>inodes and blocks</em>
    <ul>
      <li>Blocks are an address and associated byte data (file and directory
contents)</li>
    </ul>
  </li>
  <li>
    <p>/tmp is all in-memory :)</p>
  </li>
  <li>Distributed filesystems are a bad idea because they break implicit
contracts by processes expecting certain performance, reliability,
etc. characteristics of file accesses</li>
  <li>
    <p>This changes with NFS v4, which makes you declare explicitly that
you know you’re using a distributed file system</p>
  </li>
  <li>NFS, GFS is client-server model</li>
  <li>DropBox is download-upload model
    <ul>
      <li>Userland process monitors folder, listens to filesystem events from
kernel, and uploads files to server on file changes</li>
    </ul>
  </li>
  <li>Git is da best distributed file system
    <ul>
      <li>Everything is explicit: fetch, push, log, etc</li>
    </ul>
  </li>
  <li>Merkle tree sync</li>
  <li>Node B wants content from node A, identified with a content hash</li>
  <li>Content hash isn’t for entire file, it’s for individual block or group
of blocks</li>
  <li>This allows you to verify content hash on parts of data without
downloading the entire file</li>
  <li>So B asks for block 0 using the content hash of the entire file, A
sends block 0 <em>along with the entire Merkle tree so B can verify that
the contents were correct</em>
    <ul>
      <li>Optimization: B may already have some hashes because it got and
verified other data blocks, it can send those to A as well so A
knows the state</li>
    </ul>
  </li>
  <li>How to represent tree?</li>
  <li>Use flat in-order tree, which is binary addressable
    <ul>
      <li>How sway</li>
      <li>
        <h1 id="of-trailing-1s-in-binary-representation-of-indices-is-the-depth-of">of trailing 1s in binary representation of indices is the depth of</h1>
        <p>that node in the tree</p>
      </li>
    </ul>
  </li>
  <li>Missing a piece about signing the root of the Merkle tree</li>
</ul>

<h3 id="9---revision">9 - Revision</h3>

<h4 id="lecture-8">Lecture</h4>

<ul>
  <li>Implied stuff in what we’ve studied: secure network, trusted nodes
    <ul>
      <li>In the Internet this isn’t the case!</li>
      <li>Intra-distributed systems: Cassandra/Riak/etc.d/Kafka
        <ul>
          <li>With ZMQ: super naive! Bare minimum
            <ul>
              <li>Why doesn’t this work over the Internet? i.e what we did for our
chat app</li>
              <li>Doesn’t scale with TCP sockets; we needed 3! Should try and use one
per connection</li>
              <li>Not designed for performance/reliability</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>Inter-distributed systems: dat, bittorrent, bitcoin, DNS. Require
encryption/security
        <ul>
          <li>Use gRPC</li>
        </ul>
      </li>
      <li>Make this distinction clearly when you’re dealing with distributed
systems</li>
    </ul>
  </li>
  <li><em>Encryption is not about security, it’s about verifying that the
content hasn’t been messed with in the middle (authenticity)</em></li>
  <li>Important concepts for designing Internet application:
    <ul>
      <li>Where are keys?</li>
      <li>What is signed?</li>
      <li>How is signature checked</li>
    </ul>
  </li>
  <li>Tor architecture:
    <ul>
      <li>All Tor nodes on a single graph</li>
      <li>You want Silk Road? Distribute any single node’s DNS request across
multiple nodes</li>
    </ul>
  </li>
  <li>ZeroMQ dealer/router stuff
    <ul>
      <li>Multiple clients, multiple servers - proxy in the middle sends xREQ
and returns xREP to the client, and clients connect directly to the
proxy</li>
    </ul>
  </li>
  <li>Dealer/router: dealer on every node
    <ul>
      <li>Delivering message to dealer socket: it will go to all other dealers</li>
      <li>Take TCP, add message framing, don’t do anything else</li>
      <li>Write to dealer, can send random stuff</li>
    </ul>
  </li>
  <li>Router does what? Dealer connects to it, so it prefixes an identity to
the message
    <ul>
      <li>First up, Dealer “greets” router</li>
    </ul>
  </li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2017/03/26/bradfield-distributed-systems/</guid>
                <description>
                    
                    Lecture notes from Bradfield's distributed systems class
                    
                </description>
                <pubDate>Sun, 26 Mar 2017 00:00:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Databases</title>
                <link>http://tigerthinks.com/2017/03/26/bradfield-databases/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<h3 id="1-introduction-to-database-engines">1: Introduction to Database Engines</h3>

<h4 id="architecture-of-a-database-system-hellerstein-stonebraker-hamilton">Architecture of a Database System (Hellerstein, Stonebraker, Hamilton)</h4>

<ul>
  <li>
    <p>What goes into designing a database? Process models, parallelism,
storage system, transaction system, query processor + optimizer,
shared components</p>
  </li>
  <li>Database architecture info isn’t as well circulated as it should be
because the community is small and traditionally people focus on
algorithms not architecture</li>
  <li>Relational systems most common nowadays</li>
  <li>Five parts of a dbms: process manager, client communications manager,
relational query processor, transactional storage manager, shared
components and utilities</li>
  <li>Life of a query
    <ul>
      <li>Query initialized by a call or something, client server interaction
Dbms assigns thread of computation to command. Makes sure client can get
to output stream. Job of process manager. Admission control is important
here - start processing query now or defer until more resources
available?</li>
      <li>Relational query processor checks that user is authorized to run query,
compiles sql into a query plan. Then the plan executor, which is made up
of operators for executing queries (join, select, etc) , takes the plan
and runs it</li>
      <li>Part of query plan is operator whose job is to request data. They make
calls to the transactional storage manager, which manages data crud.
Storage system is made up of tables and indices (“access methods”) and
whatnot. Also has buffers for storage and disk and memory and stuff.
Lock must be acquired from lock manager to make sure no conflicts. If
it’s a write, interact with log manager to make sure transaction is
durable</li>
      <li>Now record access is happening, result being computed for client.
“Unwind the stack”: access methods return to query executor operators,
which compute the results from db data, which are placed on buffer for
client communications manager, which puts results on caller’s plate.
Then connection is closed and everyone cleans up. Txn manager cleans
state, process manager frees control structures, communications manager
cleans control state</li>
    </ul>
  </li>
  <li>Overview</li>
  <li>
    <p>Scope of this paper is mostly architectural yay</p>
  </li>
  <li>Process models</li>
  <li>Models for highly concurrent systems</li>
  <li><em>Process</em> is an OS program execution unit with a private execution
space and address space</li>
  <li><em>Thread</em> is an OS program execution unit without additional private
context and without additional private address space. Each thread can
get to same memory as other threads in the process. Execution scheduled
by OS, called “k-threads”. Compute isolation abstraction, whereas
processes are memory abstracted</li>
  <li><em>Lightweight thread package</em>: application-level construct for multiple
threads in a single process. Scheduled at application level, not OS.
Faster thread switches because you don’t need to context switch to
kernel code. However, blocking ops (e.g. synchronous i/o) stop all
threads in process rather than just one. Remedy this by only doing async
work. More difficult. Some DBMS’s implement their own lightweight thread
packages.</li>
  <li><em>Client</em> is what talks to the database from application programs</li>
  <li>
    <p><em>DBMS Worker</em> is the thread of execution that does work on behalf of
client. Each worker handles SQL requests from one client</p>
  </li>
  <li>Some simple systems</li>
  <li>Assumptions: good OS thread support and uniprocessor hardware (these break
later!)</li>
  <li>Process per DBMS worker: each client gets a process. Easy to
implement, but getting data shared between workers is hard. Doesn’t
scale well. Shared data needs to happen with OS-supported shared
memory (e.g. memory mapping)</li>
  <li>Thread per DBMS worker: Single process hosts all workers. Dispatcher
thread listens for new client connections and allocates new thread.
Hard because of lack of memory protection between threads. Scales to
large number of connections. Use a DBMS worker if you’re nixing the
first assumption (implement your own lightweight threads)</li>
  <li>Process pool: similar to process per, but instaed of spinning up one
process per client you have a pool of processes through which requests
get multiplexed. Much more memory efficient</li>
  <li>How to deal with sharing? Share data structures and state.
By using buffers: disk i/o and client communication</li>
  <li>(Disk i/o) <em>Buffer pool</em> is where all persistent data is staged.
Thread generates request asking for an address on disk and provides a
free buffer pool spot where it wants to read the memory from. To go from
buffer-&gt;disk, thread gives a destination and a pointer to spot in buffer
where data is stored. For thread per worker, it’s just a structure on
the heap. Otherwise, it’s in shared memory</li>
  <li>(Disk i/o) <em>Log Tail</em> is where all logs from processes/threads go, and it is
flushed to disk first in first out. Key point: threads/processes need
to be able to request that log records be written and that log tail be
flushed. Shared memory</li>
  <li>Client communication buffer preps stuff it thinks the client will
need, prefetching so it’s already available</li>
  <li>Postgres, Oracle use process per DBMS worker, MySQL uses thread per DBMS
worker</li>
  <li>SQL Server, Microsoft SQL Server use DBMS workers multiplexed over a
thread pool</li>
  <li><em>Admission Control</em>: don’t accept new work unless there are available
resources. Two tiers
    <ul>
      <li>Dispatcher keeps # of client connections below a certain amount</li>
      <li>After parse and optimize, query processor determines whether to run
immediately, postpone, or start execution with fewer resources. Uses
info about how long the optimizer expects it to take. Memory
footprint generally the most crucial aspect</li>
    </ul>
  </li>
  <li>Processes and Memory Coordination (Parallel Architecture)</li>
  <li>Modern hardware has <em>shared memory and disk</em> with equally access time
from all cores, works well for all models, supporting execution of
multiple independent queries in parallel</li>
  <li>Another model is <em>shared-nothing</em>, where you have a bunch of nodes ina
cluster and you horizontally partition your data between them. Each
node can accept requests and then send out requests to other nodes to
try and find the data they’re looking for. Query run in parallel a bunch
of times, data returned back</li>
  <li>
    <p><em>Shared disk</em>: processor can access the same disk, but have separate
RAM. Advantage over shared-nothing is lower cost of administration
(don’t need to think about partitioning). Nice b/c failure of one node
doesn’t affect other nodes’ ability to access entire database. Because
memory isn’t shared, need a distributed lock manager and cache coherency
protocol to resolve conflicts between each node’s copy of the data</p>
  </li>
  <li>Now if we break the assumption of uniprocessor hardware things get
interesting</li>
  <li>
    <p>If you do thread per DBMS worker, you can only have one process, so
you lose all advantages of multi-processor hardaware. Instead, you
should map DBMS threads onto multiple processes. Generally have one OS
process per processor, and then allocate them evenly?</p>
  </li>
  <li>Same theme in terms of support: most DBMS’s support multiple
parallelism models. Shared memory is almost ubiquitious. Then, systems
make choiec between shared disk and shared nothing</li>
</ul>

<h5 id="relational-query-processor">Relational Query Processor</h5>

<ul>
  <li>Bit finer-grained</li>
  <li>Job: take a declarative SQL statement, validate it, optimize it into
a query plan, execute that plan on behalf of the client program</li>
  <li>Client pulls the result tuples one at a time or in pages</li>
  <li>
    <p>Concurrency managed at lower levels, so this can be abstracted as
single user single thread</p>
  </li>
  <li>Parsing and authorization</li>
  <li>Query correctly specified?</li>
  <li>Resolve names and references</li>
  <li>Convert query into internal format</li>
  <li>Verify user is authorized for query</li>
  <li>Four part name for unique table: <code class="language-plaintext highlighter-rouge">server.database.schema.table</code></li>
  <li>
    <p>Asks <em>catalog manager</em> to make sure tables are registered in the
catalog so you can quit if they aren’t. Catalog contains metadata</p>
  </li>
  <li>Query rewrite</li>
  <li>Simplify and normalize query without changing semantics</li>
</ul>

<h4 id="stonebraker-retrospective">Stonebraker retrospective</h4>

<ul>
  <li>https://www.youtube.com/watch?v=9K0SWs1mOD0</li>
  <li>Spent lots of time since 70’s trying to make RDBMS’s the truth (added
ADTs, triggers, etc)</li>
  <li>Realized in 2005 that this wouldn’t work, streaming was so so
different</li>
  <li>One Size Fits None now :(</li>
  <li>Data Warehouses: column stores are way faster than row stores, column
stores will replace them soon enough</li>
  <li>OLTP (online transaction processing): just put all your data in main
memory, pay that cost</li>
  <li>NoSQL has no standards and none are same as row stores from legacy
vendors</li>
  <li>Analytics: lots of more complex stuff than SQL, data scientists will
do fancier stuff than table operations (arrays not tables)</li>
  <li>Graph Analytics: can simulate in a column store/array engine, or use
special purpose graph engine. Row stores will not work here</li>
  <li>Huge diversity of engines, all oriented towards specific
verticals/applications. Traditional row stores are good at none of
these markets :(</li>
  <li>Lots of different engines and new ideas</li>
  <li>Elephants in the room have a hard time going from old to new without
losing market share</li>
  <li>Hekaton is main-memory implementation behind the interface of SQL
Server</li>
  <li>80’s and 90’s “dead on our feet” because of One Size Fits All
philosophy
    <ul>
      <li>Now better because we don’t believe that any more</li>
    </ul>
  </li>
</ul>

<h4 id="lecture">Lecture</h4>

<ul>
  <li>Relational vs non-relational</li>
  <li>Relational: define relations strictly, with column names. E.g. <em>all</em>
employees have id, name, salary</li>
  <li>
    <p>Non-relational: relations are not defined strictly, hierarchical,
arbitrarily nested</p>
  </li>
  <li>SQL vs NoSQL</li>
  <li>SQL: supposed to be super simple (it isn’t now), databases that can be
queried with the SQL language. SQL defines and manipulates data</li>
  <li>NoSQL: document based, key-value pairs, graph DBs, no schema</li>
</ul>

<h3 id="2-sorting-hashing-single-table-queries">2: Sorting, Hashing, Single-table queries</h3>

<h4 id="cs186-lectures-2015-01-22-2015-01-27">CS186 Lectures (2015-01-22, 2015-01-27)</h4>

<ul>
  <li>
    <p>Slides and stuff:
https://sites.google.com/site/cs186spring2015/home/schedule-and-notes</p>
  </li>
  <li>Why sort? Data locality, eliminate duplicates, ordering results</li>
  <li>Fundamental: sort-merge join algorithm (rendezvous)</li>
  <li>Fundamental: First step in bulk loading tree indices (ordering)</li>
  <li>Problem: how to sort 100GB data with 1GB RAM? Can’t just allocate
100GB of virtual memory :|</li>
  <li>
    <p>Must be intelligent about accessing data on disk</p>
  </li>
  <li>Constraint: data stored on disk. Can only read/write; no pointer
derefs and shit</li>
  <li>Stuff on magnetic disk is cheap but slow</li>
  <li>Focus on memory hierarchy at the level of RAM vs. disk as our order of
magnitude</li>
  <li>Disk access: 2-4ms seek time, 2-4ms rotate delay, transfer fast</li>
  <li>Arranging pages by disk: try to put blocks on same track, followed by
same cylinder, followed by adjacent cylinder
    <ul>
      <li>For a seq scan, you can pre-fetch stuff!</li>
      <li>minimize seek/rotation delay</li>
    </ul>
  </li>
  <li>
    <p>SSD are faster, but uh still way slower than RAM</p>
  </li>
  <li>Storage trends: data isn’t that big! Choose wisely, you probably don’t
need something super heavy
    <ul>
      <li>All weather: 20GB, English Wikipedia: 14GB, US Census: 200GB</li>
    </ul>
  </li>
  <li>Data is important :)</li>
  <li>
    <p>Bottom line: large DBs are still around and they all use disk. Smaller
DBs can definitely use SSD, many fit in RAM now! Change on the
hardware storage tech side, and uncertainty on the software side - where
to put stuff? That’s the current debate</p>
  </li>
  <li>Algo: map over records, write out result. Want to minimize RAM. Simple
approach is to read from input buffer, write to output buffer, and
then you can minimize how much you actually read/write which blocks in
your algo</li>
  <li>
    <p>Double buffering even better, uses two threads to do I/O. If main
thread is ready for new buffer, switch! While one thread is doing
background I/O, another is in use. Okay</p>
  </li>
  <li>Spec of sorting and hashing</li>
  <li>Given:
    <ul>
      <li>File f containing r records and taking up N storage blocks</li>
      <li>Two disks with » N blocks of storage</li>
      <li>Fixed amount of RAM space (== B disk blocks)</li>
    </ul>
  </li>
  <li>Sort: procude output file with contents sorted according to criterion</li>
  <li>
    <p>Hash: produce output file with contents arranged so that no 2 records
that are equal are separated by a greater or smaller record (i.e.
matching records always stored consecutively)</p>
  </li>
  <li>Sorting!</li>
  <li>Conquer and merge :) like the second part of merge sort. Take one page
at a time and sort on first pass, then two pages on second pass, etc.
    <ul>
      <li>nlogn</li>
    </ul>
  </li>
  <li>Better: general external merge sort. Use all input buffers in your RAM
instead of just one at a time to start off with
    <ul>
      <li>log(base of b - 1) (n/b)</li>
      <li>Just do each pass in parallel with all of your available buffer
pages</li>
      <li>Most of the time, takes two passes. Can sort, like, 8 at a time
rather than 2 at a time always. Got it</li>
    </ul>
  </li>
  <li>Heapsort: use two heaps, w/e w/e</li>
  <li>
    <p>Okay this is all very good and such</p>
  </li>
  <li>Hashing sometimes better than sorting because we don’t need order,
just need to remove duplicates and/or form groups</li>
  <li>Streaming partition, use a hash function (i.e. modulo) to stream
records to the appropriate disk partition. Divides things up
    <ul>
      <li>Each partition is N / B records large. Each partition should be no
more than B pages in size</li>
    </ul>
  </li>
  <li>Then conquer by reading each partition into RAM hash table one at a
time. Use a second hash function here with different granularity</li>
  <li>
    <p>Can hash large data sets by just recursing on your partitions to
generate new partitions before doing the conquering</p>
  </li>
  <li>I/O cost is same for hash and sort. Hash: random writes and sequential
reads. Sort: random reads and sequential writes</li>
  <li>How to parallelize: just add a new hashing function to the beginning,
higher granularity even than your partitioning function, this function
will assign the record to a machine to be processed at</li>
  <li>
    <p>Hard to carve up data equally! Maybe try taking a random sample at
first to get an idea of how data is distributed</p>
  </li>
  <li>These are just two ways of organizing data. Same memory requirement
and same I/O cost…</li>
  <li>Sorting good if data needs to be sorted anyways, or if input already
sorted (duh). Not sensitive to data skew</li>
  <li>Hashing eliminates duplication, scales better with # of different
values. Sometimes one-pass! E.g. if just sorting male-female</li>
  <li>
    <p>Hashing divide and conquer, sorting conquer and merge. Sorting
overkill for rendezvous most of the time. K</p>
  </li>
  <li>Single table queries. Can we just look at slides?</li>
  <li>Okay</li>
</ul>

<h4 id="lecture-1">Lecture</h4>

<ul>
  <li>
    <p>Why use a connection pool? To avoid overhead of establishing
connection</p>
  </li>
  <li>Oz’s life and death of a query</li>
  <li>Browser makes HTTP request</li>
  <li>DBMS gets SQL query over TCP at the connection manager. Pass off to
process manager, then the meaty relational query processor
    <ul>
      <li>Parse</li>
      <li>Rewrite: rewrite views, simplify algebra, etc. on the query plan</li>
      <li>Optimize: use stuff like pg_stats to make a better query plan</li>
      <li>Execute: based on relational iterators. Get data, stream data,
output, etc.</li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class iterator {
  void init(); // i.e. for sort, this pulls all of the data, sorts it to
  set up
  tuple next();
  void close();
  iterator &amp;inputs[];
  // additional state goes here
}
</code></pre></div></div>

<ul>
  <li>Anatomy of a query plan</li>
  <li>First row and anything following arrow is a relational operator</li>
</ul>

<p>Hash Join (cost=4.25..8.88 rows=33 width=28) (actual time=0.189..0.275 rows = 44 loops = 1)
// Hash Join is the operator, cost is in notional units. 4.25 is the
// time the first tuple is available, 8.88 is when the last record is
// available. Actual time is an actual unit
  Hash Cond: (individual.manager = manager.id)
  Filter: (individual.salary &gt; manager.salary)
  Rows removed by Join Filter: 56
  -&gt; Seq Scan on employee individual
  -&gt; Seq Scan on employee manager // ka chow</p>

<ul>
  <li>Vacuuming updates stats so you can get a clean, context-free slate for
analysis</li>
  <li>Composite indices: index on two different fields that are often
queried together
    <ul>
      <li>A criterion for combining indices: what’s the cardinality? Try to
narrow data more first. E.g. use salary index (wider range) before
age index</li>
    </ul>
  </li>
  <li>Implement executors</li>
  <li>“SELECT * FROM ciadocs WHERE title = __
    <ul>
      <li>Maybe title is input to function</li>
      <li>Additional iterator for *</li>
    </ul>
  </li>
</ul>

<h3 id="3-joins">3: Joins</h3>

<h4 id="cs186-lecture-2015-01-29">CS186 Lecture (2015-01-29)</h4>

<ul>
  <li>How to implement iterators?</li>
  <li>INIT, then NEXT, then CLOSE. Got it</li>
  <li>Okay cool</li>
</ul>

<h4 id="lecture-2">Lecture</h4>

<ul>
  <li>Cool, got most of it from the CS186 lecture</li>
  <li>Three main types: nested loop (+index), hash join, sort merge</li>
  <li>Nested loop does work with inequality predicates (&gt;, &lt;, &gt;=), the other
two types do not</li>
</ul>

<h3 id="4-indexes">4: Indexes</h3>

<h4 id="cs186-lecture-2015-02-10">CS186 Lecture (2015-02-10)</h4>

<ul>
  <li>How to implement indices?</li>
</ul>

<h4 id="lecture-3">Lecture</h4>

<ul>
  <li>Bit map index is translating two sets (doing a join, for example)
into a binary representation so you can use bitwise operators to
quickly find properties of your data</li>
</ul>

<h3 id="5-relational-algebra">5: Relational Algebra</h3>

<h4 id="cs186-lecture-2015-02-12">CS186 Lecture (2015-02-12)</h4>

<ul>
  <li>How to implement indices?</li>
</ul>

<h4 id="lecture-4">Lecture</h4>

<ul>
  <li>Relational: relational schemas and relational instances</li>
  <li>Table is a relational instance</li>
  <li>Worthwhile because of high analysis, ability to create primitives</li>
</ul>

<h3 id="6-query-optimization">6: Query Optimization</h3>

<h4 id="cs186-lecture-2015-03-12-2015-03-17">CS186 Lecture (2015-03-12, 2015-03-17)</h4>

<ul>
  <li>How to optimize queries? Let’s see</li>
</ul>

<h3 id="7-transactions-and-concurrency">7: Transactions and Concurrency</h3>

<h4 id="cs186-lecture-2015-04-07-2015-04-10">CS186 Lecture (2015-04-07, 2015-04-10)</h4>

<ul>
  <li>See slides</li>
</ul>

<h4 id="lecture-5">Lecture</h4>

<ul>
  <li>
    <p>Transactions are in DBMS’s for business reasons, e.g. debit/credit at
the same time</p>
  </li>
  <li>A: All or nothing steps</li>
  <li>C: abort on constraint (e.g. uniqueness) violation</li>
  <li>I: illusion of you being the only DB user</li>
  <li>
    <p>D: after transaction commits, it’ll be there forever</p>
  </li>
  <li>
    <p>Two phases of 2PL: acquiring is the first phase, releasing is the
second phase</p>
  </li>
  <li><em>Database object</em>: anything the database engine operates on. Page,
row, table, collection of tables, wawawa</li>
  <li>
    <p>Lock manager in DBMS picks which unit of database object to acquire
locks over</p>
  </li>
  <li>
    <p>Deadlock detection beats avoidance and stuff for practicality reasons</p>
  </li>
  <li>Why maintain a write-ahead log? You need to write it to disk which is
an added cost</li>
  <li>Cost of writing to log is cheaper - in better storage, or kept in a
memory buffer</li>
</ul>

<h3 id="8-distributed-databases">8: Distributed Databases</h3>

<h4 id="red-book-ch-6-intro">Red Book Ch 6 Intro</h4>

<ul>
  <li>In theory, serializable transactions are all you need</li>
  <li>In practice, DBMS’s have weak, non-serializable concurrency control
    <ul>
      <li>Why?</li>
      <li>It’s expensive</li>
      <li>Decrease throughput, increase latency, not good</li>
      <li>Anywhere from threefold to order of magnitude performance penalty</li>
      <li>Race to the bottom in competitive market</li>
    </ul>
  </li>
  <li>Alternative: <em>weak isolation</em>
    <ul>
      <li>Can do weird “anomalies” like reading intermediate data from another
transaction, reading aborted data, etc.</li>
      <li>Obviously you want to reason about and make tradeoffs here.
Invariants in serializable execution change around when you loosen</li>
      <li>Hard to specify :/ and difficult to use</li>
      <li>How is this better than “no isolation”? Seems dummy hard to reason
about</li>
      <li>In practice, few apps experience super high concurrency /shrug</li>
      <li>New research is focused on trying to preserev semantics and improve
programmability without giving up serializability</li>
    </ul>
  </li>
</ul>

<h4 id="dynamo-paper">Dynamo paper</h4>

<h5 id="background">Background</h5>

<ul>
  <li>Tradeoff here: more availability, less consistency</li>
  <li>Specific business case for Amazon: downtime (unavailable) = lost money,
double-purchase (inconsistent) = fine, we can resolve this</li>
  <li>Presumption that at Amazon’s scale, there’s always a node in the
network that’s down</li>
  <li>RDBMS has a lot of overhead with complex querying and management. Hard
to scale, choose consistency over availability, shard</li>
  <li>By constrast, Dynamo is highly available, efficient, scales simply
    <ul>
      <li>Runs on own instances</li>
    </ul>
  </li>
  <li>Properties</li>
  <li>Query model: key-value, identify everything by unique key. Can’t get
multiple items, no need for relational schema. Store &lt; 1 MB each
object</li>
  <li>From ACID: Trade less C for more A, no isolation guarantee</li>
  <li>
    <p>Paper doesn’t go much into security, that’s handled by others I guess</p>
  </li>
  <li>SLA</li>
  <li>Optimize for 99.9th percentile. Want <em>all</em> customers to have a good
time</li>
  <li>
    <p>Dynamo: give services control over durability and consistency, let
services make tradeoffs b/t functionality, performance,
cost-effectiveness. Wtf this is hand-wavy and I don’t get it</p>
  </li>
  <li>Design considerations</li>
  <li><em>When to resolve update conflicts</em>? Dynamo tries to be <em>always writeable</em>,
so conflicts are resolved at read time. This is a business-application
decision. Different from other DBMS’s</li>
  <li><em>Who does conflict resolution</em>, data store or application? Data store
only has simple mechanisms, let app developer do fancier stuff because
they know more</li>
  <li><em>Incremental scalability</em>: scale out without impact on the system</li>
  <li><em>Symmetry</em>: No one host is more important than others</li>
  <li><em>Decentralization</em>: P2P better than having a “main” host, SPOF</li>
  <li><em>Heterogeneity</em>: work distribution should be proportional to
capabilities of each server :)</li>
</ul>

<h5 id="related-work">Related Work</h5>

<ul>
  <li>There’s previous p2p work but it doesn’t line up with Dynamo design
considerations - makes other assumptions</li>
  <li>Same with distributed filesystems and databases
    <ul>
      <li>They use block stores, but key-value is better because objects are
smaller and easier to configure on a per-application basis</li>
      <li>Also, don’t reject updates because of network partitions :)</li>
    </ul>
  </li>
  <li>Basically a bunch of comparisons</li>
  <li>Dynamo:
    <ul>
      <li>Always writeable</li>
      <li>In a trusted network</li>
      <li>No need for hierarchical namespaces (flat structure) or relational
schema. Ask pls</li>
      <li>Latency sensitive!</li>
    </ul>
  </li>
</ul>

<h5 id="system-architecture">System Architecture</h5>

<ul>
  <li>Core distributed systems techniques in Dynamo: <em>partitioning,
replication, versioning, membership, failure handling, scaling</em></li>
  <li>Partitioning</li>
  <li>Damn, annotate the PDF for the rest of this</li>
</ul>

<h4 id="lecture-6">Lecture</h4>

<ul>
  <li>NoSQL: trade off transactions/serializability for availability</li>
  <li>Again, it’s all about your context :)</li>
  <li>Q: What about that pk access pattern?</li>
</ul>

<h3 id="9-big-data">9: Big Data</h3>

<h4 id="lecture-7">Lecture</h4>

<ul>
  <li>Google File System
    <ul>
      <li>Problem: need to store the web on commodity hardware because we’re
broke</li>
    </ul>
  </li>
  <li>Large files, each containing many web pages, replicated</li>
  <li>Keep appending, read sequentially, k</li>
  <li>GFS foundation for Hadoop filesystem</li>
  <li>Run on many machines, make data smaller, do stuff to it
    <ul>
      <li>Map and Reduce</li>
      <li>Scan all your disks, Map function emits tuple if you match something</li>
      <li>Reduce to other stuff, then Map, then Reduce</li>
    </ul>
  </li>
  <li>Hive next, allowed for declarative query processing, which allows for
better attempts at optimization
    <ul>
      <li>Easier for business analysts to use than just thinking about
MapReduce</li>
    </ul>
  </li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2017/03/26/bradfield-databases/</guid>
                <description>
                    
                    Lecture notes from Bradfield's databases class
                    
                </description>
                <pubDate>Sun, 26 Mar 2017 00:00:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Computer Architecture and the Hardware/Software Interface</title>
                <link>http://tigerthinks.com/2017/03/26/bradfield-architecture/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<p>Everything is bits!!</p>

<h3 id="1-the-big-picture">1: The Big Picture</h3>

<p>concepts that map to one instruction fall on the “hardware” side of the
hardware/software boundary
arithmetic: signed/unsigned additon, subtraction, multiplication,
division
bitwize operations: and, or, xor etc
read/write (load/store) of register values (words) to/from main memory
cpu makers continue to add new low level instructions to their hardware:
<!--https://en.wikipedia.org/wiki/Bit_Manipulation_Instruction_Sets#BMI2_.28Bit_Manipulation_Instruction_Set_2.29-->
concepts that decompose into many carefully arranged instructions fall
on the “software” side
objects, arrays, methods, subroutines, functions</p>

<p>Jon Carmack has a good heuristic for how much stuff a CPU supports doing
natively hardware: how long would it take you to write an emulator for
it in software? Another good heuristic is to weigh the size of the
manuals :)</p>

<p>binary encoding</p>

<p>the contents of registers, main memory, files (and the disk in general)
is always bit patterns. or put another way: nothing isn’t a bit pattern
the bit patterns only “mean” something in some context
a good example here is that output byte stream of the shell is hooked up
to the terminal, which is always interpreting bytes as teleprinter
instructions
so if some program is not generating binary data that corresponds to
values in the ascii table, and you feed that programs output to a
terminal (which is expecting bytes that do) you will get nonsense
(question marks, blanks, maybe the bell will ring)</p>

<p>the nybble to bit pattern table</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>----  : 0       0000 = 00
---+  : 1       0001 = 01
--+-  : 2       0010 = 02
--++  : 3       0011 = 03
-+--  : 4       0100 = 04
-+-+  : 5       0101 = 05
-++-  : 6       0110 = 06
-+++  : 7       0111 = 07
+---  : 8       1000 = 08
+--+  : 9       1001 = 09
+-+-  : a       1010 = 10
+-++  : b       1011 = 11
++--  : c       1100 = 12
++-+  : d       1101 = 13
+++-  : e       1110 = 14
++++  : f       1111 = 15
</code></pre></div></div>

<p>some programs related to last night’s exercises</p>

<p>plain linear bitdump. we’re basically asking for no formatting, just the
raw bitstream</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ruby -e '
  puts(            # print argument bytes to stdout, followed by newline
byte
   ARGF            # file/stdin stream
    .read          # byte contents of stream (as ruby string type)
    .unpack("B*")  # convert bytes of string to binary string
representations
  )
  ' &lt;&lt;&lt; 'hello world' # feed ascii bytes for hello world (plus newline)
as input on stdin
011010000110010101101100011011000110111100100000011101110110111101110010011011000110010000001010
</code></pre></div></div>

<p>obviously that’s very hard for our wetware to interpret which is why we
hexdump</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cat &gt; hexdump.rb &lt;&lt;&lt;'                 # save string in single quotes
to hexdump.rb
  ARGF.each_byte
    .map{|b|b.to_s(16).rjust(2,"0")}    # byte as hex digits
    .each.with_index                    # include indexes
    .each_slice(4)                      # groups of 4
    .each{|s| send :puts,               # print line with:
      s[0][1].to_s.rjust(6) +           #  first byte index, padded
      "  " +                            #  two spaces
      s.map{|b,_|b}.join(" ")           #  bytes, joined with spaces
    }
  ' &amp;&amp; ruby hexdump.rb &lt;&lt;&lt; 'hello world'
     0  68 65 6c 6c               &lt;- bytes at index zero
     4  6f 20 77 6f               &lt;- bytes starting at index 4
     8  72 6c 64 0a               &lt;- bytes starting at index 8
</code></pre></div></div>

<p>and while we’re trying to memorize those nybble to bit pattern
correspondences it’s useful to bitdump</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cat &gt; bitdump.rb &lt;&lt;&lt;
  ARGF.each_byte
    .map{|b|
      b.to_s(2).rjust(8,"0")          # eight ones and zeros
       .gsub("1","+").gsub("0","-")   # convert to +/-
    }
    .each.with_index                  # indexes
    .each_slice(4)                    # groups of 4
    .each{|s| send :puts,             # print line with
      s[0][1].to_s.rjust(6) +         #  byte index
      "  " +                          #  two spaces
      s.map{|b,_|b}.join(" ")         #  bytes separated with spaces
    }
 &amp;&amp; ruby bitdump.rb x
     0  -++-+--- -++--+-+ -++-++-- -++-++--
     4  -++-++++ --+----- -+++-+++ -++-++++
     8  -+++--+- -++-++-- -++--+-- ----+-+-
</code></pre></div></div>

<p>hexload is useful for feeding raw bytes that don’t correspond to any
keys on the keyboard straight into the terminal</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cat &gt; hexload.rb &lt;&lt;&lt; 
print ARGF.read         # read contents of input file to string
  .split(/\s/)          # split on whitespace
  .map{|s|s.to_i(16)}   # convert from hex strings to ints
  .pack("C\*")           # convert int array into ascii string

$ ruby hexload.rb &lt;&lt;&lt; '68 65 6c 6c 6f 20 77 6f 72 6c 64 0a'
hello world
</code></pre></div></div>

<p>remember, you can get to the ascii table with man ascii</p>

<p>test your twos-compliment conversion skills online:
http://www.free-test-online.com/binary/two_complement.htm</p>

<p>endianess
remember “LLL” (triple L):
IF the byte with the (L)owest index (i.e. the “(L)eftmost”)
is the (L)east significant byte
THEN the byte order is (L)ittle endian
otherwise it must be big endian</p>

<p>you can’t tell endianness by looking at just the bytes, someone has to
say “these 4 bytes 50 d6 12 00 encode the number 1234512 and then you
can say “oh it’s little endian”</p>

<h3 id="2-overview-of-c-jk">2: Overview of C (jk)</h3>

<ul>
  <li>Bit fields are sets of bits where each position means something
    <ul>
      <li>Why would you condense stuff into bit fields? Because <em>MEMORY ACCESS
IS THE MOST EXPENSIVE THING A CPU CAN DO</em> and you’d reduce how often
this happens</li>
    </ul>
  </li>
  <li>6 bitwise ops
    <ul>
      <li>XOR NOT AND OR SLL (shift left logical) SRL (shift right logical)</li>
    </ul>
  </li>
  <li>Floats are crazy
    <ul>
      <li>Bit field with 1 sign bit, a set of exponent bits, and an unsigned
part</li>
      <li>Arithmetic gets crazy since floats are crazy</li>
      <li>Implemented by multiplying the unsigned by the exponent (which is
two’s complement so can be negative) and then applying the sign bit</li>
      <li>Better to use decimals that don’t repeat by default instead of
floats by default</li>
    </ul>
  </li>
  <li>Unicode! Because ASCII always had a leading 0 and didn’t have enough
space for all the characters (only 255)
    <ul>
      <li>Good thing they did is assign every character (not just English
letters) a code. UNICODE IS A CHARACTER SET UTF-8 IS A SET OF BYTE
ENCODINGS FOR THOSE CHARACTERS</li>
      <li>Bad thing they did is come up with a new 2 byte encoding.. 2 bytes =
64,000 possibilities. Not enough!</li>
      <li>Still use Unicode mapping of characters to numbers, but for byte
encoding we use UTF-8</li>
      <li>UTF-8 pattern: if starts with 110, then follows ONE AND ONLY ONE
byte that MUST start with 10. If starts with 1110, then two bytes
follow that start with 10</li>
    </ul>
  </li>
  <li>To print out a binary file: use <code class="language-plaintext highlighter-rouge">strings a.out</code></li>
  <li><code class="language-plaintext highlighter-rouge">xxd</code> hexdumps a file
    <ul>
      <li>“magic number” at the beginning of every binary file signifies the
file/encoding type</li>
      <li>Bunch of shit at the top of the file, meant for the kernel. Mach-O
headers, then load commands (instructions for kernel to prep for the
program)</li>
    </ul>
  </li>
</ul>

<h3 id="3-mips">3: MIPS</h3>

<ul>
  <li>Stored programs are <em>separate</em> from the memory. Not in use rn rly,
most stuff is loaded from disk into memory</li>
  <li>When your program runs the OS allocates space for ya</li>
  <li>CPU and OS collaborate on how to organize memory</li>
  <li>Segments of memory
    <ul>
      <li>Stack: contains stuff like function calls, local variables, etc.</li>
      <li>Text (contains the contents of the running program. Most OS’s don’t
let you write here)</li>
      <li>Data (global constant, declare data)</li>
      <li>Kernel (stuff that the program/OS can interact with close to metal)</li>
      <li>I/O: constant</li>
      <li>Heap: Grows as you ask the OS for more memory. How big is you heap?
As big as you’ve asked for as your program is running
        <ul>
          <li>Heap grows down</li>
          <li><code class="language-plaintext highlighter-rouge">malloc</code> adds heap memory, <code class="language-plaintext highlighter-rouge">free</code> removes heap memory</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Jumps are short (relative bytes) or long (specific address)</li>
  <li>Special pointers
    <ul>
      <li>Stack pointer is end of stack (stack grows up)</li>
      <li>Instruction pointer is next instruction (usually in text but can go
to heap)</li>
      <li>Global pointer before data segment</li>
      <li>Heap pointer pointer to next spot you can add more heap to</li>
    </ul>
  </li>
  <li>MIPS is big endian</li>
  <li>Instruction set
    <ul>
      <li>add/sub/div</li>
      <li>jump</li>
      <li>load/store</li>
      <li>and/or/shift</li>
    </ul>
  </li>
  <li>You can copy by adding to 0b00000000
    <ul>
      <li>In MIPS r0 is 0</li>
    </ul>
  </li>
  <li>RISC vs CISC: reduced vs complex instruction sets</li>
  <li>MIPS command
    <ul>
      <li>First 5 bits is the op code (only 32 ops!)</li>
      <li>Register command, immediate command, jump command have different stuff
following op code</li>
    </ul>
  </li>
</ul>

<h4 id="berkeley-lecture-videos">Berkeley Lecture Videos</h4>

<ul>
  <li>https://www.youtube.com/watch?v=zUYCZYKaUrk</li>
  <li><em>Instructions</em> are primtive ops CPU may execute</li>
  <li>Early on, adding more instructions to instruction set. Helps with
vendor lock-in
    <ul>
      <li>Led to RISC to address bloated CPUs; keep instruction set small and
make it fast</li>
      <li>Leave it up to software to do complicated ops</li>
      <li>MIPS is the company that built a commercial RISC architecture</li>
    </ul>
  </li>
  <li>“Variables” in assembly are registers
    <ul>
      <li>Supah fast (&lt; 1ns access)</li>
    </ul>
  </li>
  <li>32 registers because of goldilocks cool
    <ul>
      <li>Each 32-bit register is a <em>word</em></li>
      <li>Each register got a name, use names!</li>
    </ul>
  </li>
  <li><em>Immediates</em> are numerical constants :) 1, 20, 30, 1512, etc.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">addi</code> to add immediate</li>
      <li>$zero gets its own register</li>
    </ul>
  </li>
  <li>Overflows yikes
    <ul>
      <li>addu, subu, etc. do not detect overflow</li>
      <li>add, addi, sub, subi, etc. do detect overflow</li>
    </ul>
  </li>
  <li>Store extra data in memory
    <ul>
      <li>Memory addresses are in bytes</li>
      <li>Always fetch a whole word from memory (lw is load word)</li>
      <li>Before parens is the offset; in an array, <code class="language-plaintext highlighter-rouge">lw $t0, 12($s3)</code> gets
index 3 (12 is 4 * 3 which offsets you by 3 indices)</li>
    </ul>
  </li>
  <li>lb “sign-extends” a byte by putting the index 7 bit in the rest ofthe
empty space. lbu does not sign-extend</li>
  <li>Registers are 100-500 times faster than memory</li>
  <li>Shift right arithmetic (sra) preserves sign to be shifted (fills in 1s
to the left side)</li>
  <li>Branching for conditionals in MIPS: <code class="language-plaintext highlighter-rouge">beq register1, register2, label</code>
    <ul>
      <li>Unconditional branch is a jump (<code class="language-plaintext highlighter-rouge">j</code>)</li>
    </ul>
  </li>
  <li>Computer words are instructions, vocabulary is instruction set</li>
  <li>Assembly code is assembled into object files, which are “linked” to
machine code executable files</li>
  <li>VMM (virtual memory manager) built into CPU for managing virtual
memory space efficiently</li>
  <li>To branch on equality, use bne and go to Exit label if u dead</li>
  <li>slt reg1, reg2, reg3
    <ul>
      <li>Set Less Than</li>
      <li>reg2 &lt; reg3 ? reg1 = 1 : reg1 = 0</li>
      <li>slti uses immediate</li>
    </ul>
  </li>
  <li>Fundamental steps in calling a function
    <ul>
      <li>These all happen in high level programs but we don’t think about
them as much</li>
      <li>Put paramteres where function can access them</li>
      <li>Transfer control to function</li>
      <li>Acquire resources needed for function</li>
      <li>Perform task of function</li>
      <li>Put result somewhere calling code can find it, restore stack
registers</li>
      <li>Return control to point of origin (jump back)</li>
    </ul>
  </li>
  <li>In MIPS:
    <ul>
      <li>$a* registers are for arguments</li>
      <li>$v* registers are for value registers to return</li>
      <li>$ra is return address to hop back to</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">jal</code> is to jump and link!</li>
  <li>So, caller puts params in registers $a0-$a3 then uses jal X to invoke
X
    <ul>
      <li>jal puts the <em>address of the next instruction</em> into $ra</li>
    </ul>
  </li>
  <li>To save old register values after function call ($s* registers), you
gotta save those somewhere and restore after
    <ul>
      <li>Use a stack!</li>
      <li>Grow from high to low address; so push decrements $sp (stack
pointer), pop increments it</li>
      <li>MIPS only tells you to save $s0 to $s7
        <ul>
          <li>use sw to store stuff in the stack before your function, then lw
to bring them back after</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="4-compiling-linking-assembling-loading">4: Compiling, Linking, Assembling, Loading</h3>

<h4 id="pre-work">Pre-work</h4>

<ul>
  <li>https://www.youtube.com/watch?v=Z4r9AWu8D18</li>
  <li>Translate vs. interpret
    <ul>
      <li>High-level languages are interpreted, which means they are executed
by another program</li>
      <li>Low level languages are translated into an intermediate step</li>
      <li>Interpreting 10-100x slower</li>
    </ul>
  </li>
  <li>C is compiled :). Let’s compile foo.c
    <ul>
      <li>foo.c</li>
      <li>Through compiler</li>
      <li>Assembly program: foo.s</li>
      <li>Through assembler</li>
      <li>Object (mach lang module): foo.o</li>
      <li>Linker</li>
      <li>Executable (mach lang program): a.out</li>
      <li>Loader</li>
      <li>Come to memory papa</li>
    </ul>
  </li>
  <li>Compiler
    <ul>
      <li>Input is C code, output is assembly code</li>
      <li>Might produce pseudoinstructions like <code class="language-plaintext highlighter-rouge">move</code> (add 0 and copy)</li>
    </ul>
  </li>
  <li>Assembler
    <ul>
      <li>Input is assembly language</li>
      <li>Output is object code</li>
      <li>Reads and uses directives (.text, .data, .asciiz, etc.)</li>
      <li>Expand pseudoinstructions
        <ul>
          <li>E.g. no subu, so do addiu with negative value</li>
          <li>Multiplication: m x n = m + n bits product
            <ul>
              <li>Result goes into hi and lo; hi is the upper half, lo is the
lower half</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>Produce machine language
        <ul>
          <li>Wat do</li>
          <li>Simple case is just arithmetic, shifts, logic, etc. Easy</li>
          <li>Branches tough :( Relative to where your pc is
            <ul>
              <li>Where is the label you want to jump to? Solved by taking two
passes over the program, once to remember position and other
using those label positions to generate code</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>Object file
        <ul>
          <li>object file header: size and position of other stuff in file</li>
          <li>text segment: machine code</li>
          <li>data segment: binary static data</li>
          <li>relocation info: identifies lines of code to be fixed up (i.e.
include directive)</li>
          <li>symbol table: list of labels and static data references</li>
          <li>debugging info</li>
          <li>Standard format is ELF</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Linker
    <ul>
      <li>Combines a ton of .o files to make one a.out file</li>
      <li>Input is .o files</li>
      <li>Output is executable code</li>
      <li>Combines several files into a single executable
        <ul>
          <li>Enables separate compilation of stuff, so you can change and
recompile one file without doing the whole project</li>
        </ul>
      </li>
      <li>Takes the text/data/info from multiple o files and then sticks them
together interleaved with each other
        <ul>
          <li>Resolves references in files. Go thru Relocation Table, look at
each entry, and repace with absolute address
            <ul>
              <li>PC-relative address (beq, bne) never relocated</li>
              <li>Absolute Function address (j, jal), External Function reference
(jal), Static Data reference (lui, ori) always relocated</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>We assume the first word of first text segment is at 0x04000000
(stuff below is reserved)</li>
      <li>We know how long each text and data segment is, and how they are
ordered</li>
      <li>So we calculate the absolute address of each label and each piece of
data being referenced after concatting</li>
      <li>Resolve references:
        <ul>
          <li>Search for reference in symbol tables</li>
          <li>if not there, search lib files</li>
          <li>Finally, fill in correct machine code</li>
        </ul>
      </li>
      <li>Final output is machine executable file with header</li>
    </ul>
  </li>
  <li>Loader
    <ul>
      <li>Takes executable code and runs it</li>
      <li>Executable code is on disk, loader needs to load into memory and run</li>
      <li>Read header to see how big file is</li>
      <li>Assign amount of memory for each piece - text, data, stack</li>
      <li>Copies instruction and data into address space</li>
      <li>Copies arguments onto stack</li>
      <li>Initializes machine registers to be usado</li>
      <li>Jumps to start-up routine that copies program’s arguments from stack
to registers and sets the program counter</li>
    </ul>
  </li>
  <li>This naive approach is statically-linked. We bring in the entire
    <stdio> library even if not all is used
</stdio>
    <ul>
      <li>Alternative is dynamically linking, which is common oon UNIX and
stuff</li>
    </ul>
  </li>
</ul>

<h4 id="building-mach-o-executable">Building Mach O executable</h4>

<ul>
  <li>https://www.mikeash.com/pyblog/friday-qa-2012-11-30-lets-build-a-mach-o-executable.html</li>
  <li>PAGEZERO load command blocks off lower 4GB of memory space, so that
dereferencing NULL pointers causes a segmentation fault
    <ul>
      <li>What means? This is the __PAGEZERO segment, which predefines the
entire lower 4GB of the 64-bit virtual memory space as inaccessible.
Because of this segment, which is marked unreadable, unwriteable, and
nonexecutable, dereferencing NULL pointers causes an immediate
segmentation fault.</li>
    </ul>
  </li>
  <li>Load Commands - it’s kind of a table of contents, that describes
position of segments, symbol table, dynamic symbol table etc. Each
load command includes a meta-information, such as type of command, its
name, position in a binary and so on.</li>
</ul>

<h4 id="lecture">Lecture</h4>

<ul>
  <li>Compiling a C file goes a long ways…
    <ul>
      <li><code class="language-plaintext highlighter-rouge">cc</code> is just a frontend for clang and ld (linker)</li>
    </ul>
  </li>
  <li>See compiling_step_by_step.sh for deets</li>
</ul>

<h3 id="5-the-processor-clock-and-datapath">5: The Processor, Clock, and Datapath</h3>

<h4 id="prework-video">Prework video</h4>

<ul>
  <li>https://www.youtube.com/watch?v=OOBwKAXZjlk</li>
  <li>Don’t need much to run software in hardware!</li>
  <li>Take physical device and run programs on it? How?</li>
  <li>Let’s do adder/subtractor</li>
  <li>Start with truth table, minimize and implement as we’ve seen before
    <ul>
      <li>Solve the subproblem! Add 1 bit before thinking about 32 bit</li>
    </ul>
  </li>
  <li>Ok so let’s think about instructions for adding 1 bit 3 times
    <ul>
      <li>Sum of three bits is XOR(a, b, c) (with three inputs, odd number of
1s is a 1, even number of 1s is a 0)</li>
      <li>The carry is MAJ(a, b, c) which is a&amp;b + a&amp;c + b&amp;c (the sum of
these)</li>
    </ul>
  </li>
  <li>N 1-bit adders =&gt; 1 N-bit adder</li>
  <li>But you need to worry about overflow
    <ul>
      <li>If last carry bit is 1, you have overflow</li>
    </ul>
  </li>
  <li>To do subtractor, take first number and add to negative of second
number
    <ul>
      <li>Negative done by two’s complement</li>
      <li>Add another bit input to adder to designate whether second input
should be flipped</li>
      <li>AN XOR SERVES AS A CONDITIONAL INVERTER CAUSE YOU CAN INVERT EACH
BIT</li>
      <li>THEN TAKE THE SUM AND SUBTRACT ONE AND YOU’RE GUCCI</li>
    </ul>
  </li>
  <li>Components</li>
  <li>Processor has a control and a datapath
    <ul>
      <li>Control tells datapath what to do (what registers to read, which
operation to perform)</li>
      <li>Datapath includes PC, Registers, ALU</li>
    </ul>
  </li>
  <li>Processor connects to memory</li>
  <li>Memory connects to I/O</li>
  <li>So there’s two boundaries: processor-memory interface and memory-I/O
interface</li>
  <li>CPU
    <ul>
      <li>Processor is the CPU, active part of the computer that does the work
        <ul>
          <li>Datapath contains hardware to perform operations</li>
          <li>Control: tells the datapath what needs to be done (brains)</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>How to execute instruction?
    <ul>
      <li>Fetch: fetch the 32-bit instruction word from memory, returns them in the
control unit, and then increment program counter</li>
      <li>Decode: look at 32-bit instruction and figure out what it means.
        <ul>
          <li>First thing is obviously the opcode.</li>
          <li>Then, read data from necessary registers (2 for add, 0 for jump)</li>
        </ul>
      </li>
      <li>ALU: do work like arithmetic, shift, logic. Also needs to be done
for lw and sw to add the offset to the address</li>
      <li>Memory access: only loads and stores do stuff here. Should be fast
        <ul>
          <li>To store, need to read a) base address, b) data value to store, c)
immediate offset</li>
        </ul>
      </li>
      <li>Register write: write result back to register
        <ul>
          <li>For store instruction that writes to memory, work has been done in
last stage</li>
        </ul>
      </li>
      <li>Many instructions don’t use all stages!</li>
    </ul>
  </li>
  <li>Lecturer walks through these steps, makes sense</li>
  <li>Immediate values come out of instruction memory</li>
  <li>Not all instructions use all stages, but for MIPS at least it’s the
union of all the operations needed by all instructions
    <ul>
      <li>Load instruction uses all 5 :)</li>
    </ul>
  </li>
  <li>Datapath and control bois
    <ul>
      <li>Datapath-&gt;control feedback is from instruction memory</li>
      <li>Controller makes sure right things happen at right time, can hook
into all parts of datapath</li>
    </ul>
  </li>
  <li>Processor design
    <ul>
      <li>Analyze instruction set to determine datapath requirements. Must
support everything!</li>
      <li>Select set of datapath components and establish clocking. Things
happen on the rising edge</li>
      <li>Assemble datapath components</li>
      <li>Analyze implementation of instructions and set up control points</li>
      <li>Assemble control logic (formulate equations, design circuits)</li>
    </ul>
  </li>
  <li>3 types of MIPS instructions
    <ul>
      <li>R type has op, register s, register t, register destination, shamt (shift
amount), funct
(add, subtract, etc.)</li>
      <li>I type has op, register source, register taret, immediate</li>
      <li>J type has op code then target address</li>
    </ul>
  </li>
  <li>Register Transfer Langauge is a way of writing down what happens
during execution of each instruction
    <ul>
      <li>Pseudocode ish. For ADDU instruction, RTL is like this: R[rd] &lt;–
R[rs] + R[rt]; PC &lt;– PC + 4</li>
      <li>All instructions start by fetching instruction itself</li>
    </ul>
  </li>
  <li>Requirements of instruction set for our MIPS light: stuff like MEM,
Registers, PC, sign extender, ALU, PC incrementer, etc.</li>
  <li>So now for our components. Need combinatorial elements (don’t respond
to clock) and storage/sequential elements (respond to clock)</li>
  <li>Describes his class’s architecture cool</li>
  <li>Clock stuff
    <ul>
      <li>“Critical path” (longest path through logic) determines the length
of the clock period</li>
      <li>Art of hardware design is moving clock edges closer together,
shortening critical path</li>
    </ul>
  </li>
  <li>State machine that reads the instruction, updates state, then awaits
next instruction. Cool</li>
</ul>

<h4 id="lecture-1">Lecture</h4>

<ul>
  <li>Hertz is number of switches per second</li>
  <li>Clock cycle
    <ul>
      <li>Starts with rising edge with high current, then it has a down edge
with lower current, then back to rising edge, ez</li>
    </ul>
  </li>
  <li>To get faster, reduce critical path speed OR add flip flops/registers
in the middle to save work</li>
  <li>All digital systems with time:
    <ul>
      <li>Current state sent from stateful part to combinatorial logic along
with static inputs</li>
      <li>Combinatorial logic does work and emits outputs, and next state is
sent to the clocked chip</li>
      <li>“Next state” from previous step is the state passed in during the
next clock cycle</li>
    </ul>
  </li>
  <li>C Pro Tip
    <ul>
      <li>Read <code class="language-plaintext highlighter-rouge">char *argv[]</code>. WHEN you invoke *argv, you get the other part
of the expression, which is <code class="language-plaintext highlighter-rouge">char[]</code></li>
    </ul>
  </li>
</ul>

<h3 id="6-using-logic-gates-to-build-logic-gates">6: Using Logic Gates to Build Logic Gates</h3>

<h4 id="prework-video-1">Prework video</h4>

<ul>
  <li>https://www.youtube.com/watch?v=SstCrz0xUzw</li>
  <li>Why study hardware even if you don’t work on hardware? Want to
understand capabilities and limitations so you can utilize hardware
effectively</li>
  <li>Basics of a computer system is a <em>synchronous digital system</em>
    <ul>
      <li>Synchronous: all operations coordinated by central clock</li>
      <li>Digital: all values are discrete value (analog = voltage, etc.)
        <ul>
          <li>Binary (0, 1). Electrical signals are 1 and 0 (high and low
voltage)</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Implement a circuit/switch
    <ul>
      <li>If you close a switch and complete a loop, then current flows and
lightbulb can be on</li>
      <li>Boolean logic based on Boole lol</li>
    </ul>
  </li>
  <li>Transistors used to represent high/low voltage (they’re the switches
in computers)
    <ul>
      <li>Remove noise by setting a midpoint voltage; above is 1, below is 0</li>
      <li>CMOS is ours: Complementary Metal Oxide on Semiconductor</li>
    </ul>
  </li>
  <li>n-type transistor is open when no voltage, closed when voltage. p-type
is opposite
    <ul>
      <li>Basically you can use complementary pairs to get strong signals</li>
    </ul>
  </li>
  <li>https://gyazo.com/2cc4aaf3f68f6495f7646d6200068cd7</li>
  <li>NAND!</li>
  <li>Some combinatorial logic symbols are standard zzz</li>
  <li>Truth tables describe the inputs and outputs of a circuit</li>
  <li>Simplifying boolean logic is an art form rofl</li>
  <li>Boolean Algebra
    <ul>
      <li>
        <ul>
          <li>for OR (logical sum)</li>
        </ul>
      </li>
      <li>dot for AND (logical product)</li>
      <li>Hat for NOT (complement/negation)</li>
    </ul>
  </li>
  <li>Bunch of laws of boolean algebra</li>
  <li>Signals and waveform stuff
    <ul>
      <li>Can look across separate wires to aggregate a signal</li>
    </ul>
  </li>
  <li>
    <p>Propagation delay is difference between changing input and changing
output</p>
  </li>
  <li>Synchronous digital systems help abstract time/delays
    <ul>
      <li>Come with two types of circuits</li>
      <li>Combinatorial logic: output is a pure function of the inputs,
doesn’t have history of execution</li>
      <li>Sequential logic: circuits that remember or store information
across time. Clocks synchronize systems!</li>
    </ul>
  </li>
  <li>Slides are helpful</li>
  <li>https://gyazo.com/738b402a3fef46496bdfd7c8acc3fed6</li>
</ul>

<h4 id="lecture-2">Lecture</h4>

<ul>
  <li>
    <p>Flip flop circuits are like camera shutters: open, snapshot, emit,
close, etc</p>
  </li>
  <li>CLOCKS ARE IMPORTANT. THEY MAKE EVERYTHING GO</li>
  <li>SIMD: Single Instruction Multiple Data
    <ul>
      <li>Can load 4 32-bit ints into a 128-bit register, then can do four
adds in parallel</li>
    </ul>
  </li>
  <li>
    <p>Think about flow of electricity to model voltage in circuits</p>
  </li>
  <li>How is NAND implemented in electric circuits?</li>
</ul>

<h3 id="7-pipelining">7: Pipelining</h3>

<h4 id="video">Video</h4>

<ul>
  <li>https://www.youtube.com/watch?v=oIawE3IseRA</li>
  <li>Single Cycle processor review
    <ul>
      <li>See “processor design” segment</li>
      <li>End up with cool datapath</li>
      <li>Performance: for every instruction, need to wait until worst case
time for worst instruction. Clock rate (cycles/second = Hz) =
1/period (seconds/cycle)</li>
    </ul>
  </li>
  <li>Pipeline increases clock rate over worst case performance
    <ul>
      <li>Increased clock rate means faster programs hopefully</li>
    </ul>
  </li>
  <li>Can overlap the stages of stuff to make it more efficient
    <ul>
      <li>Analogy is laundry (washer, dryer, folder, stasher). Sequentially
takes two hours, but if you do batches with pipelining you get more
efficient. After first load is washed, you load it into the dryer
and immediately add second load to washer</li>
    </ul>
  </li>
  <li>Pipelining does <em>not</em> help latency of single task, it helps
<em>throughput</em> of entire workload</li>
  <li><em>Multiple</em> tasks operating simultaneously using different resources</li>
  <li>Potential speedup = the number of pipe-able stages</li>
  <li>Time to “fill” pipeline and time to “drain” it reduces the speedup :)</li>
  <li>Pipeline limited by slowest pipeline stage (still better than being
limited by the slowest entire instruction, which you are without
pipelining)
    <ul>
      <li>Try to balance lengths of pipe stages</li>
    </ul>
  </li>
  <li>Apply pipeline to MIPS assembly
    <ul>
      <li>Just add registers between stages (fetch, decode, execute, memory,
write back)</li>
      <li>These registers hold information produced by previous cycle</li>
    </ul>
  </li>
  <li>Need to keep a copy of instruction bits and move them down the
pipeline so each piece knows exactly what to do with that instruction</li>
  <li>
    <p>Several ways to represent pipeline (graphical, etc)</p>
  </li>
  <li>Pipelining performance</li>
  <li>Best case is Time of single cycle / number of stages (equality is only
achieved if stages are balanced)</li>
  <li>Speedup reduced if not equally balanced</li>
  <li>Remember, pipelining increases throughput not latency</li>
  <li>
    <p>Pipelining increases instruction latency (must match longest
instruction latency), does not increase number of
components</p>
  </li>
  <li>Pipelining hazards precent starting the next instruction in next clock
cycle</li>
  <li>Structural hazard: required resource is busy (e.g. needed in multiple
stages)
    <ul>
      <li>e.g. Multiple registers need to be write/read simultaneously</li>
      <li>Easy-ish to solve</li>
      <li>Keep separate caches for instruction fetch and memory RW</li>
      <li>Split RegisterFile access in two: write during 1st half and read
during 2nd half of each clock cycle</li>
      <li>So, read and write to registers during same clock cycle is okay</li>
      <li>Can always be removed by adding hardware resources</li>
    </ul>
  </li>
  <li>Data hazard: data dependency between instructions, need to wait for
previous instruction to finish up
    <ul>
      <li>Data flow <em>backwards</em> is a hazard (e.g. an add happens in one
instruction, a bunch of subsequent instructions need to use the
value produced by that add</li>
      <li>Cool. Register forwarding: forward result as soon as it’s available,
even if it’s not stored in RegFile yet. Add a sneak path for
forwarding value from output of ALU to input of ALU without
writing/reading registers or memory</li>
      <li>What’s the datapath for forwarding?</li>
      <li>Add a forwarding unit that checks source registers, compares them to
registers written in earlier instructions, and if they match, then
you do the forwarding. E.g. if $t0 written in one add (destination),
then $t0 used in subsequent subtract (source), then mux in the new value</li>
      <li>Loads are tough, cause you need the memory value. Can’t forward,
need to wait until load value is actually available. Must stall
instruction dependent on load, and then forward</li>
      <li>Called <em>hardware interlock</em> when hardware stalls pipeline
        <ul>
          <li>Replace stalled instruction with “bubble”, which is a no-op</li>
        </ul>
      </li>
      <li>Slot after a load is a load delay slot, can’t use loaded value for
one slot.
        <ul>
          <li>Don’t try and use a value once cycle after load :) <code class="language-plaintext highlighter-rouge">nop</code> instead</li>
        </ul>
      </li>
      <li>MIPS doesn’t have interlocked pipelining stages :)
        <ul>
          <li>But adds back interlock because it’s smelly to nop everywhere</li>
        </ul>
      </li>
      <li>Compiler can help with hardware interlock by inserting unrelated
instruction into that space so you can take advantage of nop time
        <ul>
          <li>Can save stuff</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Control hazard: Flow of execution depends on previous instruction
(branch or jump)
    <ul>
      <li>Branch determines flow control</li>
      <li>Simple solution option 1: just stall on every branch instruction
until branch resolved
        <ul>
          <li>Adds 2 bubbles/cycles for each branch :( (20% of instructions).
Compare happens at ALU stage, so must wait till then</li>
        </ul>
      </li>
      <li>Optimize: insert special branc comparator after stage 2. Can only do
equality check. Chop penalty down to only one bubble
        <ul>
          <li>RISC is about good pipelining not about few instructions</li>
        </ul>
      </li>
      <li>Optimize: Predict outcome, fix up if guess wrong
        <ul>
          <li>If you’re wrong, must <em>flush</em> pipeline</li>
          <li>Can predict that all branches are NOT taken; just keep going and
fall through :) Only need to flush if branch ends up being taken</li>
        </ul>
      </li>
      <li>Lots of effort spent on this!</li>
      <li>Optimize: can rearrange instructions (compiler) to fill branch delay
with an unrelated, still useful instruction</li>
    </ul>
  </li>
</ul>

<h3 id="8-memory-hierarchy">8: Memory Hierarchy</h3>

<h4 id="mike-acton-data-oriented-design-and-c">Mike Acton Data-Oriented Design and C++</h4>

<ul>
  <li>https://www.youtube.com/watch?v=rX0ItVEVjHc</li>
  <li>On the engine team - supports the runtime systems that games are built
on top of</li>
  <li>Don’t use templates in CPP</li>
  <li>Lots of language features are sad and not used for important stuff</li>
  <li><em>Data oriented design</em>: the purpose of all programs is to transform
data from one form into another
    <ul>
      <li>Corollaries: if you don’t understand the data you don’t understand
the problem. You understand a problem better by understanding the
data. If you have different data you have a different problem. If you
don’t understand the cost, you don’t understand the problem. If you
don’t understand the hardware, you can’t reason about the cost of
understanding the problem. Everything is a data problem. :)</li>
      <li>Solving problems you don’t have will add to the number of problems
you do</li>
    </ul>
  </li>
  <li>Where this is one, there are many. Try looking at the most common
problems and stuff first.</li>
  <li>Software does not run in a vacuum!</li>
  <li>Reason must prevail!</li>
  <li>Data-oriented: a reminder of first principles :). Not new ideas at all</li>
  <li>Lies of CPP
    <ul>
      <li>Software is a platform
        <ul>
          <li>Hardware is the platform fam. Reality isn’t some annoying thing
making your solution ugly, reality is the real problem</li>
        </ul>
      </li>
      <li>Code should be designed around your mental model of the world
        <ul>
          <li>Don’t hide data in your mental model! Confuses maintenance with
understanding properties of data (which is critical for solving
problems). Don’t try and idealize the problem</li>
        </ul>
      </li>
      <li>Code more important than data
        <ul>
          <li>No. Code exists to transform data. Programmer responsible for DATA
not code</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Lies lead to poor performance, concurrency, optimizability, stability,
testability. Oops</li>
  <li>
    <p>Solve to transform data you have to where you want it given the
constraints of the platform. Nothing else dude</p>
  </li>
  <li>Solve for most common case first, not most generic
    <ul>
      <li>“Make the compiler do it”. No. Compiler reasons about instructions,
which is only 1-10% of the problem space</li>
    </ul>
  </li>
  <li>Let’s look at memory hierarchy stuff. Much much more expensive to go
to main memory than to have compiler optimize away expensive CPU
instructions. This is an order of magnitude</li>
  <li>Don’t miss the cache!</li>
  <li>
    <p>If cache line is 32 bytes let’s see</p>
  </li>
  <li>Don’t re-read data or re-call functions that you already have answers for</li>
  <li>For bools, using <code class="language-plaintext highlighter-rouge">bool</code> is huge cost because lots of wasted space
    <ul>
      <li>Only fills 1 bit of 512 in the cache line. Can try and squeeze other
stuff in as well</li>
    </ul>
  </li>
  <li>
    <p>Don’t reason about stuff super locally if you can do it at a higher
level</p>
  </li>
  <li>Concentrate on common case first</li>
</ul>

<h4 id="ph-5th-edition-memory-hierarchy-51---54">P&amp;H 5th Edition Memory Hierarchy (5.1 - 5.4)</h4>

<ul>
  <li>Create illusion of unlimited amounts of fast memory</li>
  <li>If you’re writing a paper at a desk, you wanna keep the most important
documents and references close by so you don’t have to keep getting up
to access stuff
    <ul>
      <li>Same principle here: create illusion of large memory by swapping
stuff out of a small memory behind the scenes</li>
    </ul>
  </li>
  <li>Principle of locality. Programs access a small portion of address
space at any given time
    <ul>
      <li>Temporal (in time): if something referenced, likely to be referenced
again. Keep it around</li>
      <li>Spatial (in space): if something referenced, stuff around it is
likely to be referenced soon</li>
    </ul>
  </li>
  <li>Cache faster than SRAM faster than DRAM faster than disk
    <ul>
      <li>S = Static</li>
      <li>D = Dynamic</li>
    </ul>
  </li>
  <li>Take advantage of locality with a hierarchy
    <ul>
      <li>Faster but smaller the closer you get to processor</li>
    </ul>
  </li>
  <li>Data only copied between two adjacent levels at a time</li>
  <li>“Upper” = closer to processor, “Lower” = further away</li>
  <li>Block/line: minimum unit of information that can be present or not
present. Library analogy is a book</li>
  <li>If present, it’s a <em>hit</em>. If not, it’s a <em>miss</em>. Hit rate is the
fraction of accesses that are in the upper level; Miss rate is 1 - hit
rate</li>
  <li>
    <p>Hit time is amount of time taken for a hit. Miss penalty is time to
replace block in upper level with the missed data from lower level,
then deliver data to processor</p>
  </li>
  <li>SRAM are memory arrays that keep values indefinitely as long as power
is applies. DRAM stores stuff as a charge on a capacitator, must be
refreshed (read and write back) periodically. Organized in rows for
read and write (?)</li>
  <li>Hardware stuff over my head</li>
  <li>Flash memory is older stuff, it wears down over time so you have to
use a technique called wear leveling to distribute load over the whole
thing</li>
  <li>Magnetic hard disk supah slow. They are a series of magnetic disks
connected together and moving in conjunction
    <ul>
      <li>Three steps. First, seek, which moves the head to the proper disk
track. Average seek times 3-13ms. Then, when head is on correct
track, must wait for the right sector to rotate to the head.. Average is
like 5ms. Finally, transfer time is how long it takes to move a block to
the head. Transfer rates in 2012 ~ 100-200MB/sec.</li>
    </ul>
  </li>
  <li>
    <p>Primary diff between magnetic disk and semiconductor memory is that
disks are way slower because they’re mechanical.</p>
  </li>
  <li>Caches are memory levels between processor and main memory</li>
  <li>How to find where in cache something is stored? Similar to naive
hashing algorithm: block address module number of blocks in cache.
This is direct mapping</li>
  <li>Add tags to the cache data decribing where it originally lived</li>
  <li>How do you know if cache has valid data? (e.g. stuff can be stale
after a processor startup). Add a <code class="language-plaintext highlighter-rouge">valid</code> bit that is on if entry has
a valid address</li>
  <li>Caching part of <em>prediction</em>. Rely on principle of locality to try and
find desired data, and retrieve the correct data if can’t find it in
the caches. Today computers are 9% cache hit</li>
  <li>Using this modulo approach we’ll have block conflicts. Uhh how to
resolve idk yet</li>
  <li>“The tag from the cache is compared against the upper portion of the
address to determine whether the entry in the cache corresponds to the
requested address. Because the cache has 210 (or 1024) words and a block
size of one word, 10 bits are used to index the cache, leaving 32 −10 −
2 = 20 bits to be compared against the tag. If the tag and upper 20 bits
of the address are equal and the valid bit is on, then the request hits
in the cache, and the word is supplied to the processor. Otherwise, a
miss occurs.”</li>
  <li>Nice diagrams buddy</li>
  <li>Larger block = lower miss rate b/c of spatial locality
    <ul>
      <li>There’s a sweet spot b/t block size + number of blocks that fit in
the cache</li>
      <li>Larger block also means worse miss penalty :( takes longer to load
missed data into the cache</li>
    </ul>
  </li>
  <li>How does processor control handle miss?</li>
  <li>
    <p>Most of the time, just introduce a stall until missed data has been
loaded (if cache hits, just proceed as normal)</p>
  </li>
  <li>Writes different from reads</li>
  <li>After write to memory, cache and memory are inconsistent. Solve this
with write-through: write to both spots each time. But this is sucky
and slow. Need to spend a lot of cycles writing to main memory
synchronously</li>
  <li>Better? <em>Write buffer</em> stores data while waiting to be written to
memory. Processor just needs to write to the buffer (fast), and it
goes from there to main memory. If write buffer is full, processor still
has to wait for free space</li>
  <li>
    <p><em>Write-back</em> also possible. When write occurs, new value only goes to
cache, then written to lower levels when it is replaced. Hard to
implement but better performance</p>
  </li>
  <li>
    <p>How do miss rate and execution time relate to each other? Let’s see</p>
  </li>
  <li>How to measure and improve cache performance</li>
  <li>Two techniques: reduce miss rate by reducing probability that two
different memory blocks dispute over the same cache spot, reduce miss
penalty by adding more levels to hierarchy</li>
  <li>CPU time = (CPU execution clock cycles + Memory-stall clock cycles) x
Clock cycle time</li>
  <li>Memory-stall clock cycles can be read or write. Intuitive equations
for those. Reads: reads/program x read miss rate x read miss penalty</li>
  <li>
    <p>Sometimes can assume hit time is just factored into a clock cycle, but
if you want to get granular about that too you can use a metric called
Average Memory Access Time (AMAT): time for a hit + miss rate x miss
penalty</p>
  </li>
  <li>Can you have same block in multiple locations? i.e. not direct mapped.</li>
  <li>Opposite of direct mapped is <em>fully associative</em>; any block can be
anywhere. Search whole block for what you want</li>
  <li>Middle range is <em>Set associative</em>. Set number of spots where each
block can be placed in n locations (descript would be “an n-way
set-associative cache”)
    <ul>
      <li>Calculate where block can go by (block#) % (#<em>sets</em> in cache)</li>
      <li>Must search all tags in set when looking for a block</li>
    </ul>
  </li>
  <li>Tradeoff of increasing associativity: lower miss rate but increase hit
time</li>
  <li>Definitely diminishing returns; in 64KiB with 16-word block,
associativity from 1 to 2 is like a 1.7% improvement in miss rate, 2
to 3 is like 0.3%</li>
  <li>
    <p>Searching n-associative cache for your data :thinking_face:
Sequential search too slow! Instead, search them all in parallel. Need
one comparator for each level of associativity you add. So cost is extra
hardware + cost of doing compares</p>
  </li>
  <li>Which block do you replace? Need to choose among blocks in set.</li>
  <li>
    <p>Commonly just do LRU</p>
  </li>
  <li>Multilevel cache to improve performance even more</li>
  <li>Primary cache usually smaller than secondary…can use smaller block
size as well. Also lower associativity</li>
  <li>
    <p>Interesting comparison between radix sort and quicksort. Radix sort
algorithmically quicker, but since quicksort has fewer misses per item
it can still perform better</p>
  </li>
  <li>How to use in software?</li>
  <li>
    <p>e.g. if you’re working on an array or list or matrix that won’t all
fit into memory at the same time, instead of going row by row or
column by column you want to go by block size so you can fit the entire
block you’re operating on into memory at the same time. Compute block
size with pointer arithmetic and only fetch what’s necessary. Muy bien</p>
  </li>
  <li>Summary?</li>
  <li>Cache performance, using associativity to reduce miss rates,
multilevel hierarchies to reduce miss penalties, software
optimizations to improve cache usage</li>
</ul>

<h4 id="lecture-3">Lecture</h4>

<ul>
  <li>Registers: 1ns access, ~ 1kb, CMOS tech, managed by compiler/programmer</li>
  <li>L1: 3ns, 32KB, SRAM, CPU</li>
  <li>L2: 6ns, 256KB, SRAM, CPU</li>
  <li>L3: 12ns, 8MB, SRAM, CPU</li>
  <li>
    <p>RAM: 60ns, 16B, DRAM, OS</p>
  </li>
  <li>Half of each cache is for instructions, half for data
    <ul>
      <li>Why? Different data access patterns. e.g. if iterating through
array, iteration code is static (keep the instruction cache), but
get all the new data (evict data cache)</li>
    </ul>
  </li>
  <li>
    <p>Struct packing: wise about ordering of elements in C Structs because
of how compiler will organize your memory</p>
  </li>
  <li>Misses</li>
  <li>Compulsory: nothing in those spots, just go fetch it</li>
  <li>Conflict: gotta try searching in the set</li>
  <li>Evict: least recently used thing tossed out to make room</li>
</ul>

<h3 id="parallelism-flynn-taxonomy-amdahls-law">Parallelism, Flynn taxonomy, Amdahl’s law</h3>

<h4 id="berkeley-lectures-cs-61c-3-31-2015-and-4-2-2015">Berkeley lectures (CS 61C 3-31-2015 and 4-2-2015)</h4>

<ul>
  <li>New school architecture is crazy. Parallelism :thinking_face:</li>
  <li>Use a whole bunch of processors to make things faster</li>
  <li>Two ways:
    <ul>
      <li>Multiprogramming: different independent programs in parallel</li>
      <li>Parallel computing; run multiple at the same time on same machine.
Way harder</li>
    </ul>
  </li>
  <li>SIMD: single-instruction/multiple-data
    <ul>
      <li>Multiple data streams against a single instruction stream. GPU
stuff. Take a “pool” of data and apply same operation to all of them
at the same time</li>
    </ul>
  </li>
  <li>MIMD: multiple processor cores executing different instructions on
different data</li>
  <li>MISD: not very common at all. Odd design</li>
  <li>SIMD/MIMD: Flynn taxonomy.</li>
  <li>Software: SPMD programming. Single Program Multiple Data. Run same
program on different sets of data in different places</li>
  <li>Big idea: Amdahl’s (heartbreaking) law. Speedup due to enhancement E
    <ul>
      <li>Only speedup to parallel steps, suequential steps still neeed to go
sequentially</li>
      <li>Speedup w/E = exec time w/o E DIVIDED BY exec time w/E</li>
      <li>Basically, parallelization speedup is less than you’d intuit</li>
    </ul>
  </li>
  <li>Strong/weak scaling: getting good speedup on parallel processor while
keeping problem size fixed is hardeer than getting good speedup by
increasing the size of the problem</li>
  <li>Strong: speedup can be achieved on parallel processor without
increasing size of problem
    <ul>
      <li>Example: graphics (parts of the screen aren’t dependent on others)</li>
    </ul>
  </li>
  <li>Weak: speedup can be achieved on a parallel processor by increasing
size of problem proportionally to increase in number of processors</li>
  <li>
    <p>Load balancing: each processor should do just about the same amount of
work! Always have to wait for slowest processor</p>
  </li>
  <li>SIMD architecture</li>
  <li><em>Data parallelism</em> is executing same operation on multiple data
streams</li>
  <li>Example: multiply a coefficient array by data array (all elements)</li>
  <li>Sources of improvement:
    <ul>
      <li>Only one fetch/decode</li>
      <li>All operations known to be independent</li>
      <li>Pipelining/concurrency in memory access</li>
    </ul>
  </li>
  <li>Intel calls it Advanced Digital Media Boost -_-
    <ul>
      <li>MMX: Multimedia Extensions. Used 64 bit registers that would be
considered broken up. Then parallel ops could be done (1992)</li>
      <li>SSE: Streaming SIMD Extensions: Added 128 bit registers (1999)</li>
      <li>Now AVX: 256 bit registers (2011). Space for expansion to 1024 bit
registers!</li>
    </ul>
  </li>
  <li>Array processing in SIMD</li>
  <li>Without parallelism, need to load each element into float register,
calculate sqrt, write result back</li>
  <li>With parallelism, Load 4 members into the SSE register, calculate 4 in
one operation, stoe them all from register to memory</li>
  <li>This kinda stuff is expressed in programs as for loops
    <ul>
      <li>In MIPS, this would just be a sequential set of instructions as
described above “without parallelism”</li>
      <li>Can unroll a scalar loop to do 4 elements at a time. Only 1 loop
overhead every 4 iterations. Uses different registers for each
iteration to eliminate data hazards in the pipeline
        <ul>
          <li>Now schedule things by doing all loads, then all adds, then all
stores. Cool</li>
          <li>If not in multiple of 4, have a separate loop that handles odds</li>
        </ul>
      </li>
      <li>SIMD this thing by just converting unrolled instructions into one
SIMD instruction
        <ul>
          <li>MOVAPS: move aligned, packed, single. Cool</li>
          <li>ADDPS: add packed single precision</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2017/03/26/bradfield-architecture/</guid>
                <description>
                    
                    Lecture notes from Bradfield's architecture class
                    
                </description>
                <pubDate>Sun, 26 Mar 2017 00:00:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Program Interfaces, Patterns, and Anti-Patterns</title>
                <link>http://tigerthinks.com/2017/03/26/bradfield-apis/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<h3 id="1---binary-formats-for-integers-and-characters">1 - Binary Formats for Integers and Characters</h3>

<h4 id="binary-coded-decimal-wiki-page">Binary Coded Decimal Wiki Page</h4>

<ul>
  <li>Class of binary encodings of decimal numbers where each decimal digit
is represented by a byte</li>
  <li>Main virtue: more accurate representation and rounding of decimal
quantities
    <ul>
      <li>Also ease of conversion into human-readable representations</li>
    </ul>
  </li>
  <li><em>Natural BCD</em> is 8421 in one nybble, encoding 0-9
    <ul>
      <li><em>Unpacked</em>: each numeral is encoded into one byte, with padding</li>
      <li><em>Packed</em>: two numerals in each byte, with one in least sig nybble
and other in most significant nybble</li>
    </ul>
  </li>
  <li>Sum is easy; just binary addition first, then add 6 to the sum when
the five-bit result has a value greater than 9. Whew</li>
  <li>Subtraction a smidge more difficult: use signed BCD to represent
negative ten’s complement of the subtrahend, and then add that to the
first number to get the difference. Whew</li>
  <li>Vs. pure binary
    <ul>
      <li>Decimals have finite place value (e.g. 0.2 -&gt; 0.0010)</li>
      <li>Scaling by factor of 10 is simpler (just add empty nybbles)</li>
      <li>Slower than binary</li>
      <li>Smidge more space than binary (~ 20%)</li>
      <li>Adding and stuff is more complicated, as you can see</li>
    </ul>
  </li>
</ul>

<h4 id="binary-plusses-and-minuses-why-we-use-twos-complement">Binary: Plusses and Minuses (Why We Use Two’s Complement)</h4>

<ul>
  <li>How to represent negative numbers?</li>
  <li>Universally, leftmost bit is sign. 0 is positive, 1 is negative</li>
  <li><em>Sign and magnitude</em> NO, since the sign bit isn’t really part of the
number, so you can’t do natural addition/subtraction</li>
  <li><em>One’s complement</em>: flip all the bits to get negative representation
    <ul>
      <li>Bleh, two representations of 0 :/</li>
      <li>Treat the sign bit as normal, if you get a final carry bit, bring it
all the way back over to the right and do an add again</li>
    </ul>
  </li>
  <li><em>Two’s complement</em>: do one’s complement and add 1
    <ul>
      <li>If the carry into the sign bit is definitely different from teh
carry out, then you have an overflow!</li>
    </ul>
  </li>
</ul>

<h4 id="a-history-of-character-encodings">A History of Character Encodings</h4>

<ul>
  <li>Computers use binary character codes as “shadow representations” of
graphical characters that it outputs to screen. Allows for efficiency
and stuff</li>
  <li>Start: Morse code. Pretty efficient, uses shortest dots and dashes for
most frequently used characters (“e”, “t”), still in use today</li>
  <li>Baudot used 5-bit encoding (5 bits b/c of hardware constraints) with
switching b/t two planes of characters. Gave him 64 chars to work
with, okay okay</li>
  <li>For 1890 Census and stuff, Hollerith develops a punched card code. 12
rows of punched card, but only 69 valid characters. Extra spaces are
for ease of use (fewer punches needed on average to differentiate
characters)</li>
  <li>1963: American Standards Association announces ASCII, which has 32
control characters and 96 printing characters, cool
    <ul>
      <li>Adopted by all main U.S. computer manufacturers except IBM</li>
      <li>IBM makes EBCDIC, which is proprietary. Super yucky, 57 different
standards (!) so international exchange is a nightmare, overall this
sucks</li>
      <li>Overall, you come out of the other side with ASCII-based OS’s with
OS-specific extensions for European languages and whatnot</li>
    </ul>
  </li>
  <li>Lots of different standards and stuff for Korean/Chinese/Japanese
encodings</li>
  <li>Xerox starts Unicode</li>
  <li>
    <p>Unicode has been criticized as being little more than an exercise in
cultural imperialism on the part of western computer manufacturers,
the biggest problems with Unicode are in fact technical ones, which
can be listed as follows:</p>

    <p>1) There is no information to identify the language being used, which
affects sorting, etc.
2) User defined characters, which cause problems in data transmission,
are allowed
3) There is no room for further expansion using two-byte (16-bit)
codes
4) There is an excess of similar characters
5) Some characters are created through composition, which destroys the
fixed-length scheme
6) Conversion to/from Unicode is not simple for users of Chinese,
Japanese, and Korean</p>
  </li>
  <li>Sigh. Designed to avoid using escape sequences, use a maximum of 16
bits (2 bytes)</li>
  <li>Man, all kinds of wild stuff going on. This is from 1999. Unicode
still in use today I guess</li>
</ul>

<h4 id="r-remembering-the-origin-of-utf-8">R@ Remembering the Origin of UTF-8</h4>

<ul>
  <li>http://doc.cat-v.org/bell_labs/utf-8_history</li>
  <li>Rob Pike da god</li>
  <li>IBM proposed a FSS/UTF format, asked Ken/Rob to look over it. They
thought they could do better, so they went to dinner, outlined it on a
placemat, implemented it, and ran with it.</li>
  <li>
    <p>Dam son</p>

    <p>We define 7 byte types:
T0  0xxxxxxx    7 free bits
Tx  10xxxxxx    6 free bits
T1  110xxxxx    5 free bits
T2  1110xxxx    4 free bits
T3  11110xxx    3 free bits
T4  111110xx    2 free bits
T5  111111xx    2 free bits</p>

    <p>Encoding is as follows.</p>
    <blockquote>
      <p>From hex   Thru hex    Sequence        Bits
00000000    0000007f    T0          7
00000080    000007FF    T1 Tx           11
00000800    0000FFFF    T2 Tx Tx        16
00010000    001FFFFF    T3 Tx Tx Tx     21
00200000    03FFFFFF    T4 Tx Tx Tx Tx      26
04000000    FFFFFFFF    T5 Tx Tx Tx Tx Tx   32</p>
    </blockquote>
  </li>
</ul>

<h4 id="characters-symbols-and-the-unicode-miracle">Characters, Symbols, and the Unicode Miracle</h4>

<ul>
  <li>Knock off the leftmost two bits to get to alphabet index in ASCII
(since A starts at 65…)</li>
  <li>Uh oh, this is bad because too small of a set, we start sending all
kinds of crazy stuff over the web and we get screwed</li>
  <li>Unicode Consortium has 100,000 characters mapped!</li>
  <li>Set up UTF-8
    <ul>
      <li>Problem 1: tons of blank space for the most common characters if you
just use 4 bytes!</li>
      <li>Problem 2: Old computers interpret null bytes as end of stream! Can’t have null
bytes</li>
      <li>Problem 3: Must be backwards compatible with ASCII</li>
    </ul>
  </li>
  <li>Nice hack :)</li>
</ul>

<h4 id="lecture">Lecture</h4>

<ul>
  <li>Types of interface</li>
  <li><em>Format</em>: how the data between two programs looks</li>
  <li><em>Call</em>: conventions. Place-based, rules about where to get data and
such</li>
  <li>
    <p><em>Protocol</em>: combination of agreed-upon format and agreed-upon calling
convention. When you introduce stuff like sequencing, you get a
protocol</p>
  </li>
  <li>Gottlob Frege introduced:
    <ul>
      <li>Take 1 + 2</li>
      <li><em>Sign</em>: the + symbol is the sign of the plus</li>
      <li><em>Sense</em>: the operation you associate with the + symbol, which is
addition for us</li>
      <li><em>Reference</em>: the concrete representation of the sense - 32 vs 64
bit, signed vs unsigned, etc.</li>
    </ul>
  </li>
  <li>Get the story straight about IBM and EBCDIC. Assumption is that IBM
wanted to achieve vendor lock-in
    <ul>
      <li>But no, they were actually using those light things that look like
8’s and can have lights light up to represent numeric values</li>
      <li>Constraints of the user interface device (the output channel)
<em>always</em> bubbles down to the program implementation (if it doesn’t,
your implementation sucks)</li>
      <li>If you do what you say you’re gonna do, faster and better than
others, you win the market. Sometimes this requires cutting through
layers of abstraction</li>
    </ul>
  </li>
  <li>Now you have BCD, next you add IC (Interchange Code). Needs to include
letters. Adds two more bits to each value (6 bits total)
    <ul>
      <li>This is optimized for the actual paper punch card interface, with 12
holes</li>
      <li>Then add the E, which adds two more bits (for stuff like
punctuation). Now 8 bits. Now people are mad at IBM for breaking
standard</li>
    </ul>
  </li>
  <li>UTF-16 issues
    <ul>
      <li>Possibility of corrupt byte streams through combo of breaking in the
middle of a byte + custom shift-based encodings on Japanese
computers</li>
      <li>Fixed by UTF-8, duh!</li>
    </ul>
  </li>
</ul>

<h3 id="2---indirect-access-vs-direct-access">2 - Indirect Access vs. Direct Access</h3>

<ul>
  <li>High level interface or low level interface?</li>
</ul>

<h4 id="stallman-my-lisp-experiences-and-the-development-of-gnu-emacs">Stallman: My Lisp Experiences and the Development of GNU EMACS</h4>

<ul>
  <li>https://www.gnu.org/gnu/rms-lisp.en.html</li>
  <li>Welp, I guess Stallman wrote EMACS</li>
  <li>Dah dee dah, story time</li>
  <li>Initially, EMACS was written in some crappy other low level language</li>
  <li>But people wanted something with Lisp inside it that could be extended
by rewriting or writing new Lisp</li>
  <li>So he rewrote Emacs in C from TECO; with a few Lisp things, but mostly
C</li>
  <li>Gradually got to re-implementing in all Lisp primitives</li>
  <li>Built a Lisp machine for Lisp primitives I guess, at the AI Lab
    <ul>
      <li>This is what Myles is talking about re: AI &amp; Lisp</li>
    </ul>
  </li>
  <li>Meh, lab goes to dump and there’s rudeness and such, Stallman tries to
keep Lisp Machines in business</li>
  <li>
    <p>Because of GNU having Lisp implementations for userland programs,
Stallman was led to write GNU Emacs. Okay</p>

    <p><strong>The crucial thing is that you are free to run the program, free to
study what it does, free to change it to suit your needs, free to
redistribute the copies of others and free to publish improved,
extended versions. This is what free software means. If you are using
a non-free program, you have lost crucial freedom, so don’t ever do
that.</strong></p>
  </li>
  <li>HAVING EXTENSIBILITY IS GOOD
    <blockquote>
      <p>There’s an interesting benefit you can get from using such a powerful
language as a version of Lisp as your primary extensibility language.
You can implement other languages by translating them into your primary
language. If your primary language is TCL, you can’t very easily
implement Lisp by translating it into TCL. But if your primary language
is Lisp, it’s not that hard to implement other things by translating
them. Our idea was that if each extensible application supported Scheme,
you could write an implementation of TCL or Python or Perl in Scheme
that translates that program into Scheme. Then you could load that into
any application and customize it in your favorite language and it would
work with other customizations as well.</p>

      <p>As long as the extensibility languages are weak, the users have to use
only the language you provided them. Which means that people who love
any given language have to compete for the choice of the developers of
applications — saying “Please, application developer, put my language
into your application, not his language.” Then the users get no choices
at all — whichever application they’re using comes with one language and
they’re stuck with [that language].</p>
    </blockquote>
  </li>
</ul>

<h4 id="microcode-wikipedia-page">Microcode Wikipedia page</h4>

<ul>
  <li>https://en.wikipedia.org/wiki/Microcode</li>
  <li><strong>A technique that imposes an interpreter between the hardware and the
architectural level of a computer</strong></li>
  <li>Used in CPUs; the hardware instructions that implement the
assembly/machine code instructions</li>
  <li>Lower-level than application programs :) differentiated with <em>micro</em>
prefix (microinstruction, microassembler, etc.)</li>
  <li>Example horizontal microinstruction (executed in one cycle)
  Connect register 1 to the A side of the ALU
  Connect register 7 to the B side of the ALU
  Set the ALU to perform two’s-complement addition
  Set the ALU’s carry input to zero
  Store the result value in register 8
  Update the condition codes from the ALU status flags (negative, zero,
  overflow, and carry)
  Microjump to microPC nnn for the next microinstruction</li>
  <li>Must be super optimized!</li>
  <li>Microcode simplifies fetch/decode/execute cycle by allowing processor
behavior to be defined with microprogram routines instead of dedicated
circuitry. Can change the microcode without changing actual hardwire
design, woohoo!!</li>
  <li><strong>Microprograms operate on a more primitive, totally different, and
much more hardware-oriented architecture than the assembly
instructions visible to normal programmers</strong></li>
  <li>Each microinstruction in a microprogram provides the bits that control
the functional elements that internally compose a CPU.</li>
  <li>Compared to RISC? Many RISC and VLIW processors are designed to
execute every instruction (as long as it is in the cache) in a single
cycle. This is very similar to the way CPUs with microcode execute one
microinstruction per cycle.</li>
  <li>Not really sure, but okay</li>
</ul>

<h4 id="lecture-1">Lecture</h4>

<ul>
  <li>Abstraction vs. Indirection
    <ul>
      <li>Example: pedestrians currently have access to the other side of the
road (contract), but when you go to self-driving cars you may have
to introduce a constraint that pedestrians can’t cross to the other
side</li>
      <li>Indirection is any time you deny direct access, mediate the access
through an interface. E.g. bridge over road vs. crosswalk is an
indirection but not an abstraction</li>
      <li>Abstraction allows you to think at a higher level than before</li>
    </ul>
  </li>
  <li>Lisp interpreter -&gt; Lisp ASM -&gt; microcode
    <ul>
      <li>Abstraction! Indirect access to microcode; most people only write
stuff in Lisp ASM, only a select few contribute to the
implementations of the List ASM targeting specific microcodes</li>
    </ul>
  </li>
  <li>BSD vs. Linux
    <ul>
      <li>Linus just wrote the Linux kernel, which he intended to combine with
GNU tools to make a functioning operating system</li>
      <li>BSD did it differently - encapsulates everything</li>
      <li>Write a C program for Linux? Target a kernel version, and C version,
and all kinds of other package versions</li>
      <li>Write a C program for BSD - just target a BSD version</li>
    </ul>
  </li>
  <li>React vs jQuery
    <ul>
      <li>React is an abstraction (you’re not even talking to the browser
directly), jQuery is indirection (allows you to talk to browser
differently)</li>
    </ul>
  </li>
</ul>

<h3 id="3---the-system-call-the-function-call-and-the-method-call">3 - The System Call, the Function Call, and the Method Call</h3>

<h4 id="the-definitive-guide-to-linux-system-calls">The Definitive Guide to Linux System Calls</h4>

<ul>
  <li>This’ll be a bit of revision from operating systems</li>
  <li>More of a reference than an actual thingy</li>
</ul>

<h4 id="the-freebsd-developers-handbook-x86-syscall-section-short">The FreeBSD developer’s handbook, x86 syscall section (short)</h4>

<ul>
  <li>Same</li>
</ul>

<h4 id="the-history-of-calling-conventions">The History of Calling Conventions</h4>

<ul>
  <li>Ayyah</li>
</ul>

<h4 id="lets-build-objc_msgsend">Let’s Build objc_msgSend</h4>

<ul>
  <li>Code tutorial, notes are rough, just read</li>
  <li>In general, any small piece of code that serves to redirect code
somewhere else can be called a trampoline.</li>
</ul>

<h4 id="lecture-2">Lecture</h4>

<ul>
  <li>Problems with Assembly?
    <ul>
      <li>Want a way to address lines of code: labels!</li>
      <li>This is the beginning of subroutines</li>
      <li>Add jump, JAL, RET</li>
      <li>What differentiates subroutine from function? Subroutines cannot be
nested, also don’t have formal parameters/state</li>
    </ul>
  </li>
  <li>To implement a function call:
    <ul>
      <li>Store return address</li>
      <li>Store registers that function will clobber</li>
      <li>Store args (or at least agree on location)</li>
      <li>Where to get return values</li>
    </ul>
  </li>
  <li>Function is stack space and lexical scope for a subroutine</li>
  <li>Method: expands on function by having an instance environment.
Invisible argument is self
    <ul>
      <li>Fucking yucky, need to go up the inheritance tree to find the method</li>
    </ul>
  </li>
  <li>Lambda: does not need an entry on the symbol table
    <ul>
      <li>Also implements a closure, gg</li>
      <li>Has reference to the lexical scope under which it was invoked, as
well as its own stack frame</li>
    </ul>
  </li>
  <li>Fork/exec/syscall is pretty much review</li>
</ul>

<h3 id="4---command-line-interfaces">4 - Command (Line) Interfaces</h3>

<h4 id="aosa-book---the-bourne-again-shell">AOSA Book - The Bourne-Again Shell</h4>

<ul>
  <li>http://aosabook.org/en/bash.html</li>
  <li>Okay okay</li>
  <li>Input -&gt; Lex/Parse -&gt; Expand (braces, tilde, substitution, word
splitting, filename generation) -&gt; Execute -&gt; Exit status</li>
</ul>

<h6 id="syntactic-units">Syntactic Units</h6>

<ul>
  <li>Tokens:
    <ul>
      <li><em>Reserved words</em> like if and while</li>
      <li><em>Operators</em> like +, -, etc.</li>
      <li>Everything else is just normal <em>words</em></li>
    </ul>
  </li>
  <li>Dollar sign introduces a parameter or variable, yep</li>
  <li>Support for arrays, integers, and strings</li>
  <li>Hash table for storing and retrieving variables, linked lists of these
hash tables to implement variable scoping
    <ul>
      <li>Different scopes for each function call, etc</li>
    </ul>
  </li>
  <li>All built on top of primitive data structures - arrays, trees,
singly-linked, doubly-linked lists</li>
</ul>

<h6 id="input-processing">Input Processing</h6>

<ul>
  <li><em>Readline</em> library to provide functions allowing users to edit command
lines, functions to save command lines as they are entered, recall
previous commands, expand history, etc.</li>
  <li>This is for interactive input processing. For noninteractive input,
uses buffered input routines</li>
</ul>

<h6 id="parsing">Parsing</h6>

<ul>
  <li>Bash needs to be lexed and parsed just like any other language</li>
  <li>Parser returns a command struct to the word expander</li>
</ul>

<h6 id="word-expansion">Word Expansion</h6>

<ul>
  <li>Not much to see here</li>
  <li>Implemented using a small pipeline: each stage takes a word, and,
after potentially transforming it, passes it along</li>
  <li>Uses the same word data structure as the rest of the system</li>
</ul>

<h6 id="command-execution">Command Execution</h6>

<ul>
  <li>Yeah, skimmed :/</li>
</ul>

<h6 id="lessons-learned">Lessons Learned</h6>

<ul>
  <li>Important to have <em>change logs</em>!</li>
  <li>Regression testing if appropriate</li>
  <li>Standards, documentation often ignored by developers but are very
important</li>
  <li>Okay</li>
</ul>

<h4 id="powershell-wikipedia-page">PowerShell Wikipedia page</h4>

<ul>
  <li>Administrative tasks performed by <em>cmdlets</em> which implement a specific
operation. Can be combined into scripts
    <ul>
      <li><em>Providers</em> make the file system/registry available to cmdlets</li>
    </ul>
  </li>
  <li>Works with Windows OS</li>
  <li>Core grammar based on POSIX /shrug</li>
  <li>Yeah yeah yeah some history cool</li>
  <li>Similar command line interface to bash, where parameters are
translated from arguments by PowerShell and passed to the cmdlet</li>
  <li>Always processes objects individually (doesn’t work on collections)</li>
  <li>Each cmdlet implements Begin(), Process(), End()…</li>
  <li>Differences in pipelining from Bash: all happens in same process, and
passes .NET objects rather than byte streams</li>
</ul>

<h4 id="lecture-3">Lecture</h4>

<ul>
  <li>PowerShell passes around <em>structured data</em>, Bash passes around text</li>
  <li>The shell exists to interface with the operating system</li>
  <li>OS startup: kernel -&gt; initd/launchd -&gt; bash (connected to teletype
terminal or tty)</li>
</ul>

<h6 id="myles-walking-through-bash-execution">Myles walking through bash execution</h6>

<ul>
  <li>Lex into words</li>
  <li>Parse into AST</li>
  <li>Expand words</li>
  <li>Execute
    <ul>
      <li>Look for pipe chars</li>
      <li>If no job:
        <ul>
          <li>Resolve command (aliases, etc.)</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="5---interprocess-communiation-ipc">5 - Interprocess Communiation (IPC)</h3>

<h4 id="pipes-a-brief-introduction">Pipes: A Brief Introduction</h4>

<ul>
  <li>Pipes transfer standard output of a process to another destination</li>
  <li>Can create a pipeline of commands</li>
  <li>Made <em>modularity</em> possible as part of Unix philosophy</li>
  <li>Buh I know all dis</li>
</ul>

<h4 id="bsd-sockets-a-quick-and-dirty-primer">BSD Sockets: A Quick And Dirty Primer</h4>

<ul>
  <li><em>Socket</em> is the method for accomplishing IPC. Allows processes to
speak to one another. <em>Analogy is a telephone</em></li>
  <li><em>UNIX sockets</em> use UNIX pathnames to identify sockets, used for same
machine</li>
  <li><em>INET sockets</em> use an IP address, include a port, used for remote
accesses</li>
  <li><em>bind</em> binds socket to an address on which to receive calls</li>
  <li><em>listen</em> to set max # of requests to buffer</li>
  <li><em>accept</em> to finally start getting data on the socket</li>
  <li>Usually fork off jobs to handle each new connection that gets accepted</li>
  <li><em>connect</em> to a socket to start dropping data onto it
    <ul>
      <li>Calls particular port number on particular host. Returns socket
through which data can flow</li>
    </ul>
  </li>
  <li>Now you can talk via read() and write()</li>
  <li>close() to hang up the call</li>
</ul>

<h4 id="zeromq-guide-socket-stuff">ZeroMQ Guide: Socket Stuff</h4>

<ul>
  <li>Socket-like API doesn’t come for free!</li>
  <li>Bind in one node, connect in others. <em>Generally</em> (not always), the
server binds and clients connect. Bind to a well-known address,
connect to arbitrary network addresses</li>
  <li>Differences with TCP sockets:
    <ul>
      <li>zmq sockets carry messages not a stream of bytes</li>
      <li>i/o in background thread, messages always sent and received locally
no matter what application is doing (?)</li>
      <li>one-to-N routing is built-in</li>
    </ul>
  </li>
  <li>Dealer/Broker used for n-n connections and such
    <blockquote>
      <blockquote>
        <blockquote>
          <p>The built-in core ZeroMQ patterns are:
  Request-reply, which connects a set of clients to a set of services.
  This is a remote procedure call and task distribution pattern.
  Pub-sub, which connects a set of publishers to a set of subscribers.
  This is a data distribution pattern.  Pipeline, which connects nodes
  in a fan-out/fan-in pattern that can have multiple steps and loops.
  This is a parallel task distribution and collection pattern.
  Exclusive pair, which connects two sockets exclusively. This is a
  pattern for connecting two threads in a process, not to be confused
  with “normal” pairs of sockets.</p>
        </blockquote>
      </blockquote>
    </blockquote>
  </li>
</ul>

<h4 id="lecture-4">Lecture</h4>

<ul>
  <li>
    <p>Pipes for one process to one process, socket for multiple</p>
  </li>
  <li>Advantage of multi-process architecture is that if a component
crashes, the whole process doesn’t go down
    <ul>
      <li>Single process can still load fast because of how OS lazily pages</li>
      <li>Better reliability, but it’s very annoying</li>
    </ul>
  </li>
  <li>
    <p><em>Zombie</em> process: got killed, but parent didn’t call wait() in its
SIGCHILD handler, so it stays as an entry in the process table but is
unreachable</p>
  </li>
  <li>Pipes don’t touch the file system!</li>
</ul>

<h3 id="6---human-readable-ie-text-based-interchange-and-archival-formats">6 - “Human Readable” (i.e. Text Based) Interchange and Archival Formats</h3>

<h4 id="the-rule-of-least-power">The Rule of Least Power</h4>

<ul>
  <li><strong>Choose the least powerful language suitable for a given purpose</strong>,
where language doesn’t necessarily a programming language (English,
diagrams, etc.)</li>
  <li>Principle: <strong>Powerful languages inhibit information reuse</strong></li>
  <li>What is Turing complete? Can compute anything a computer can compute
    <ul>
      <li>Give you memory and jumping</li>
      <li>Tradeoff: hard to tell what it’ll do without actually running it</li>
    </ul>
  </li>
  <li>Less powerful = easy to secure, easy to analyze</li>
  <li>Practice for the Internet: <em>Use the least powerful language suitable
for expressing information, constraints or programs on the World Wide
Web</em></li>
  <li>Still needs to solve your problem!</li>
  <li>HTML/CSS is least power, Java applet is more powerful</li>
</ul>

<h4 id="my-history-of-the-internet-robustness-principle">My history of the (Internet) Robustness Principle</h4>

<ul>
  <li>Robustness Principle: <strong>Be liberal in what you accept, and
conservative in what you send</strong></li>
  <li>Applies to life!</li>
  <li>Getting looser as time goes on :/ early formulation was
“Implementation must be conservative in its sending behavior, and
liberal in its receiving behavior”, latest is “Be strict when
sending and tolerant when receiving”</li>
  <li>aka Postel’s Principle</li>
</ul>

<h4 id="edn-format">EDN Format</h4>

<ul>
  <li>Extensible Data Notation</li>
</ul>

<h4 id="lecture-5">Lecture</h4>

<ul>
  <li>Why use text based formats?</li>
  <li>Pros
    <ul>
      <li>Human readability (terminals, text editors, anything that can read
UTF-8)</li>
      <li>Open for extensibility</li>
      <li>Platform independence (don’t need to worry about stuff like
endianness)</li>
    </ul>
  </li>
  <li>Cons
    <ul>
      <li>Space</li>
      <li>Time to parse</li>
    </ul>
  </li>
  <li>Postel Principle in action:</li>
  <li>HTTP takes \r\n or just \n as line break</li>
  <li>
    <p>HTML has super optional stuff, ew</p>
  </li>
  <li>Rule of Least Power</li>
  <li>It was an inevitability that JavaScript would subsume HTML and CSS
because it was the only general purpose language of the three related
to the web</li>
  <li>Web succeeds because it is <em>open</em>, in spite of all of its design
failures</li>
  <li>Rule of Least Power failed?</li>
</ul>

<h3 id="7---binary-interchange-and-archival-formats">7 - Binary Interchange and Archival Formats</h3>

<h4 id="protobufs">ProtoBufs</h4>
<p>https://developers.google.com/protocol-buffers/docs/encoding</p>

<ul>
  <li>A language-neutral, platform-neutral, extensible way of serializing
structured data for use in communications protocols, data storage, and
more
    <ul>
      <li>XML, but smaller, faster, and simpler</li>
    </ul>
  </li>
  <li>Define in <code class="language-plaintext highlighter-rouge">.proto</code> files, run compiler, you get generated source code
for interacting</li>
  <li>vs. XML:
    <ul>
      <li>Simpler</li>
      <li>Order of magnitude smaller</li>
      <li>Order of magnitude faster</li>
      <li>Less ambiguity</li>
      <li>Easier to use programmatically/semantically</li>
    </ul>
  </li>
  <li>Protobufs introduced at Google for request/response without needing to
have ugly versioning code :)
    <ul>
      <li>Introduce new fields easily</li>
      <li>Self-describing formats that can be used in multiple languages</li>
    </ul>
  </li>
</ul>

<h6 id="encoding">Encoding</h6>

<ul>
  <li>Use varints to encode integers - okay, zzz, I can get this</li>
  <li>Protobuf message is a series of key-value pairs; binary version
just uses field numbers as keys, concats keys and values into a
byte stream</li>
  <li>For backwards compatibility, encode key with a <em>wire type</em> indicating
how long the following value is. This allows you to add new fields
without breaking existing parsers</li>
  <li>Boring stuff for how each field type is encoded</li>
  <li>Better to serialize fields in order</li>
</ul>

<h4 id="redis-protocol">Redis Protocol</h4>
<p>https://redis.io/topics/protocol</p>

<ul>
  <li>RESP: REdis Serialization Protocol</li>
  <li>Balance these things:
    <ul>
      <li>Simple to implement</li>
      <li>Fast to parse</li>
      <li>Human readable</li>
    </ul>
  </li>
  <li>For client-server communication (client sends array of strings
representing command arguments, server responds with command-specific
data type)</li>
  <li>First byte indicates the datatype</li>
  <li>Okay and there’s a bunch of different types</li>
  <li>Kind of a balance between binary and text protocol?</li>
</ul>

<h4 id="fressian">Fressian</h4>
<p>https://www.youtube.com/watch?v=JArZqMqsaB0</p>

<ul>
  <li>Takes ideas from Hessian/EDN</li>
  <li>Datomic distributed database on Clojure…?</li>
  <li><em>Not serialization</em>
    <ul>
      <li>
        <h2 id="data-structuresobjects-drive-decisionmaking">Data structures/objects drive decisionmaking</h2>
      </li>
    </ul>
  </li>
  <li>Use <em>data encoding</em> instead
    <ul>
      <li>Encoding drives decisionmaking</li>
      <li>In 6 years you’ll just have your data</li>
      <li>No objects</li>
      <li>No identity</li>
      <li>Consumers don’t need to understand everything!</li>
    </ul>
  </li>
  <li>EDN is like Fressian
    <ul>
      <li>Language neutral (even though it’s made for Clojure, it’s important
to be able to read data in 10 years with different language)</li>
      <li>Self-describing</li>
      <li>Immutable values</li>
      <li>Namespaces</li>
      <li>Extensible</li>
      <li>Composable</li>
      <li>Batteries-included
        <ul>
          <li>Enough stuff in the format to get rolling without wondering about
ints being in the encoding and stuff</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Why EDN <em>and</em> Fressian? <em>Performance</em>
    <ul>
      <li>Fressian is aware of primitives in language</li>
      <li>Domain-specific compression in Fressian</li>
    </ul>
  </li>
  <li>Design-time</li>
  <li><em>Sufficiency, then efficiency</em>
    <ul>
      <li>Requirement is language neutrality; helps you avoid
language-specific serialization</li>
      <li>Requirement is rich types; helps you avoid extra-message convention
(everyone does custom JSON)</li>
      <li>Extensibility: helps you avoid arbitrary extension points, that
no one can understand</li>
      <li>Self-describing; helps you avoid contextual description (e.g.
language-specific)</li>
    </ul>
  </li>
  <li>Efficiency tricks
    <ul>
      <li>Primitive and array support</li>
      <li>Byte code language: the encoding is a bytecode</li>
      <li>Packed encoding (e.g type and data encoded together - ints 0-63
encode themselves)</li>
      <li>Chunked encoding (can stream in parsing)</li>
      <li>Domain-aware caching
        <ul>
          <li>In the bytecode stream you can have a cached value indicated by
something</li>
          <li>Writer chooses what to cache (super dynamic!)</li>
          <li>Cached items represented once in full, then all following
representations are by alias/code</li>
          <li>Beats generic compression by a bunch</li>
          <li>Entirely transparent to readers</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Tagged stuff like EDN, can be ignored by intermediaries</li>
  <li>
    <p>More clojure-specific stuff</p>
  </li>
  <li>Language-neutral is the most important! Don’t make Clojure a private
island</li>
</ul>

<h4 id="bitmap-image-file">BitMap image file</h4>

<ul>
  <li>
    <p>The BMP file format, also known as bitmap image file or device
independent bitmap (DIB) file format or simply a bitmap, is a raster
graphics image file format used to store bitmap digital images,
independently of the display device (such as a graphics adapter),
especially on Microsoft Windows[1] and OS/2[2] operating systems.</p>

    <p>The BMP file format is capable of storing two-dimensional digital
images both monochrome and color, in various color depths, and
optionally with data compression, alpha channels, and color profiles.
The Windows Metafile (WMF) specification covers the BMP file
format.[3] Among others wingdi.h defines BMP constants and structures.</p>
  </li>
  <li>
    <p>See image in 07_binary_formats</p>
  </li>
</ul>

<h4 id="lecture-6">Lecture</h4>

<ul>
  <li>RESP is a good choice for the most basic host-to-host communication,
where you don’t want to pull in any dependencies and such</li>
  <li>Schema === non-self-describing (JSON is self-describing, schemaless)</li>
  <li>Diff between text and binary:
    <ul>
      <li>num = buffer.read32LE(8) is constant time (movement)</li>
      <li>num = parseInt(“1234567”) is linear time (computation)</li>
    </ul>
  </li>
  <li>In-memory format concerns:
    <ul>
      <li>Alignment</li>
      <li>Padding</li>
      <li>These things don’t matter as much over the wire; this
alignment/padding allows you to do constant time lookups</li>
    </ul>
  </li>
  <li><em>Packing</em> is putting values next to each other (without identifiers),
differing from compression because compression looks for patterns in
the values from themselves as well</li>
  <li>Protobuf: you need a schema</li>
  <li>How do you know which object type is in protobuf</li>
  <li>
    <p>Myles thinks out-of-band schemas are always a disadvantage because of
the unnecessary overhead</p>
  </li>
  <li>Fressian is a bytecode format
    <ul>
      <li>Very complicated but still half the size of JSON parser</li>
    </ul>
  </li>
  <li><em>Binary safe</em> format can have arbitrary binary in it without
transformations and parse successfully</li>
</ul>

<h3 id="8---distributed-systems-remote-call-interfaces-formats-and-protocols">8 - Distributed systems: remote call interfaces, formats, and protocols</h3>

<h4 id="hateoas">HATEOAS</h4>
<p>http://restfulapi.net/hateoas/</p>

<ul>
  <li><strong>Hypermedia as the Engine of Application State</strong></li>
  <li>Sets apart REST from other network application architectures</li>
  <li><em>Hypermedia</em>: any content that contains links to other forms of media</li>
  <li>Add links in JSON responses so client can dynamically navigate to
another resource :)
    <ul>
      <li>I.e. Response includes { “link”: { “href”: “10/employees” } }; thus,
the hypermedia returned from the server drives the application’s
state
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
"departmentId": 10,
"departmentName": "Administration",
"locationId": 1700,
"managerId": 200,
"links": [
    {
        "href": "10/employees",
        "rel": "employees",
        "type" : "GET"
    }
]
}
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>If HATEOAS is implemented the REST client requests an initial URI,
then the server provides links to dynamically discover the rest of the
stuff. This means <strong>clients no longer have to hard code the URI
structures for different resources</strong></li>
  <li>Okay</li>
</ul>

<h4 id="grpc-google-rpc">gRPC (Google RPC)</h4>
<p>http://www.grpc.io/docs/guides/index.html</p>

<ul>
  <li>gRPC lets client applications directly call methods on server
applications on different machines as if they were local objects</li>
  <li>Client/server stubs just like normal RPCs</li>
  <li>Uses protobufs</li>
  <li>Okay</li>
</ul>

<h4 id="graphql-fields">GraphQL Fields</h4>
<p>http://graphql.org/learn/queries/#fields</p>

<ul>
  <li>You query a GraphQL server by specifying fields on objects</li>
  <li>Req:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
hero {
  name
  # Queries can have comments!
  friends {
    name
  }
}
}
</code></pre></div>    </div>
  </li>
  <li>Resp:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
"data": {
  "hero": {
    "name": "R2-D2",
    "friends": [
      {
        "name": "Luke Skywalker"
      },
      {
        "name": "Han Solo"
      },
      {
        "name": "Leia Organa"
      }
    ]
  }
}
}
</code></pre></div>    </div>
  </li>
  <li>So on and so forth :)</li>
  <li>Okay</li>
</ul>

<h4 id="lecture-7">Lecture</h4>

<ul>
  <li>Networking gives you the ability to make phone calls, you have to
build application level protocols above that
    <ul>
      <li>TCP illusion is sequential passing of messages back and forth</li>
      <li><em>Connection</em>: link between two hosts that they can pass data back
and forth on</li>
      <li><em>Packet</em>: message sized by some link or network layer constraint</li>
      <li><em>Fragment</em>: zzz, break up a piece of data into smaller sizes so that
you can be more granular with requests (e.g. YouTube videos)</li>
      <li><em>Stream</em>: sequence of bytes made available over time (conveyor belt
one at a time, not large batches)</li>
    </ul>
  </li>
  <li>High level concepts:
    <ul>
      <li><em>Service</em>: something that interacts with a network</li>
      <li><em>Endpoint</em>: the thing you’re targeting; could be URL, IP address,
port. When you add a feature to a service, you are adding an
endpoint</li>
      <li><em>Message</em>: single unit of communication between two nodes</li>
    </ul>
  </li>
  <li>Application level concepts:
    <ul>
      <li><em>Idempotency</em>: more than just “no side effects”. It should produce
the same output state regardless of how many times you perform an
operation
        <ul>
          <li>POST isn’t idempotent :*(</li>
          <li>PUT is idempotent because applying the same update over and over
should produce the same state
            <ul>
              <li>Client should generate ID for creating a record so that it can
generate a message that can safely be retried</li>
            </ul>
          </li>
          <li>Ensure consistency with client applications</li>
        </ul>
      </li>
      <li><em>Transactions</em>: two things need to happen together or not at all</li>
      <li><em>Sagas</em>: transactions are above the level of the technology, but
sometimes rollback involves a physical side effect out of the time
band where you need to respond to the user. In this case you use a
saga
        <ul>
          <li>Example: 50k tickets available, will hvae demand for 100k, but
payment processor can only process one payment per second
            <ul>
              <li>So when user makes purchase, issue “optimistic” ticket to the
user but on the backend the transaction is still in a queue</li>
              <li>Payment fails -&gt; write a record saying “this ticket ID has an
associated payment failure”. Ticket only valid if you have an
associated successful payment</li>
              <li>Payment succeeds -&gt; you good</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Metaphors</li>
  <li>Calling <em>Procedures</em>
    <ul>
      <li>RPCs</li>
      <li>Around since 1950s</li>
      <li>Get a bad rap because they sucked at first</li>
      <li>Can’t tell which lines of code do things slowly because they’re
going over the network! Impossible to profile code and estimate
performance</li>
      <li>Yuck</li>
      <li>Treat an endpoint like a function, treat payload like parameters to
function, you’ll receive a response that is in a certain agreed-upon
format</li>
      <li>gRPC
        <ul>
          <li>Protobuf message formatting</li>
          <li>Built-in timeouts</li>
          <li>Not everything is one request-one response
            <ul>
              <li>gRPC allows you to stream stuff up and down</li>
            </ul>
          </li>
          <li>Very good for primarily mobile client on cloud-based backend!
            <ul>
              <li>Then if you need HTTP later you can pull out what you need</li>
            </ul>
          </li>
          <li>Google’s woe: reduce resource load because HTTP is freaking noisy</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Exchanging <em>Resources</em>
    <ul>
      <li>HTTP 1.0 - 2000</li>
      <li>Now, message should be a document that lives at a location</li>
      <li><em>Resource</em> based (URIs)
        <ul>
          <li>Can have different representations of resources (HTML, etc.)</li>
          <li>To have a different representation, you put it in a header, in the
query string, or as a URL file extension</li>
          <li>Blahblah</li>
        </ul>
      </li>
      <li><em>Semantic web</em>: failed attempt at stuff</li>
      <li>REST - 2005</li>
      <li>HATEOAS - 2010
        <ul>
          <li>Other URIs should be embedded in the response that help the client
do the next thing</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Querying <em>Graphs</em></li>
  <li>GraphQL - mid-2010s
    <ul>
      <li>Facebook time</li>
      <li>Problem: client code needs to know about a crap ton of different
endpoints to render a simple UI; round-trips, different formats
        <ul>
          <li>But the killer: different clients may have different needs for
the same endpoint, you end up with a monster response but each
client only uses a part of it</li>
          <li>New clients like the watch, ayyah</li>
        </ul>
      </li>
      <li>Database engines get queries that include a projection (the
properties of the object you want, i.e. SELECT *)</li>
      <li>GraphQL is like this, for the web</li>
      <li>GraphQL allows client to specify exactly what it wants from your
backend database, which is represented as a graph</li>
      <li>Why not adopt this right away? You don’t have Facebook’s problems</li>
      <li>Also kinda immature, stuff like caching isn’t super clear</li>
    </ul>
  </li>
</ul>

<h3 id="9---the-web-call-interfaces-formats-and-protocols">9 - The web: call interfaces, formats, and protocols</h3>

<h4 id="lecture-8">Lecture</h4>

<ul>
  <li>Web web web</li>
  <li>Future:
    <ul>
      <li>WebRTC
        <ul>
          <li>I/O, networking</li>
          <li>At first, no way to make network request without requesting new
page
            <ul>
              <li>2003: introduce XMLHttpRequest (never actually used XML!)</li>
            </ul>
          </li>
          <li>WebSockets: message-based server push
            <ul>
              <li>Can’t have raw TCP because then client can issue arbitrary
network requests through that socket, port scan</li>
            </ul>
          </li>
          <li>WebRTC time</li>
          <li>Combines audio/video/text in one :/</li>
          <li>Still getting there</li>
        </ul>
      </li>
      <li>WebAssembly
        <ul>
          <li>Based on asm.js</li>
          <li>Take existing C/C++ programs, compile into web bytecode/asm, then
browser compiles that into local hardware ASM, then it runs</li>
          <li>Right now it has to run in isolation, may change in the future</li>
        </ul>
      </li>
      <li>WebGL
        <ul>
          <li>
            <h2 id="gpu-stuff">GPU stuff</h2>
          </li>
        </ul>
      </li>
      <li>Beaker</li>
    </ul>
  </li>
  <li>Bad stuff
    <ul>
      <li>Didn’t accomplish original goals</li>
      <li>Ayyah</li>
      <li>Text-based :/</li>
      <li>Cross browser compatibility</li>
      <li>Performance</li>
      <li>Lagging platform integration</li>
    </ul>
  </li>
  <li>Good stuff
    <ul>
      <li>Deployment for web is great! Can have users using your just-written
software within seconds!</li>
      <li>Multi-platform</li>
      <li>Security model
        <ul>
          <li>It’s built-in; web is designed for documents, and documents
should never be able to <code class="language-plaintext highlighter-rouge">rm -rf /</code></li>
          <li><em>Sandboxed</em></li>
          <li>End-to-end encryption</li>
        </ul>
      </li>
      <li>Open source on the client (you can still maintain software if
companies go out of business)</li>
    </ul>
  </li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2017/03/26/bradfield-apis/</guid>
                <description>
                    
                    Lecture notes from Bradfield's APIs class
                    
                </description>
                <pubDate>Sun, 26 Mar 2017 00:00:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Problem Solving with Algorithms and Data Structures</title>
                <link>http://tigerthinks.com/2017/03/26/bradfield-algorithms/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="notes">Notes</h2>

<h3 id="1-introduction-to-technical-problem-solving-and-analysis">1: Introduction to technical problem solving and analysis</h3>

<h4 id="prework-hammock-driven-development-talk-by-rich-hickey">Prework: Hammock Driven Development (talk by Rich Hickey)</h4>

<ul>
  <li>Time for hard thinking is critical</li>
  <li>Solve problems! Don’t just write features</li>
  <li>Users can specify problems, but not answers :)</li>
  <li>
    <p>Gotta practice problem solving to get good at it</p>
  </li>
  <li>First, state the problem (write it, say it please)</li>
  <li>Understand the problem. What do you know? What don’t you know? Are
there related problems? What are the solutions to those?
    <ul>
      <li>More input-&gt;Better Output. Get domain knowledge. When you come across
other solutions, criticize them!</li>
    </ul>
  </li>
  <li>Plan</li>
  <li>Execute</li>
  <li>Tradeoffs: must look at two or more possible solutions before you can
talk about tradeoffs!</li>
  <li>Focus: get away from da computer boss. Recognize that focus itself is
a tradeoff, and you’ll drop the ball on some stuff</li>
  <li>Two parts of the brain for this
    <ul>
      <li>Waking mind is good at critical thinking. However, not good for
thinking outside the box (only finds local maxima). Should be used
to feed work to the background mind</li>
      <li>Background mind is good at synthesis, connection, strategy, etc.
Happens during sleeping mostly. Solves non-trivial problems creatively,
finding hidden relations and stuff</li>
    </ul>
  </li>
  <li>Still need to use silly brain to figure stuff out. Can only load some stuff
in the brain, need to write other stuff down</li>
  <li>Now get back to the hammock and meditate on your solution</li>
  <li>Don’t go crazy working on different things each day, but different
projects over the course of months is fine</li>
</ul>

<h4 id="lecture">Lecture</h4>

<ul>
  <li>SOLVE THE SUBPROBLEM</li>
</ul>

<h3 id="2-stacks-queues-lists">2: Stacks, Queues, Lists</h3>

<ul>
  <li><em>linear data strucutres</em> means that when an item is added it stays in
the same position relative to its neighbors
    <ul>
      <li>distinguished by where additions and removals may occur</li>
    </ul>
  </li>
</ul>

<h4 id="stacks">Stacks</h4>

<ul>
  <li>Insertion order is reverse of removal order</li>
  <li>Can add or remove from top, other end is base</li>
  <li>Definitions
    <ul>
      <li>Abstract Data Type (ADT) - logical description of view of data,
regardless of implementation. Hides implementation details and
encapsulates data (“information hiding”)</li>
      <li>Data structure is an actual implementation of an abstract data type</li>
    </ul>
  </li>
</ul>

<h4 id="queues">Queues</h4>

<ul>
  <li>First in first out. Insertion happens at the rear, removal happens at
the front</li>
</ul>

<h4 id="deques">Deques</h4>

<ul>
  <li>Pronounced like deck</li>
  <li>Combined queue + stack, can add + remove from rear and front in O(1)
time</li>
</ul>

<h4 id="lists">Lists</h4>

<ul>
  <li>Pretty ez? Linked list, double linked list. Each node has a value and
a next. Skim skim</li>
</ul>

<h4 id="searching">Searching</h4>

<ul>
  <li>Pretty straightforward, can probably skim most of this</li>
  <li>Sequential search zzz, just look through list. Ordering list improves
average case when item is not in list because you can fail fast but
not much else</li>
  <li>Binary search on an ordered list is gucci. BUT in real world must
always consider whether or not it’s practical to sort first; doing a
sequential search may beat sort then binary if you’re only going to do
one search, for example</li>
</ul>

<h3 id="3-trees-tree-traversal-and-priority-queues">3: Trees, tree traversal, and priority queues</h3>

<h4 id="trees">Trees</h4>

<ul>
  <li>Hierarchical relationships :)</li>
  <li>Based on real trees :) root, branches, leaves</li>
  <li>Properties of trees:
    <ul>
      <li>Can be followed top to bottom getting more specific each time</li>
      <li>Each leaf is independent of others</li>
      <li>Each leaf is unique</li>
      <li>Sections can be moved around without affecting lower levels</li>
    </ul>
  </li>
  <li>Definitions
    <ul>
      <li><em>Node</em>: a “piece” of the tree. Generally contains information,
referred to as payload</li>
      <li><em>Edge</em>: connects two nodes to show a relationship. Each node except
root has one and only one incoming edge, one node can have many
outgoing edges</li>
      <li><em>Root</em>: top node of tree, no incoming edges</li>
      <li><em>Path</em>: ordered list of nodes connected by edges</li>
      <li><em>Children</em>: set of nodes that have incoming edges originating at a
given node are the given node’s children</li>
      <li><em>Parent</em>: the node from which the incoming of our node originated
from</li>
      <li><em>Sibling</em>: Children with same parent are siblings (What if same
level of nesting, diff parents?)</li>
      <li><em>Leaf Node</em>: node with no children</li>
      <li><em>Level</em>: level <em>n</em> is the number of edges on path from root node to
<em>n</em>. Root node’s level is 0</li>
      <li><em>Height</em>: Maximum level of any node in tree</li>
    </ul>
  </li>
  <li>Two definitions for a tree
    <ul>
      <li>Set of nodes and edges that connect pairs of nodes. One node is the
root, every other node is connected by an edge from exactly one
other node (its parent), there’s a unique path from root to each node</li>
      <li>Either empty or has a root and zero or more subtrees, each of which
is a tree itself. Root of each subtree is connected to the main root
by an edge</li>
    </ul>
  </li>
  <li>Can be represented by “nodes and references”, but that’s tougher.
Dictionaries and lists are okay for us
    <ul>
      <li>Nodes and references: tree made up of Node classes. Each Node has
value, left, and right, where left and right are either empty or
point to another node</li>
      <li>List of lists: list of triplets, where index 0 is value, index 1 is
the left node, and index 2 is the right node</li>
      <li>Dictionary representation with keys and values is preferred though
because it’s more readable and easier to see the tree-like structure</li>
    </ul>
  </li>
  <li>Let’s look at building and traversing parse trees for simple math</li>
  <li>Building a tree we may need to traverse back up to the parent to
continue. Use a stack for this, pushing and popping the parent on the
stack</li>
  <li>
    <p>After building parse tree, we can walk it recursively to evaluate each
sub expression and then bubble all the way back up to the root</p>
  </li>
  <li>Traversal!</li>
  <li>preorder, inorder, and postorder
    <ul>
      <li>preorder: visit root first, then recursively pre-order traverse the
left subtree, then pre-order traverse the right subtree</li>
      <li>inorder: recursively indorder traverse the left subtree, then visit
root node, then recursively inorder traverse the right subtree</li>
      <li>postorder: recursively postorder traverse the left tree, postorder
traverse the right tree, then visit the node</li>
      <li>Difference is just when you evaluate and order of traversal</li>
    </ul>
  </li>
  <li>Priority queue is like a queue except highest priority (not first in)
is popped off first
    <ul>
      <li>Can be implemented with sorting and lists, but that doesn’t give us
the best time complexity operations. Better to do da binary heap.
O(logn) enqueueing and dequeueing</li>
    </ul>
  </li>
  <li>Two types of binary heap
    <ul>
      <li>Min heap where smallest key at front</li>
      <li>Max heap where largest key at front</li>
    </ul>
  </li>
  <li>All based on maintaining the <em>heap order property</em>: in a heap, for
every node x with parent p, the key in p is smaller than or equal to
the key in x. Whew</li>
  <li>Heap structure property, Complete tree property, ??</li>
  <li>Start binary heap with a 0 at the first index so that you can begin
adding elements. This zero is not used</li>
  <li>When adding a leaf to the heap binary heap, if it’s smaller larger than its
parent, swap it with its parent. Keep going until it’s larger than its
parent
    <ul>
      <li>PARENT OF CURRENT NODE IS ALWAYS CURRENT INDEX OF NODE DIVIDED BY 2</li>
      <li>percolate_up() is done to reset all dem nodes</li>
    </ul>
  </li>
  <li>So to insert an item, append to items and then percolate</li>
  <li>Delete min returns the minimum value item and returns it (remember,
this is a min heap)
    <ul>
      <li>First we take the top guy and pop it off, then move from the end of
the array to the beginning. Then we have to percolate all da way
back down</li>
    </ul>
  </li>
  <li>Build a heap from list of keys by starting with the entire list and
percolating over and over :thinking_face:</li>
  <li>
    <p>Use case: prioritize customer support requests from users of different
access/VIP-ness levels</p>
  </li>
  <li>Binary search tree time</li>
  <li>Map ADT has operations on key value pairs :)</li>
  <li><em>BST Property</em>: keys less than the parent are found in the left
subtree and keys that are greater than the parent are found in the
right subtree
    <ul>
      <li>Means always O(logn) to search or insert in binary search tree</li>
    </ul>
  </li>
  <li>Need to consider self rotation and whatnot. Hard problems but have
been solved :)</li>
  <li>Implement using nodes an references.<code class="language-plaintext highlighter-rouge">TreeNode</code> has the lower level
logic, <code class="language-plaintext highlighter-rouge">BinarySearchTree</code> has a reference to the root node and is the
interface the user interacts with</li>
  <li>TreeNode must keep track of parent for deletion purposes, so that its
children can come attached to parent
    <ul>
      <li>yield/<strong>iter</strong>/generator sugar for fun stuff</li>
      <li>When you do ‘for elem in TreeNode’ it returns left all in a row then
itself then right all in a row</li>
    </ul>
  </li>
  <li>Now the actual map interface</li>
  <li>How to put something?
    <ul>
      <li>Start at root, search and compare new key to key in current node. If
new key is less than current node, search left side and if new key
is greater search right side</li>
      <li>If there is no left/right child to search, we found the right spot
for the node. Cool beans</li>
      <li>Rip duplicate handling. Probably best to just have new value replace
old value instead of trying to resolve both</li>
    </ul>
  </li>
  <li>How to get something?
    <ul>
      <li>Search tree recursively until there’s a non-matching leaf node or we
found the thingy we want</li>
      <li>Python calls <strong>getitem</strong> under the hood for you when you do
dictionary lookup</li>
    </ul>
  </li>
  <li>Deletions?
    <ul>
      <li>Start off same as before, traverse tree until you find the node with
the key you want (raise error if not found)</li>
      <li>If node has no kids, easy, just remove the reference to this node in
the parent</li>
      <li>If node has one kid, couple steps. Need to promote the kid to the
parent
        <ul>
          <li>If current node is a left child itself, update parent reference of
left child to point to parent of current node, then update parent.left
to point to the left child</li>
          <li>If current node is a right child, do the inverse of the above</li>
          <li>If current node is a root node, call <code class="language-plaintext highlighter-rouge">replace_node_data()</code> with
the data from the promoted node</li>
        </ul>
      </li>
      <li>If node has two kids, we must find the <code class="language-plaintext highlighter-rouge">successor</code> (node that will
preserve the BST property). This will be the next-largest key in the
tree
        <ul>
          <li>Successor guaranteed to have one or fewer kids because it’s the
next largest, sooo it can’t have a left subtree</li>
          <li>Find successor with <code class="language-plaintext highlighter-rouge">self.right.find_min()</code></li>
          <li>If you have no right subtree, you find your parent’s successor and
use that insteaderino</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Analyze a BST
    <ul>
      <li>Insertion is log base 2 of n in a balanced tree</li>
      <li>Everything is! Worst case is searching every level of the tree, which
is log base 2 of n</li>
    </ul>
  </li>
  <li>AVL Trees</li>
  <li>Basically keeps the tree balanced using a balance factor (height of
left subtree - height of right subtree)
    <ul>
      <li>If balance factor becomes -1 or 1, do a tree rotation. This is
constant time so we gucci</li>
      <li>Balance factor &gt; 0 is LEFT HEAVY, balance factor &lt; 0 is RIGHT HEAVY</li>
      <li>Fancy math derivations shows that at any time the height of AVL tree
is 1.44 times log of number of nodes in the tree. Proves that search
is O(log N)</li>
    </ul>
  </li>
  <li>Implement by keeping a balance factor for each node/subtree
    <ul>
      <li>If a node is added to the right, balance factor of parent is -1; +1
if added to the left</li>
      <li>Once a parent balance factor is zero, all ancestors don’t change any
more. Cool</li>
      <li>How to update balance? If current node is out of balance, just
rebalance self and you’re done</li>
      <li>Otherwise increment parent balance factor and gogo</li>
    </ul>
  </li>
  <li>There’s some trickiness where you have a tree that is still unbalanced
after rotating (e.g. it zigzags)
    <ul>
      <li>To correct: if subtree needs left rotation to balance it, first
check balance of right child. If right child is left heavy then do a
right rotation on right child before doing your originally intended left
rotation</li>
      <li>Do opposite for if subtree needs right rotation</li>
    </ul>
  </li>
</ul>

<h4 id="lecture-1">Lecture</h4>

<ul>
  <li>Hashing</li>
  <li>Hashing algorithm that takes keys and produces index in a finite space
(e.g. convert to ASCII and modulo 10)</li>
  <li>We’ve got collisions when we try to hash keys to a finite space when
two things point to the same space
    <ul>
      <li>Can do <em>chaining</em> which will put pointers in your finite space and
then those pointers would point to a linked list
        <ul>
          <li>Each node of the linked list stores the original key, so that
multiple keys that hash to the same value can be resolved still</li>
        </ul>
      </li>
      <li>Other way is open addressing</li>
    </ul>
  </li>
  <li>In a hashing function you want to make entropy high so you get good
even distribution
    <ul>
      <li>Commonly, take first 4 bytes of a key and xor them all against each
other. Use xor instead of and/or because truth table is balanced</li>
    </ul>
  </li>
  <li>Check out Ruby hashing conversation</li>
  <li>Results in a super nice API but a nightmare behind the scenes :)</li>
  <li>Implement a little hash map if you get time</li>
  <li>Load factor is 6/11 if 6 out of 11 spots in your hash table are filled</li>
  <li><em>perfect hash function</em> maps each item to a unique slot; only possible
if we know all the inputs in the collection and that they will never
change</li>
  <li>“Folding” is breaking up the key into parts (e.g. “asdfasd” broken
into “as” “df” “as” “d”) and then performing a function on it</li>
  <li>Collusion resolition boys
    <ul>
      <li>Open addressing: find an open address!
        <ul>
          <li>Linear probing just looks sequentially for the first open slot</li>
          <li>Can do a “plus 3” probe too that searches every third
thingymabobber</li>
        </ul>
      </li>
      <li>This process of computing a new place for the key to resolve
collision is <em>rehashing</em>.</li>
    </ul>
  </li>
  <li>Also chaining, described above</li>
  <li>
    <p>What’s the time complexity of these operations? Depends on the load
factor!</p>
  </li>
  <li>Lots of things are trees!</li>
  <li>If there isn’t defined hierarchy, it’s a graph :)</li>
  <li>Forest traversal is just lots of trees</li>
  <li>Depth first vs. Breadth first stuff</li>
  <li>Using a stack, if you start at the root, pop, then push children,
and recurse, you’ve done a depth first traversal</li>
  <li>If you use a queue you do a breadth first traversal!
    <ul>
      <li>Both can be recursive!</li>
    </ul>
  </li>
  <li>When use DFS vs when use BFS?
    <ul>
      <li>If going through everything it doesn’t matter</li>
      <li>If you can terminate early based on your choice, that’s a better one</li>
      <li>If you want to find the X closest to the root use BFS, or like the
shortest way to get somewhere</li>
    </ul>
  </li>
  <li>In AI: need to model all the states and check all of them
    <ul>
      <li>e.g. How do you find da bes tic tac toe move</li>
      <li>For tic tac toe you can build out a game tree and see whats up</li>
    </ul>
  </li>
  <li>Brute force sudoku: strategy called backtracking where you keep
“building” the board that you’re traversing to, and then you go back
once you hit an impossible point
    <ul>
      <li>If you want to find if you have any paths &gt; 10 use DFS</li>
    </ul>
  </li>
  <li>
    <p>Branching factor is “average” number of children for each node (binary
tree has branching factor of 2)</p>
  </li>
  <li>Binary Search Tree</li>
  <li>Need to keep ‘em self balancing dawg
    <ul>
      <li>Check out red black trees</li>
    </ul>
  </li>
  <li>B-Trees in database indices
    <ul>
      <li>Bunch of information packed into each node</li>
      <li>Now each child of the “chunk” of info in each node is just a
subsection</li>
      <li>Ends up being very stumpy</li>
    </ul>
  </li>
</ul>

<h3 id="4-graphs">4: Graphs</h3>

<h4 id="graphs">Graphs!</h4>

<ul>
  <li><em>Vertex</em> or node is the fundamental building block. Can have a payload</li>
  <li><em>Edge</em> is the fundamental connector. Connects two vertices to show a
relationship. If one-way, it’s a directed graph (digraph); if two-way,
just a graph</li>
  <li><em>Weight</em>: edges can be weighted to show the cost of going from one
vertex to another. How expensive to traverse</li>
  <li>Graph made up of vertices and edges. Each edge is made up of (v, w)
tuple where v and w are vertices, and possibly a weight as well</li>
  <li><em>Path</em> is sequence of vertices that can be traversed directly</li>
  <li>
    <p><em>Cycle</em> is a path that starts and ends at same vertex. Graph with no
cycles is <em>acyclic</em>. Digraph with no cycles is <em>directed acyclic</em>.
This will be important</p>
  </li>
  <li>How to represent a graph?</li>
  <li>Adjacency matrix
    <ul>
      <li>Just a 2d matrix with all vertices on both sides, and intersections
with vertices filled in with weights</li>
      <li>Results in sparse data, which is no bueno because matrix operations
are expensive</li>
      <li>Only good for when number of edges is large relative to number of
vertices</li>
    </ul>
  </li>
  <li>Adjacency “list” (bad name) (most intuitive and flexible)
    <ul>
      <li>Keep a master collection of all vertices, and then each of those
vertices maintains a list of other vertices that it connects to (and
the weights of the connection). Cool got it. List of connections is
<code class="language-plaintext highlighter-rouge">neighbors</code></li>
      <li>We can compactly represent a sparse graph :)</li>
      <li>Also lets you easily find all links directly connected to particular</li>
      <li>Can be represented as just a dictionary and you can interact with it
directly. Cool. Demonstration purposes of wrapping Vertex and Graph
classes was helpful though</li>
    </ul>
  </li>
  <li>Word ladder</li>
  <li>Get from one word to another by swapping one letter at a time; each
intermediate must also be a word</li>
  <li>Can represent relationships between all words as a graph, then use
breadth first search to find the quickest path from start to end</li>
  <li>Process for creating graph: Start with your word. “Wild card” one
letter at a time, plug in all possibilities for that letter, and if
you do this for all letters in the word you have the list of all words
that are one letter away. This is the word’s “bucket”. See
<code class="language-plaintext highlighter-rouge">word_ladder.py</code></li>
  <li>Okay let’s do a breadth first search</li>
  <li>Starting at vertex s, breadth first search first goes to all vertices
with an edge from x. Then goes out from those to the next level.
Visualize it as building a tree, one level at a time, where height of
tree is distance from starting point</li>
  <li>Use a set to keep a record of which vertices have been visited already</li>
  <li>Use a queue to contain the paths from our starting vertex that have
been processed already</li>
  <li>Process
    <ul>
      <li>Pop a path from our queue to explore</li>
      <li>Retrieve the last vertex visited from that path</li>
      <li>Retrieve neighbors from graph</li>
      <li>Remove vertices that have been visited already</li>
      <li>For each of the remaining neighbors, add the vertex to visited and
add a path consisting of the path so far plus the vertex</li>
    </ul>
  </li>
  <li>Visualization in the book</li>
  <li>
    <p>Run time performance is O(V + E) where V is number of vertices in
graph and E is number of edges</p>
  </li>
  <li>Knight’s Tour</li>
  <li>Heuristics wow</li>
  <li>
    <p>Why does this have such an improvement</p>
  </li>
  <li>General depth first search goal is to connect as many nodes in the
graph as possible and search as deeply as possible</li>
  <li>Can create multiple trees. Group of trees is a <em>depth first forest</em></li>
  <li>To produce a forest just DFS from all vertices</li>
  <li>
    <p>If you track the discovery and finish times of a depth first search,
you see the <em>parenthesis property</em>: all children of a node have a
later discovery time and earlier finish time than their parent</p>
  </li>
  <li>Top sort!</li>
  <li>Pancake recipe instructions: stuff needs to be done with dependencies,
is there a best way to do it?</li>
  <li>Top sort takes a DAG and produces a linear ordering of all of its
vertices such that you always do the dependencies of a vertex before
the vertex itself. Indicated precedence of events</li>
  <li>Adaptation of depth first search</li>
  <li>First, do a depth first search to compute finish times</li>
  <li>Store the vertices in a list in decreasing order of finish time</li>
  <li>
    <p>Return ordered list as result of topo sort. Wowza</p>
  </li>
  <li>Dijkstra’s Algorithm to find shortest path :)</li>
  <li>Example of routers directing internet traffic. Can be represented as
weighted graph</li>
  <li>Want to find the path with the smallest total weight to route a
message</li>
  <li>Algorithm is Dijkstra’s Algo</li>
  <li>Iterative. Similar to breadth first search</li>
  <li>Use priority queue to arrange “next move”s according to total distance
from start. Always dequeue the lowest total distance and move
accordingly</li>
  <li>Wut da furq</li>
  <li>Ok cool</li>
  <li>
    <p>Need to implement</p>
  </li>
  <li>Strongly Connected Components</li>
  <li>Let’s think about very big graphs (web pages, etc.)</li>
  <li>By looking at the graph of links to and from a site you can get an
idea of how to categorize things on the web and such</li>
  <li>Strongly Connected Component is the largest subset of vertices such
that we can go to any other vertex from any vertex in the SCC</li>
  <li><em>transpose</em> of a graph is the graph where all of the edges have
been reversed (i.e. edge from node A-&gt;B becomes edge from B-&gt;A)</li>
  <li>To get the SCC for a graph:
    <ul>
      <li>Perform DFS for the graph to compute finish times for each vertex</li>
      <li>Compute the transpose</li>
      <li>Perform DFS of the transpose but explore each vertex in <em>decreasing
order</em> of finish time from first step</li>
      <li>Each tree in the forest computed in step 3 is an SCC. Output vertex
id’s for each vertex in each tree in the forest to identify the
component</li>
    </ul>
  </li>
  <li>
    <p>Cool, must implement</p>
  </li>
  <li>Prim’s spanning tree algo</li>
  <li>Problem: need to broadcast to everyone on a graph</li>
  <li>e.g. broadcast host needs to hit every listener to get all of the
sound data out</li>
  <li>Brute force: just send one copy of the data to each listener. Need to
send n copies for n listeners.  Routers see extra, unbalanced traffic</li>
  <li>Uncontrolled flooding: each msg starts with a time to live value set
to a number &gt;= number of edges b/t broadcaster and furthest listener.
Each router receives message and passes to all neighbors. When message
is passed, ttl decreased, messages keep getting sent until ttl reaches
    <ol>
      <li>Way more messages than is necessary</li>
    </ol>
  </li>
  <li>Solution involves constructing a minimum weight <em>spanning tree</em></li>
  <li>This is an acyclic subset of original graph that connects all
vertices. Sum of weights of edges in the spanning tree is minimized</li>
  <li>So now, one copy of message gets sent, and each router just forwards
it to other routers who are a part of the min spanning tree. This
minimizes message passing and every listener still gets the message</li>
  <li>Prim’s algorithm is “greedy”, since it chooses the cheapest next step
at every step
    <ul>
      <li>In this case, follow edge with lowest weight</li>
    </ul>
  </li>
  <li>While T is not yet a spanning tree, find an edge that is safe to add
to the tree and add it :)
    <ul>
      <li>Safe edge is any one that connects a vertex that is in the spanning
tree to one that is not in the spanning tree</li>
      <li>Assures no cycles</li>
    </ul>
  </li>
  <li>Cool beanss</li>
</ul>

<h4 id="lecture-2">Lecture</h4>

<ul>
  <li>
    <p>Implement breadth first search for pancake problem</p>
  </li>
  <li>Weighted nodes</li>
  <li>Uniform cost search/Djykstra is the same as BFS but using a priority
queue
    <ul>
      <li>The stuff you enqueue and dequeue is the total length</li>
    </ul>
  </li>
  <li>Strongly connected component means you can get to any node from any
node
    <ul>
      <li>Clique means everything is connected to everything</li>
    </ul>
  </li>
  <li>Topological sorting is finding the most efficient way thru a DAG
    <ul>
      <li>Put stuff into a stack to go through</li>
    </ul>
  </li>
  <li>Min spanning trees
    <ul>
      <li>What means? Connect everything in the least amount of space</li>
    </ul>
  </li>
  <li>Take shortest edge connected to ur stuff. Cool</li>
</ul>

<h3 id="5-recursion">5: Recursion</h3>

<ul>
  <li>Compute sum of a list of numbers. How do without a loop?</li>
  <li>Imagine it’s parenthesized. Can evaluate each subexpression and bubble
up</li>
  <li>Recursion: call yo self</li>
  <li>
    <p>Nice</p>
  </li>
  <li>Three laws</li>
  <li>Must have a base case</li>
  <li>Must change state and move towards base case</li>
  <li>Must call itself recursively</li>
  <li>
    <p>Nice to see it broken down like this</p>
  </li>
  <li>Example of converting int to string representation in another base</li>
  <li>
    <p>Example of Tower of Hanoi. Cool</p>
  </li>
  <li>Dynamic Programming: solve subproblems just once</li>
  <li>When a problem has overlapping subproblems, dynamic programming is
better than recursion to avoid recomputation</li>
  <li>Avoid redundant calls!</li>
  <li>“Bottom up” counterpart to recursion</li>
  <li>Fibonacci example: straightforward dynamic solution</li>
  <li>
    <p>Lattice traversal example k cool</p>
  </li>
  <li>Tail call optimization uses recursive syntax to do iterative action</li>
</ul>

<h3 id="6-np-completeness">6: NP-Completeness</h3>

<h4 id="lecture-23-skiena">Lecture 23 Skiena</h4>

<ul>
  <li>When you can’t find fast algorithm: can either say “I can’t find a
good solution”, “there is no fast algorithm” (lower bound proof), “I
can’t solve it but no one else in the world can” (NP-completeness
reduction)</li>
  <li>Lots of problems that can’t be solved! Theory of NP-Completeness says
that all of these problems are related. If you can prove your problem
is NP-hard, you good :)</li>
  <li>Main idea!! If you translate from instances of one type of problem to
instances of another type such that answers are preserved is called a
reduction.
    <ul>
      <li>Isomorphic: same thing in different forms</li>
      <li>If there is no fast way of solving a problem, then there is no fast
way of solving the reduction either wtf</li>
    </ul>
  </li>
  <li>For the purpose of proving hardness, take a problem we know is hard
and reduce our problem into that problem</li>
  <li>Couple of definitions</li>
  <li><em>Problem</em>: general question, with parameters for the input and
conditions on what is a satisfactory answer or solution. Must be
specific! E.g. traveling salesman problem: given a weighted graph G,
what tour {v1, v2, …vn} minimizes sum of edge weights on the tour</li>
  <li><em>Instance</em>: input to a problem with the input parameters specified.
E.g. weighted graph is an instance of the traveling salesman problem</li>
  <li><em>Decision problem</em>: answer restricted to “yes” or “no”. Most
interesting optimization problems can be phrased as decision problems.
Easier to think about things this way since fewer cases to deal with.
For traveling salesman: given a weighted graph G and integer k, does
there exist a traveling salesman tour with cost &lt;= k? Now a yes-no
problem. Now can binary search around k, to narrow down the actual
answer</li>
  <li><em>Satisfiability</em>: logic problem. Given: a set V of boolean variables
and a set of clauses C over V. Does there exist a satisfying truth
assignment for C? wtf
    <ul>
      <li>Some things are not satisfiable!</li>
    </ul>
  </li>
</ul>

<h4 id="lecture-3">Lecture</h4>

<ul>
  <li>Why do we think np-complete problems are unsolvable? Because they are
all reductions of one another and none have polynomial solutions</li>
  <li>P = NP: Polynomial = Non-polynomial</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2017/03/26/bradfield-algorithms/</guid>
                <description>
                    
                    Lecture notes from Bradfield's algorithms class
                    
                </description>
                <pubDate>Sun, 26 Mar 2017 00:00:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>How I Got Full-Time Software Development Work at 16</title>
                <link>http://tigerthinks.com/2015/11/16/how-i-got-full-time-software-development-work-at-16/</link>
                <content:encoded>
                    <![CDATA[
                    <p><em>This post was also published on <a href="https://medium.com/breaking-into-startups/how-i-got-full-time-software-development-work-at-16-78b2ae5cca09&quot;">Medium</a></em></p>

<p>This is how I got a full-time software development job right after high school.</p>

<p>Last March, I started to look for a summer internship. I wasn’t a college
student like most other applicants, but I’d been programming 40 hours a week for
two years and already completed an internship. That had to be worth <em>something</em>.
So, I applied to 25 positions online with my resume and a short, individualized
cover letter.</p>

<p>Initial returns were nonexistent. Three weeks passed, and I didn’t hear back
from anyone. Two companies eventually replied, but once they found out I was
still in high school, they dropped off.</p>

<p>Not knowing any better, I did another round of online applications. This time,
one company expressed interest.</p>

<p>I lucked out by getting a problem I’d seen before (find the number at a given
spot in the Fibonacci sequence) in their technical phone screen (most technical
interview processes I went through resemble the one described
<a href="https://www.quora.com/What-is-the-interview-process-like-at-Google">here</a>). It
wasn’t pretty, but I must have done well enough, because a week later they
invited me to an onsite interview.</p>

<p>My first session was “soft” — just a chat about my previous experience. It was
straightforward, until my interviewer found out I was a high schooler. This
threw up red flags, but they decided to continue with my interviews anyway.</p>

<p>The next session was pair programming, during which I worked with a developer
from their company to implement a small feature. I didn’t make any glaring
mistakes, but being a new experience for me, it was hard to tell exactly how
well I did.</p>

<p>Over the next few weeks, I got to several more technical phone screens and one
onsite interview, none of which led anywhere.</p>

<p>One of the conversations I had during this time was pretty interesting. I was on
the phone with a CEO about opportunities at his company when he found out was
still in high school. He immediately went into a rant about college as a waste
of time and money — <em>“I didn’t learn anything at university except for how to
cheat on tests!! I would’ve rather washed dishes for five years!”</em>. It was a
scene straight out of <em>Silicon Valley.</em></p>

<div class="videoWrapper"><iframe width="560" height="315" src="https://www.youtube.com/embed/O4seubKdRs4" frameborder="0" allowfullscreen=""></iframe></div>

<p>I’d almost forgotten about that first company who’d interviewed me when their VP
of Talent called three weeks later… to offer me a full-time position.</p>

<p>This is roughly what went through my head:</p>

<ul>
  <li>Confusion: …did I hear that right? I don’t even have any internship offers!</li>
  <li>Elation: wait a second. A <em>full-time job</em>?</li>
  <li>Self-doubt: these guys are way smarter and better than me. Taking this position
would be setting myself up for failure.</li>
  <li>Conflict: the salary is low for a programmer…but I’m only 16, so it’s way better
than other jobs I could get…</li>
</ul>

<p>I didn’t graduate for another two months, so nothing needed to be decided
immediately. They agreed, so I continued my job search, now with a fallback
plan.</p>

<p>Receiving a full-time offer gave me a big boost, helping me interact more
confidently with other companies and interviewers. I wanted to jump in,
contribute, make some mistakes, and learn a ton. I just needed to find somewhere
where I could do so. At this point, two things stood in my way: my lack of
formal education and my age.</p>

<p>A college degree shows a certain level of competence as a human being. Diplomas
are not as ubiquitous in the tech industry as elsewhere, but many companies
still wouldn’t talk to me because I couldn’t show them one. Not much I could do
here.</p>

<p><img src="https://cdn-images-1.medium.com/max/1600/0*6b3qcWNn6-uS9e-S." alt="rejection1" />
<img src="https://cdn-images-1.medium.com/max/1600/0*-AJNRYIK5W9XcVtq." alt="rejection2" /></p>

<p>The bigger problem, and a recurring theme during this process, was my age.
People without computer science degrees get programming jobs all the time, but
most are a decade older than me, or have a different degree. This was the
hardest barrier to break. 90% of rejections I received had nothing to do with
knowledge or skill, but rather how long I’d been alive. At the risk of sounding
ungrateful, I would also say that offers I did get were noticeably lower than
the market rate for someone with my skills, and it’s not hard to trace that back
to my age as well. In Silicon Valley’s “meritocracy”, this was discouraging.</p>

<p>Around this time, I also signed up for <a href="http://www.hired.com/">Hired</a>. Once I
passed their approval process, a talent advocate reached out to help me with my
job search. He encouraged me to use my unique situation to write a bio that
would stand out.</p>

<p>So, it was time to make my age and lack of experience look <em>good</em> somehow.
Here’s what I put down.</p>

<p><img src="https://cdn-images-1.medium.com/max/1600/0*GxJb6ShPFCb4s_6J." alt="application_text" /></p>

<p>Instead of a scared high schooler looking for a handout and trying to hide the
holes in my resume, I was a savvy, energetic, talented young engineer, and
startups could get on board with that.</p>

<p>I also began preparing for interviews with
<a href="http://interviewing.io/">interviewing.io</a>. Instead of interacting with
interviewers who were just trying to get things over with and head back to work,
the people on the other side of the phone here wanted to help me improve. The
advice I received during these sessions was invaluable.</p>

<p>The next full-time offer I received was at a medium-sized startup, for $30,000
more than my first one. I was blown away.</p>

<p>The team was structured with more senior developers than juniors, which would
give me abundant opportunities for mentorship. The salary was, evidently, as
good as I had seen. On the surface, it seemed like everything I was looking for.</p>

<p>The problem was that the offer was exploding; the company made it on Thursday
and gave me three days to answer. Enough smart people had spoken <a href="http://blog.ycombinator.com/exploding-offers-suck">against
exploding offers</a> to make me
think twice. When I asked them why we were on such a strict timeline, I was told
“it’s an industry standard, look it up”, and that didn’t go too well with me.</p>

<p>However, this time I was even more unsure if I could get a better offer
elsewhere. Letting this one explode could be something I regretted for a long
time.</p>

<p>I ended up using the tactic described
<a href="http://www.quora.com/Should-I-accept-a-job-offer-from-Facebook-Google-Linkedin-or-Square/answer/David-Tan-4">here</a>
to make a decision, but with a coin flip instead of a dice roll. I watched the
deadline pass, got to bed, woke up, went to Disneyland, and never heard from the
company again.</p>

<hr />

<p>A few more weeks passed, and I had scrapped for another two offers. I was close
to graduating and feeling a bit burnt out, so I wanted to get things over with
and decide between them. On paper, both were worse than the one I’d let go (but
much better than the first one I received).</p>

<p>As I weighed my options, a recruiter from Braintree reached out to me on Hired.
I told him that I would hear him out, but made sure to let him know I already
had two good offers on the table.</p>

<p>Things got interesting when he began describing their <a href="https://www.braintreepayments.com/blog/how-braintree-interviews-exceptional-developers/">interview
process</a>.
It was light on algorithms and heavy on practical skills. In other words, it
matched up well with my experience (and with the day-to-day responsibilities of
the position). This was a chance to succeed, and I was determined to make the
most of it.</p>

<p>I put a lot of effort into my code submission. Like, a lot. I tried several
different approaches, tested it thoroughly, and refactored until I was happy
with it. That got me past the first step.</p>

<p>My focus was now on just one company, so I was able to prepare for the rest of
my interviews with clear focus. I learned about Braintree’s history, read
through all of the documentation for their API, built a demo app on their
gateway, and formed my own thoughts on it. This would all help me during the
onsite.</p>

<p>Braintree’s interviews followed the script I expected. In the absence of
algorithmic questions, I did well with communication, energy, and curiosity, and
I got a chance to show what I knew in an environment I was more comfortable
with.</p>

<p>After the last session ended, I was held in suspense for about 10 minutes. Then,
the recruiter dialed in and told me that they would be extending me an offer.</p>

<p>The negotiations that took place over the next few days went swimmingly. I was
in.</p>

<p><img src="https://cdn-images-1.medium.com/max/2000/0*lK29xUVPDr28a1rj." alt="mv_money" /></p>

<p>Like all good things, this process was a combination of hard work and
opportunity. Here are two of my personal takeaways.</p>

<ul>
  <li>Soft skills are important. Some people can solve any technical interview
question on the spot. I was not one of them, but at first I thought the only way
to succeed was to become one. So, I studied and studied to try and catch up. I
eventually realized that interviewers were more interested in how I think than
how much I know. By focusing on effective communication during my interviews, I
made my thought process transparent and saw good results.</li>
  <li>Always get feedback. Through all of my interviews, this is the most important
thing I learned. Without feedback, I was shooting at a target in the dark. When
I got tired of the disappointing results, I started to ask companies who
rejected me *why *they did so. Is there anything in particular that I can
improve upon? What was one thing I did well? The responses I received went a
long way towards making my target easier to see. For example, I wish I’d asked
for feedback after I got my first offer. Instead, I was too caught up in my own
“luck” to wonder what led the company to give me an offer. If I’d known exactly
what I’d done well during my interviews, I could have applied that knowledge
elsewhere.</li>
</ul>

<p>Just like most things you hear from strangers, take those with a grain of salt.</p>

<p>I’ll leave you with a quote that sums up some of my feelings about this
experience:</p>

<blockquote>
  <p>“A certificate of live birth is not the same thing by any stretch of the
imagination as a birth certificate.” - Donald Trump, referring to Barack Obama</p>
</blockquote>

<p>Wait, that’s not the right one. Here:</p>

<blockquote>
  <p>“I am a great believer in luck. The harder I work, the more of it I seem to
have.” — Coleman Cox</p>
</blockquote>

<p>Cheers.</p>

<p><em>Thanks Aline, Sam, Isabelle, Jerry, Randall, and Pops for reading drafts.</em></p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/2015/11/16/how-i-got-full-time-software-development-work-at-16/</guid>
                <description>
                    
                    This is how I got a full-time software development job right after high school.
                    
                </description>
                <pubDate>Mon, 16 Nov 2015 10:00:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
        
            <item>
                <title>Hello World</title>
                <link>http://tigerthinks.com/1998/09/08/hello-world/</link>
                <content:encoded>
                    <![CDATA[
                    <p>Hi. These are my notes on things.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/1998/09/08/hello-world/</guid>
                <description>
                    
                    The home for stuff that my brain has a hard time keeping around.
                    
                </description>
                <pubDate>Tue, 08 Sep 1998 11:11:00 -0400</pubDate>
                <author>Tiger Shen</author>
            </item>
        
    
  </channel>
</rss>
